/*
Copyright (c) 2020 Cedric Jimenez
This file is part of OpenOCPP.

OpenOCPP is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 2.1 of the License, or
(at your option) any later version.

OpenOCPP is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OpenOCPP. If not, see <http://www.gnu.org/licenses/>.
*/

/* Generated by json2cpp */

#ifndef OPENOCPP_{{ocpp_version_namespace.upper()}}_ICENTRALSYSTEMPROXY{{ocpp_version_suffix}}_H
#define OPENOCPP_{{ocpp_version_namespace.upper()}}_ICENTRALSYSTEMPROXY{{ocpp_version_suffix}}_H

#include "IWebsocketClient.h"
{%- for msg_name in csms_msgs %}
#include "{{msg_name}}.h"
{%- endfor %}
{%- for msg_name in cs_msgs %}
#include "{{msg_name}}.h"
{%- endfor %}

#include <functional>

namespace ocpp
{
namespace localcontroller
{
namespace {{ocpp_version_namespace}}
{

class ILocalControllerProxyEventsHandler{{ocpp_version_suffix}};

/** @brief Interface for central system proxy implementations */
class ICentralSystemProxy{{ocpp_version_suffix}}
{
  public:
    /** @brief Destructor */
    virtual ~ICentralSystemProxy{{ocpp_version_suffix}}() { }

    /**
     * @brief Get the charge point identifier
     * @return charge point identifier
     */
    virtual const std::string& identifier() const = 0;

    /**
     * @brief Set the call request timeout
     * @param timeout New timeout value
     */
    virtual void setTimeout(std::chrono::milliseconds timeout) = 0;

    /**
     * @brief Connect to the central system
     * @param url URL to connect to
     * @param credentials Credentials to use
     * @param connect_timeout Connection timeout in ms
     * @param retry_interval Retry interval in ms when connection cannot be established (0 = no retry)
     * @param ping_interval Interval between 2 websocket PING messages when the socket is idle
     * @return true if the client has been started, false otherwise
     */
    virtual bool connect(const std::string&                                     url,
                         const ocpp::websockets::IWebsocketClient::Credentials& credentials,
                         std::chrono::milliseconds                              connect_timeout = std::chrono::seconds(5),
                         std::chrono::milliseconds                              retry_interval  = std::chrono::seconds(5),
                         std::chrono::milliseconds                              ping_interval   = std::chrono::seconds(5)) = 0;

    /** @brief Disconnect from the central system */
    virtual void disconnect() = 0;

    /**
     * @brief Indicate if the connection with the central system is active
     * @return true if the connection is active, false otherwise
     */
    virtual bool isConnected() const = 0;

    /**
     * @brief Register a listener to the proxy events
     * @param listener Listener to the proxy events
     */
    virtual void registerListener(ILocalControllerProxyEventsHandler{{ocpp_version_suffix}}& listener) = 0;

    // OCPP operations

    {%- for msg_name in cs_msgs %}
    /**
     * @brief Send a {{msg_name}} message to the central system
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::{{ocpp_version_namespace}}::{{msg_name}}Req& request,
                      ocpp::messages::{{ocpp_version_namespace}}::{{msg_name}}Conf&      response,
                      std::string&                                        error,
                      std::string&                                        message) = 0;
    {%- endfor %}

    {%- for msg_name in csms_msgs %}
    /**
     * @brief Register a handler for the {{msg_name}} request from the central system
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(
        std::function<bool(const ocpp::messages::{{ocpp_version_namespace}}::{{msg_name}}Req&, ocpp::messages::{{ocpp_version_namespace}}::{{msg_name}}Conf&, std::string&, std::string&)>
            handler) = 0;
    {%- endfor %}
};

} // namespace {{ocpp_version_namespace}}
} // namespace localcontroller
} // namespace ocpp

#endif // OPENOCPP_{{ocpp_version_namespace.upper()}}_ICENTRALSYSTEMPROXY{{ocpp_version_suffix}}_H
