/*
Copyright (c) 2020 Cedric Jimenez
This file is part of OpenOCPP.

OpenOCPP is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 2.1 of the License, or
(at your option) any later version.

OpenOCPP is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OpenOCPP. If not, see <http://www.gnu.org/licenses/>.
*/

/* Generated by json2cpp */

#ifndef OPENOCPP_{{ocpp_version_namespace.upper()}}_ICHARGEPOINTPROXY{{ocpp_version_suffix}}_H
#define OPENOCPP_{{ocpp_version_namespace.upper()}}_ICHARGEPOINTPROXY{{ocpp_version_suffix}}_H

#include "ICentralSystem{{ocpp_version_suffix}}.h"
#include "ICentralSystemProxy{{ocpp_version_suffix}}.h"
#include "ILocalControllerConfig{{ocpp_version_suffix}}.h"
#include "RpcPool.h"

{%- for msg_name in csms_msgs %}
#include "{{msg_name}}{{ocpp_version_suffix}}.h"
{%- endfor %}

#include <functional>
#include <memory>

namespace ocpp
{
namespace localcontroller
{
namespace {{ocpp_version_namespace}}
{

/** @brief Interface for the charge point proxy implementations */
class IChargePointProxy{{ocpp_version_suffix}}
{
  public:
    /** @brief Destructor */
    virtual ~IChargePointProxy{{ocpp_version_suffix}}() { }

    /**
     * @brief Instanciate local controller's charge point proxy from a central system's charge point proxy
     * @param central_system_proxy Central system's charge point proxy
     * @param stack_config Stack configuration for local controller
     * @param rpc_pool RPC pool
     */
    static std::shared_ptr<IChargePointProxy{{ocpp_version_suffix}}> createFrom(
        std::shared_ptr<ocpp::centralsystem::{{ocpp_version_namespace}}::ICentralSystem{{ocpp_version_suffix}}::IChargePoint20>& central_system_proxy,
        const ocpp::config::ILocalControllerConfig{{ocpp_version_suffix}}&                         stack_config,
        ocpp::rpc::RpcPool&                                                 rpc_pool);

    /**
     * @brief Get the IP address of the charge point
     * @return IP address of the charge point
     */
    virtual const std::string& ipAddress() const = 0;

    /**
     * @brief Get the charge point identifier
     * @return charge point identifier
     */
    virtual const std::string& identifier() const = 0;

    /**
     * @brief Set the call request timeout
     * @param timeout New timeout value
     */
    virtual void setTimeout(std::chrono::milliseconds timeout) = 0;

    /** @brief Disconnect the charge point */
    virtual void disconnect() = 0;

    /**
     * @brief Get the associated central system proxy
     * @return Associated central system proxy
     */
    virtual std::shared_ptr<ICentralSystemProxy{{ocpp_version_suffix}}> centralSystemProxy() = 0;

    /**
     * @brief Register a listener to the proxy events
     * @param listener Listener to the proxy events
     */
    virtual void registerListener(ILocalControllerProxyEventsHandler{{ocpp_version_suffix}}& listener) = 0;

    // OCPP operations

    {%- for msg_name in csms_msgs %}
    /**
     * @brief Send a {{msg_name}} message to the charge point
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::{{ocpp_version_namespace}}::{{msg_name}}Req& request,
                      ocpp::messages::{{ocpp_version_namespace}}::{{msg_name}}Conf&      response,
                      std::string&                                        error,
                      std::string&                                        message) = 0;
    {%- endfor %}

    {%- for msg_name in cs_msgs %}
    /**
     * @brief Register a handler for the {{msg_name}} request from the charge point
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(
        std::function<bool(const ocpp::messages::{{ocpp_version_namespace}}::{{msg_name}}Req&, ocpp::messages::{{ocpp_version_namespace}}::{{msg_name}}Conf&, std::string&, std::string&)>
            handler) = 0;
    {%- endfor %}
};

} // namespace {{ocpp_version_namespace}}
} // namespace localcontroller
} // namespace ocpp

#endif // OPENOCPP_{{ocpp_version_namespace.upper()}}_ICHARGEPOINTPROXY{{ocpp_version_suffix}}_H
