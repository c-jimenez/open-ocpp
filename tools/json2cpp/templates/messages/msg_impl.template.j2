/*
Copyright (c) 2020 Cedric Jimenez
This file is part of OpenOCPP.

OpenOCPP is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 2.1 of the License, or
(at your option) any later version.

OpenOCPP is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OpenOCPP. If not, see <http://www.gnu.org/licenses/>.
*/

/*
    Generated by json2cpp from : {{msg.id}}
                                 {{msg.comment}}
*/

#include "{{msg.name}}{{ocpp_version_suffix}}.h"

#include "IRpc.h"

namespace ocpp
{
namespace messages
{
namespace {{ocpp_version_namespace}}
{

{%- for msg_name in msg.types %}
{%- set type = msg.types[msg_name] %}

/** @brief Convert a {{msg_name}} from a JSON representation */
bool {{msg_name}}Converter::fromJson(const rapidjson::Value&       json,
                                     {{msg_name}}&                 data,
                                     std::string&                  error_code,
                                     std::string&                  error_message)
{
    bool ret = true;

    {%- for field in type.fields.values() %}

    // {{field.name}}

    {%- if field.type in other_types %}

    {%- if not field.is_required %}
    if (json.HasMember("{{field.name}}"))
    {
    {%- endif %}
    
    {%- if other_types[field.type].basic_type == "enum" %}
    data.{{field.name}} = ocpp::types::{{ocpp_version_namespace}}::{{field.type}}Helper.fromString(json["{{field.name}}"].GetString());
    {%- else %}
    ocpp::types::{{ocpp_version_namespace}}::{{field.type}}Converter {{field.name}}_converter;
    ret = ret && {{field.name}}_converter.fromJson(json["{{field.name}}"], data.{{field.name}}, error_code, error_message);
    {%- endif %}

    {%- if not field.is_required %}
    }
    {%- endif %}
    
    {%- elif field.type == "array" %}
    if (json.HasMember("{{field.name}}"))
    {
        const rapidjson::Value& {{field.name}}_json = json["{{field.name}}"];
        
        {%- if field.array_type in other_types %}
        {%- if other_types[field.array_type].basic_type == "enum" %}
        for (auto it = {{field.name}}_json.Begin(); ret && (it != {{field.name}}_json.End()); ++it)
        {
            ocpp::types::{{ocpp_version_namespace}}::{{field.array_type}}& item = data.{{field.name}}.emplace_back();
            item = ocpp::types::{{ocpp_version_namespace}}::{{field.array_type}}Helper.fromString(it->GetString());
        }
        {%- else %}
        ocpp::types::{{ocpp_version_namespace}}::{{field.array_type}}Converter {{field.name}}_converter;
        for (auto it = {{field.name}}_json.Begin(); ret && (it != {{field.name}}_json.End()); ++it)
        {
            ocpp::types::{{ocpp_version_namespace}}::{{field.array_type}}& item = data.{{field.name}}.emplace_back();
            ret = ret && {{field.name}}_converter.fromJson(*it, item, error_code, error_message);
        }
        {%- endif %}
        {%- else %}
        for (auto it = {{field.name}}_json.Begin(); ret && (it != {{field.name}}_json.End()); ++it)
        {
            {{field.get_cpp_type(field.array_type, ocpp_version_namespace)}}& item = data.{{field.name}}.emplace_back();
            {%- if field.get_cpp_type(field.array_type, ocpp_version_namespace) == "std::string" %}
            item = it->GetString();
            {%- else %}
            item = it->GetInt();
            {%- endif %}
        }
        {%- endif %}
    }


    {%- elif field.type == "date-time" %}
    ret = ret && extract(json, "{{field.name}}", data.{{field.name}}, error_message);

    {%- else %}
    extract(json, "{{field.name}}", data.{{field.name}});
    {%- endif %}
    
    {%- endfor %}

    if (!ret)
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_TYPE_CONSTRAINT_VIOLATION;
    }

    return ret;
}

/** @brief Convert a {{msg_name}} to a JSON representation */
bool {{msg_name}}Converter::toJson(const {{msg_name}}& data, rapidjson::Document& json) 
{
    bool ret = true;

    {%- for field in type.fields.values() %}

    // {{field.name}}

    {%- if field.type in other_types %}

    {%- if not field.is_required %}
    if (data.{{field.name}}.isSet())
    {
    {%- endif %}
    
    {%- if other_types[field.type].basic_type == "enum" %}
    fill(json, "{{field.name}}", ocpp::types::{{ocpp_version_namespace}}::{{field.type}}Helper.toString(data.{{field.name}}));
    {%- else %}
    ocpp::types::{{ocpp_version_namespace}}::{{field.type}}Converter {{field.name}}_converter;
    {{field.name}}_converter.setAllocator(allocator);
    rapidjson::Document {{field.name}}_doc(rapidjson::kObjectType);
    ret = ret && {{field.name}}_converter.toJson(data.{{field.name}}, {{field.name}}_doc);
    json.AddMember(rapidjson::StringRef("{{field.name}}"), {{field.name}}_doc.Move(), *allocator);
    {%- endif %}

    {%- if not field.is_required %}
    }
    {%- endif %}
    
    {%- elif field.type == "array" %}

    {%- if not field.is_required %}
    if (!data.{{field.name}}.empty())
    {
    {%- endif %}

        rapidjson::Value {{field.name}}_json(rapidjson::kArrayType);
        {%- if field.array_type in other_types %}
        {%- if other_types[field.array_type].basic_type == "enum" %}
        for (const ocpp::types::{{ocpp_version_namespace}}::{{field.array_type}}& item : data.{{field.name}})
        {
            {{field.name}}_json.PushBack(rapidjson::Value(ocpp::types::{{ocpp_version_namespace}}::{{field.array_type}}Helper.toString(item).c_str(), *allocator).Move(), *allocator);
        }
        {%- else %}
        ocpp::types::{{ocpp_version_namespace}}::{{field.array_type}}Converter {{field.name}}_converter;
        {{field.name}}_converter.setAllocator(allocator);
        for (const ocpp::types::{{ocpp_version_namespace}}::{{field.array_type}}& item : data.{{field.name}})
        {
            rapidjson::Document item_doc(rapidjson::kObjectType);
            ret = ret && {{field.name}}_converter.toJson(item, item_doc);
            {{field.name}}_json.PushBack(item_doc.Move(), *allocator);
        }
        {%- endif %}
        {%- else %}
        for (const {{field.get_cpp_type(field.array_type, ocpp_version_namespace)}}& item : data.{{field.name}})
        {
            {%- if field.get_cpp_type(field.array_type, ocpp_version_namespace) == "std::string" %}
            {{field.name}}_json.PushBack(rapidjson::Value(item.c_str(), *allocator).Move(), *allocator);
            {%- else %}
            {{field.name}}_json.PushBack(rapidjson::Value(item), *allocator);
            {%- endif %}
        }
        {%- endif %}
        json.AddMember(rapidjson::StringRef("{{field.name}}"), {{field.name}}_json.Move(), *allocator);

    {%- if not field.is_required %}
    }
    {%- endif %}

    {%- else %}
    fill(json, "{{field.name}}", data.{{field.name}});
    {%- endif %}
    
    {%- endfor %}

    return ret;
}

{%- endfor %}

} // namespace {{ocpp_version_namespace}}
} // namespace messages
} // namespace ocpp
