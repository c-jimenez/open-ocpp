/*
Copyright (c) 2020 Cedric Jimenez
This file is part of OpenOCPP.

OpenOCPP is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 2.1 of the License, or
(at your option) any later version.

OpenOCPP is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OpenOCPP. If not, see <http://www.gnu.org/licenses/>.
*/

/* Generated by json2cpp */

#ifndef OPENOCPP_OCPP20_IBASICCHARGEPOINT20_H
#define OPENOCPP_OCPP20_IBASICCHARGEPOINT20_H

#include "BootNotification20.h"
#include "IBasicChargePointEventsHandler20.h"
#include "IChargePointConfig20.h"
#include "IDeviceModel20.h"
#include "StatusNotification20.h"

#include <memory>

namespace ocpp
{
namespace helpers
{
class ITimerPool;
class WorkerThreadPool;
} // namespace helpers
namespace database
{
class Database;
} // namespace database

namespace chargepoint
{
namespace ocpp20
{

/** @brief Interface for basic charge point implementations */
class IBasicChargePoint20
{
  public:
    /**
     * @brief Instanciate a charge point
     * @param stack_config Stack configuration
     * @param device_model Device model
     * @param event_handler Stack event handler
     */
    static std::unique_ptr<IBasicChargePoint20> create(const ocpp::config::IChargePointConfig20& stack_config,
                                                       IDeviceModel&                             device_model,
                                                       IBasicChargePointEventsHandler&           events_handler);

    /**
     * @brief Instanciate a charge point with the provided timer and worker pools
     *        To use when you have to instanciate multiple Central System / Charge Point
     *        => Allow to reduce thread and memory usage
     * @param stack_config Stack configuration
     * @param device_model Device model
     * @param event_handler Stack event handler
     * @param timer_pool Timer pool
     * @param worker_pool Worker thread pool
     */
    static std::unique_ptr<IBasicChargePoint20> create(const ocpp::config::IChargePointConfig20&        stack_config,
                                                       IDeviceModel&                                    device_model,
                                                       IBasicChargePointEventsHandler&                  events_handler,
                                                       std::shared_ptr<ocpp::helpers::ITimerPool>       timer_pool,
                                                       std::shared_ptr<ocpp::helpers::WorkerThreadPool> worker_pool);

    /** @brief Destructor */
    virtual ~IBasicChargePoint20() { }

    /**
     * @brief Get the timer pool associated to the charge point
     * @return Timer pool associated to the charge point
     */
    virtual ocpp::helpers::ITimerPool& getTimerPool() = 0;

    /**
     * @brief Get the worker pool associated to the charge point
     * @return Worker pool associated to the charge point
     */
    virtual ocpp::helpers::WorkerThreadPool& getWorkerPool() = 0;

    /**
     * @brief Reset the charge point's internal data (can be done only when the charge point is stopped)
     * @return true if the data has been reset, false otherwise
     */
    virtual bool resetData() = 0;

    /**
     * @brief Reset only connector related persistency data (can be done only when the charge point is stopped)
     * @return true if the data has been reset, false otherwise
     */
    virtual bool resetConnectorData() = 0;

    /**
     * @brief Start the charge point
     * @param boot_reason Boot notification reason
     * @return true if the charge point has been started, false otherwise
     */
    virtual bool start(ocpp::types::ocpp20::BootReasonEnumType boot_reason) = 0;

    /**
     * @brief Stop the charge point
     * @return true if the charge point has been stopped, false otherwise
     */
    virtual bool stop() = 0;

    /**
     * @brief Triggers a reconnexion of the charge point to the Central System
     * @return true if the reconnexion has been scheduled, false otherwise
     */
    virtual bool reconnect() = 0;

    /**
     * @brief Get the registration status of the charge point
     * @return Registration of the charge point
     */
    virtual ocpp::types::ocpp20::RegistrationStatusEnumType getRegistrationStatus() = 0;

    /**
     * @brief Get the status of a connector
     * @param evse_id Id of the EVSE
     * @param connector_id Id of the connector
     * @return Status of the connector
     */
    virtual ocpp::types::ocpp20::ConnectorStatusEnumType getConnectorStatus(unsigned int evse_id, unsigned int connector_id) = 0;

    /**
     * @brief Notify a new status for a connector
     * @param evse_id Id of the EVSE
     * @param connector_id Id of the connector
     * @param status Status of the connector
     * @return true if the status has been notified, false otherwise
     */
    virtual bool statusNotification(unsigned int                                 evse_id,
                                    unsigned int                                 connector_id,
                                    ocpp::types::ocpp20::ConnectorStatusEnumType status) = 0;
};

} // namespace ocpp20
} // namespace chargepoint
} // namespace ocpp

#endif // OPENOCPP_OCPP20_IBASICCHARGEPOINT20_H