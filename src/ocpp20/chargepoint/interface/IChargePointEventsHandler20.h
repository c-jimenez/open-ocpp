/*
Copyright (c) 2020 Cedric Jimenez
This file is part of OpenOCPP.

OpenOCPP is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 2.1 of the License, or
(at your option) any later version.

OpenOCPP is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OpenOCPP. If not, see <http://www.gnu.org/licenses/>.
*/

/* Generated by json2cpp */

#ifndef OPENOCPP_OCPP20_ICHARGEPOINTEVENTSHANDLERCHARGEPOINT20_H
#define OPENOCPP_OCPP20_ICHARGEPOINTEVENTSHANDLERCHARGEPOINT20_H
#include "CancelReservation20.h"
#include "CertificateSigned20.h"
#include "ChangeAvailability20.h"
#include "ClearCache20.h"
#include "ClearChargingProfile20.h"
#include "ClearDisplayMessage20.h"
#include "ClearVariableMonitoring20.h"
#include "CustomerInformation20.h"
#include "DataTransfer20.h"
#include "DeleteCertificate20.h"
#include "Get15118EVCertificate20.h"
#include "GetBaseReport20.h"
#include "GetCertificateStatus20.h"
#include "GetChargingProfiles20.h"
#include "GetCompositeSchedule20.h"
#include "GetDisplayMessages20.h"
#include "GetInstalledCertificateIds20.h"
#include "GetLocalListVersion20.h"
#include "GetLog20.h"
#include "GetMonitoringReport20.h"
#include "GetReport20.h"
#include "GetTransactionStatus20.h"
#include "GetVariables20.h"
#include "InstallCertificate20.h"
#include "PublishFirmware20.h"
#include "RequestStartTransaction20.h"
#include "RequestStopTransaction20.h"
#include "ReserveNow20.h"
#include "Reset20.h"
#include "SendLocalList20.h"
#include "SetChargingProfile20.h"
#include "SetDisplayMessage20.h"
#include "SetMonitoringBase20.h"
#include "SetMonitoringLevel20.h"
#include "SetNetworkProfile20.h"
#include "SetVariableMonitoring20.h"
#include "SetVariables20.h"
#include "TriggerMessage20.h"
#include "UnlockConnector20.h"
#include "UnpublishFirmware20.h"
#include "UpdateFirmware20.h"

namespace ocpp
{
namespace chargepoint
{
namespace ocpp20
{

/** @brief Interface for charge point event handlers implementations */
class IChargePointEventsHandler20
{
  public:
    /** @brief Destructor */
    virtual ~IChargePointEventsHandler20() { }

    /** @brief Called when the first attempt to connect to the central system has failed */
    virtual void connectionFailed() = 0;

    /**
     * @brief Called when the charge point connection status has changed
     * @param isConnected true if the charge point is connected to the central system, false otherwise
     */
    virtual void connectionStateChanged(bool isConnected) = 0;

    // OCPP operations
    /**
      * @brief Called on reception of a CancelReservation message from the central system
      * @param request Request received
      * @param response Response to send
      * @param error Error (Empty if not a CallError)
      * @param message Error message (Empty if not a CallError)
      * @return true if the request has been sent and a response has been received, false otherwise
      */
    virtual bool onCancelReservation(const ocpp::messages::ocpp20::CancelReservationReq& request,
                                     ocpp::messages::ocpp20::CancelReservationConf&      response,
                                     std::string&                                        error,
                                     std::string&                                        message) = 0;
    /**
      * @brief Called on reception of a CertificateSigned message from the central system
      * @param request Request received
      * @param response Response to send
      * @param error Error (Empty if not a CallError)
      * @param message Error message (Empty if not a CallError)
      * @return true if the request has been sent and a response has been received, false otherwise
      */
    virtual bool onCertificateSigned(const ocpp::messages::ocpp20::CertificateSignedReq& request,
                                     ocpp::messages::ocpp20::CertificateSignedConf&      response,
                                     std::string&                                        error,
                                     std::string&                                        message) = 0;
    /**
      * @brief Called on reception of a ChangeAvailability message from the central system
      * @param request Request received
      * @param response Response to send
      * @param error Error (Empty if not a CallError)
      * @param message Error message (Empty if not a CallError)
      * @return true if the request has been sent and a response has been received, false otherwise
      */
    virtual bool onChangeAvailability(const ocpp::messages::ocpp20::ChangeAvailabilityReq& request,
                                      ocpp::messages::ocpp20::ChangeAvailabilityConf&      response,
                                      std::string&                                         error,
                                      std::string&                                         message) = 0;
    /**
      * @brief Called on reception of a ClearCache message from the central system
      * @param request Request received
      * @param response Response to send
      * @param error Error (Empty if not a CallError)
      * @param message Error message (Empty if not a CallError)
      * @return true if the request has been sent and a response has been received, false otherwise
      */
    virtual bool onClearCache(const ocpp::messages::ocpp20::ClearCacheReq& request,
                              ocpp::messages::ocpp20::ClearCacheConf&      response,
                              std::string&                                 error,
                              std::string&                                 message) = 0;
    /**
      * @brief Called on reception of a ClearChargingProfile message from the central system
      * @param request Request received
      * @param response Response to send
      * @param error Error (Empty if not a CallError)
      * @param message Error message (Empty if not a CallError)
      * @return true if the request has been sent and a response has been received, false otherwise
      */
    virtual bool onClearChargingProfile(const ocpp::messages::ocpp20::ClearChargingProfileReq& request,
                                        ocpp::messages::ocpp20::ClearChargingProfileConf&      response,
                                        std::string&                                           error,
                                        std::string&                                           message) = 0;
    /**
      * @brief Called on reception of a ClearDisplayMessage message from the central system
      * @param request Request received
      * @param response Response to send
      * @param error Error (Empty if not a CallError)
      * @param message Error message (Empty if not a CallError)
      * @return true if the request has been sent and a response has been received, false otherwise
      */
    virtual bool onClearDisplayMessage(const ocpp::messages::ocpp20::ClearDisplayMessageReq& request,
                                       ocpp::messages::ocpp20::ClearDisplayMessageConf&      response,
                                       std::string&                                          error,
                                       std::string&                                          message) = 0;
    /**
      * @brief Called on reception of a ClearVariableMonitoring message from the central system
      * @param request Request received
      * @param response Response to send
      * @param error Error (Empty if not a CallError)
      * @param message Error message (Empty if not a CallError)
      * @return true if the request has been sent and a response has been received, false otherwise
      */
    virtual bool onClearVariableMonitoring(const ocpp::messages::ocpp20::ClearVariableMonitoringReq& request,
                                           ocpp::messages::ocpp20::ClearVariableMonitoringConf&      response,
                                           std::string&                                              error,
                                           std::string&                                              message) = 0;
    /**
      * @brief Called on reception of a CustomerInformation message from the central system
      * @param request Request received
      * @param response Response to send
      * @param error Error (Empty if not a CallError)
      * @param message Error message (Empty if not a CallError)
      * @return true if the request has been sent and a response has been received, false otherwise
      */
    virtual bool onCustomerInformation(const ocpp::messages::ocpp20::CustomerInformationReq& request,
                                       ocpp::messages::ocpp20::CustomerInformationConf&      response,
                                       std::string&                                          error,
                                       std::string&                                          message) = 0;
    /**
      * @brief Called on reception of a DataTransfer message from the central system
      * @param request Request received
      * @param response Response to send
      * @param error Error (Empty if not a CallError)
      * @param message Error message (Empty if not a CallError)
      * @return true if the request has been sent and a response has been received, false otherwise
      */
    virtual bool onDataTransfer(const ocpp::messages::ocpp20::DataTransferReq& request,
                                ocpp::messages::ocpp20::DataTransferConf&      response,
                                std::string&                                   error,
                                std::string&                                   message) = 0;
    /**
      * @brief Called on reception of a DeleteCertificate message from the central system
      * @param request Request received
      * @param response Response to send
      * @param error Error (Empty if not a CallError)
      * @param message Error message (Empty if not a CallError)
      * @return true if the request has been sent and a response has been received, false otherwise
      */
    virtual bool onDeleteCertificate(const ocpp::messages::ocpp20::DeleteCertificateReq& request,
                                     ocpp::messages::ocpp20::DeleteCertificateConf&      response,
                                     std::string&                                        error,
                                     std::string&                                        message) = 0;
    /**
      * @brief Called on reception of a Get15118EVCertificate message from the central system
      * @param request Request received
      * @param response Response to send
      * @param error Error (Empty if not a CallError)
      * @param message Error message (Empty if not a CallError)
      * @return true if the request has been sent and a response has been received, false otherwise
      */
    virtual bool onGet15118EVCertificate(const ocpp::messages::ocpp20::Get15118EVCertificateReq& request,
                                         ocpp::messages::ocpp20::Get15118EVCertificateConf&      response,
                                         std::string&                                            error,
                                         std::string&                                            message) = 0;
    /**
      * @brief Called on reception of a GetBaseReport message from the central system
      * @param request Request received
      * @param response Response to send
      * @param error Error (Empty if not a CallError)
      * @param message Error message (Empty if not a CallError)
      * @return true if the request has been sent and a response has been received, false otherwise
      */
    virtual bool onGetBaseReport(const ocpp::messages::ocpp20::GetBaseReportReq& request,
                                 ocpp::messages::ocpp20::GetBaseReportConf&      response,
                                 std::string&                                    error,
                                 std::string&                                    message) = 0;
    /**
      * @brief Called on reception of a GetCertificateStatus message from the central system
      * @param request Request received
      * @param response Response to send
      * @param error Error (Empty if not a CallError)
      * @param message Error message (Empty if not a CallError)
      * @return true if the request has been sent and a response has been received, false otherwise
      */
    virtual bool onGetCertificateStatus(const ocpp::messages::ocpp20::GetCertificateStatusReq& request,
                                        ocpp::messages::ocpp20::GetCertificateStatusConf&      response,
                                        std::string&                                           error,
                                        std::string&                                           message) = 0;
    /**
      * @brief Called on reception of a GetChargingProfiles message from the central system
      * @param request Request received
      * @param response Response to send
      * @param error Error (Empty if not a CallError)
      * @param message Error message (Empty if not a CallError)
      * @return true if the request has been sent and a response has been received, false otherwise
      */
    virtual bool onGetChargingProfiles(const ocpp::messages::ocpp20::GetChargingProfilesReq& request,
                                       ocpp::messages::ocpp20::GetChargingProfilesConf&      response,
                                       std::string&                                          error,
                                       std::string&                                          message) = 0;
    /**
      * @brief Called on reception of a GetCompositeSchedule message from the central system
      * @param request Request received
      * @param response Response to send
      * @param error Error (Empty if not a CallError)
      * @param message Error message (Empty if not a CallError)
      * @return true if the request has been sent and a response has been received, false otherwise
      */
    virtual bool onGetCompositeSchedule(const ocpp::messages::ocpp20::GetCompositeScheduleReq& request,
                                        ocpp::messages::ocpp20::GetCompositeScheduleConf&      response,
                                        std::string&                                           error,
                                        std::string&                                           message) = 0;
    /**
      * @brief Called on reception of a GetDisplayMessages message from the central system
      * @param request Request received
      * @param response Response to send
      * @param error Error (Empty if not a CallError)
      * @param message Error message (Empty if not a CallError)
      * @return true if the request has been sent and a response has been received, false otherwise
      */
    virtual bool onGetDisplayMessages(const ocpp::messages::ocpp20::GetDisplayMessagesReq& request,
                                      ocpp::messages::ocpp20::GetDisplayMessagesConf&      response,
                                      std::string&                                         error,
                                      std::string&                                         message) = 0;
    /**
      * @brief Called on reception of a GetInstalledCertificateIds message from the central system
      * @param request Request received
      * @param response Response to send
      * @param error Error (Empty if not a CallError)
      * @param message Error message (Empty if not a CallError)
      * @return true if the request has been sent and a response has been received, false otherwise
      */
    virtual bool onGetInstalledCertificateIds(const ocpp::messages::ocpp20::GetInstalledCertificateIdsReq& request,
                                              ocpp::messages::ocpp20::GetInstalledCertificateIdsConf&      response,
                                              std::string&                                                 error,
                                              std::string&                                                 message) = 0;
    /**
      * @brief Called on reception of a GetLocalListVersion message from the central system
      * @param request Request received
      * @param response Response to send
      * @param error Error (Empty if not a CallError)
      * @param message Error message (Empty if not a CallError)
      * @return true if the request has been sent and a response has been received, false otherwise
      */
    virtual bool onGetLocalListVersion(const ocpp::messages::ocpp20::GetLocalListVersionReq& request,
                                       ocpp::messages::ocpp20::GetLocalListVersionConf&      response,
                                       std::string&                                          error,
                                       std::string&                                          message) = 0;
    /**
      * @brief Called on reception of a GetLog message from the central system
      * @param request Request received
      * @param response Response to send
      * @param error Error (Empty if not a CallError)
      * @param message Error message (Empty if not a CallError)
      * @return true if the request has been sent and a response has been received, false otherwise
      */
    virtual bool onGetLog(const ocpp::messages::ocpp20::GetLogReq& request,
                          ocpp::messages::ocpp20::GetLogConf&      response,
                          std::string&                             error,
                          std::string&                             message) = 0;
    /**
      * @brief Called on reception of a GetMonitoringReport message from the central system
      * @param request Request received
      * @param response Response to send
      * @param error Error (Empty if not a CallError)
      * @param message Error message (Empty if not a CallError)
      * @return true if the request has been sent and a response has been received, false otherwise
      */
    virtual bool onGetMonitoringReport(const ocpp::messages::ocpp20::GetMonitoringReportReq& request,
                                       ocpp::messages::ocpp20::GetMonitoringReportConf&      response,
                                       std::string&                                          error,
                                       std::string&                                          message) = 0;
    /**
      * @brief Called on reception of a GetReport message from the central system
      * @param request Request received
      * @param response Response to send
      * @param error Error (Empty if not a CallError)
      * @param message Error message (Empty if not a CallError)
      * @return true if the request has been sent and a response has been received, false otherwise
      */
    virtual bool onGetReport(const ocpp::messages::ocpp20::GetReportReq& request,
                             ocpp::messages::ocpp20::GetReportConf&      response,
                             std::string&                                error,
                             std::string&                                message) = 0;
    /**
      * @brief Called on reception of a GetTransactionStatus message from the central system
      * @param request Request received
      * @param response Response to send
      * @param error Error (Empty if not a CallError)
      * @param message Error message (Empty if not a CallError)
      * @return true if the request has been sent and a response has been received, false otherwise
      */
    virtual bool onGetTransactionStatus(const ocpp::messages::ocpp20::GetTransactionStatusReq& request,
                                        ocpp::messages::ocpp20::GetTransactionStatusConf&      response,
                                        std::string&                                           error,
                                        std::string&                                           message) = 0;
    /**
      * @brief Called on reception of a GetVariables message from the central system
      * @param request Request received
      * @param response Response to send
      * @param error Error (Empty if not a CallError)
      * @param message Error message (Empty if not a CallError)
      * @return true if the request has been sent and a response has been received, false otherwise
      */
    virtual bool onGetVariables(const ocpp::messages::ocpp20::GetVariablesReq& request,
                                ocpp::messages::ocpp20::GetVariablesConf&      response,
                                std::string&                                   error,
                                std::string&                                   message) = 0;
    /**
      * @brief Called on reception of a InstallCertificate message from the central system
      * @param request Request received
      * @param response Response to send
      * @param error Error (Empty if not a CallError)
      * @param message Error message (Empty if not a CallError)
      * @return true if the request has been sent and a response has been received, false otherwise
      */
    virtual bool onInstallCertificate(const ocpp::messages::ocpp20::InstallCertificateReq& request,
                                      ocpp::messages::ocpp20::InstallCertificateConf&      response,
                                      std::string&                                         error,
                                      std::string&                                         message) = 0;
    /**
      * @brief Called on reception of a PublishFirmware message from the central system
      * @param request Request received
      * @param response Response to send
      * @param error Error (Empty if not a CallError)
      * @param message Error message (Empty if not a CallError)
      * @return true if the request has been sent and a response has been received, false otherwise
      */
    virtual bool onPublishFirmware(const ocpp::messages::ocpp20::PublishFirmwareReq& request,
                                   ocpp::messages::ocpp20::PublishFirmwareConf&      response,
                                   std::string&                                      error,
                                   std::string&                                      message) = 0;
    /**
      * @brief Called on reception of a RequestStartTransaction message from the central system
      * @param request Request received
      * @param response Response to send
      * @param error Error (Empty if not a CallError)
      * @param message Error message (Empty if not a CallError)
      * @return true if the request has been sent and a response has been received, false otherwise
      */
    virtual bool onRequestStartTransaction(const ocpp::messages::ocpp20::RequestStartTransactionReq& request,
                                           ocpp::messages::ocpp20::RequestStartTransactionConf&      response,
                                           std::string&                                              error,
                                           std::string&                                              message) = 0;
    /**
      * @brief Called on reception of a RequestStopTransaction message from the central system
      * @param request Request received
      * @param response Response to send
      * @param error Error (Empty if not a CallError)
      * @param message Error message (Empty if not a CallError)
      * @return true if the request has been sent and a response has been received, false otherwise
      */
    virtual bool onRequestStopTransaction(const ocpp::messages::ocpp20::RequestStopTransactionReq& request,
                                          ocpp::messages::ocpp20::RequestStopTransactionConf&      response,
                                          std::string&                                             error,
                                          std::string&                                             message) = 0;
    /**
      * @brief Called on reception of a ReserveNow message from the central system
      * @param request Request received
      * @param response Response to send
      * @param error Error (Empty if not a CallError)
      * @param message Error message (Empty if not a CallError)
      * @return true if the request has been sent and a response has been received, false otherwise
      */
    virtual bool onReserveNow(const ocpp::messages::ocpp20::ReserveNowReq& request,
                              ocpp::messages::ocpp20::ReserveNowConf&      response,
                              std::string&                                 error,
                              std::string&                                 message) = 0;
    /**
      * @brief Called on reception of a Reset message from the central system
      * @param request Request received
      * @param response Response to send
      * @param error Error (Empty if not a CallError)
      * @param message Error message (Empty if not a CallError)
      * @return true if the request has been sent and a response has been received, false otherwise
      */
    virtual bool onReset(const ocpp::messages::ocpp20::ResetReq& request,
                         ocpp::messages::ocpp20::ResetConf&      response,
                         std::string&                            error,
                         std::string&                            message) = 0;
    /**
      * @brief Called on reception of a SendLocalList message from the central system
      * @param request Request received
      * @param response Response to send
      * @param error Error (Empty if not a CallError)
      * @param message Error message (Empty if not a CallError)
      * @return true if the request has been sent and a response has been received, false otherwise
      */
    virtual bool onSendLocalList(const ocpp::messages::ocpp20::SendLocalListReq& request,
                                 ocpp::messages::ocpp20::SendLocalListConf&      response,
                                 std::string&                                    error,
                                 std::string&                                    message) = 0;
    /**
      * @brief Called on reception of a SetChargingProfile message from the central system
      * @param request Request received
      * @param response Response to send
      * @param error Error (Empty if not a CallError)
      * @param message Error message (Empty if not a CallError)
      * @return true if the request has been sent and a response has been received, false otherwise
      */
    virtual bool onSetChargingProfile(const ocpp::messages::ocpp20::SetChargingProfileReq& request,
                                      ocpp::messages::ocpp20::SetChargingProfileConf&      response,
                                      std::string&                                         error,
                                      std::string&                                         message) = 0;
    /**
      * @brief Called on reception of a SetDisplayMessage message from the central system
      * @param request Request received
      * @param response Response to send
      * @param error Error (Empty if not a CallError)
      * @param message Error message (Empty if not a CallError)
      * @return true if the request has been sent and a response has been received, false otherwise
      */
    virtual bool onSetDisplayMessage(const ocpp::messages::ocpp20::SetDisplayMessageReq& request,
                                     ocpp::messages::ocpp20::SetDisplayMessageConf&      response,
                                     std::string&                                        error,
                                     std::string&                                        message) = 0;
    /**
      * @brief Called on reception of a SetMonitoringBase message from the central system
      * @param request Request received
      * @param response Response to send
      * @param error Error (Empty if not a CallError)
      * @param message Error message (Empty if not a CallError)
      * @return true if the request has been sent and a response has been received, false otherwise
      */
    virtual bool onSetMonitoringBase(const ocpp::messages::ocpp20::SetMonitoringBaseReq& request,
                                     ocpp::messages::ocpp20::SetMonitoringBaseConf&      response,
                                     std::string&                                        error,
                                     std::string&                                        message) = 0;
    /**
      * @brief Called on reception of a SetMonitoringLevel message from the central system
      * @param request Request received
      * @param response Response to send
      * @param error Error (Empty if not a CallError)
      * @param message Error message (Empty if not a CallError)
      * @return true if the request has been sent and a response has been received, false otherwise
      */
    virtual bool onSetMonitoringLevel(const ocpp::messages::ocpp20::SetMonitoringLevelReq& request,
                                      ocpp::messages::ocpp20::SetMonitoringLevelConf&      response,
                                      std::string&                                         error,
                                      std::string&                                         message) = 0;
    /**
      * @brief Called on reception of a SetNetworkProfile message from the central system
      * @param request Request received
      * @param response Response to send
      * @param error Error (Empty if not a CallError)
      * @param message Error message (Empty if not a CallError)
      * @return true if the request has been sent and a response has been received, false otherwise
      */
    virtual bool onSetNetworkProfile(const ocpp::messages::ocpp20::SetNetworkProfileReq& request,
                                     ocpp::messages::ocpp20::SetNetworkProfileConf&      response,
                                     std::string&                                        error,
                                     std::string&                                        message) = 0;
    /**
      * @brief Called on reception of a SetVariableMonitoring message from the central system
      * @param request Request received
      * @param response Response to send
      * @param error Error (Empty if not a CallError)
      * @param message Error message (Empty if not a CallError)
      * @return true if the request has been sent and a response has been received, false otherwise
      */
    virtual bool onSetVariableMonitoring(const ocpp::messages::ocpp20::SetVariableMonitoringReq& request,
                                         ocpp::messages::ocpp20::SetVariableMonitoringConf&      response,
                                         std::string&                                            error,
                                         std::string&                                            message) = 0;
    /**
      * @brief Called on reception of a SetVariables message from the central system
      * @param request Request received
      * @param response Response to send
      * @param error Error (Empty if not a CallError)
      * @param message Error message (Empty if not a CallError)
      * @return true if the request has been sent and a response has been received, false otherwise
      */
    virtual bool onSetVariables(const ocpp::messages::ocpp20::SetVariablesReq& request,
                                ocpp::messages::ocpp20::SetVariablesConf&      response,
                                std::string&                                   error,
                                std::string&                                   message) = 0;
    /**
      * @brief Called on reception of a TriggerMessage message from the central system
      * @param request Request received
      * @param response Response to send
      * @param error Error (Empty if not a CallError)
      * @param message Error message (Empty if not a CallError)
      * @return true if the request has been sent and a response has been received, false otherwise
      */
    virtual bool onTriggerMessage(const ocpp::messages::ocpp20::TriggerMessageReq& request,
                                  ocpp::messages::ocpp20::TriggerMessageConf&      response,
                                  std::string&                                     error,
                                  std::string&                                     message) = 0;
    /**
      * @brief Called on reception of a UnlockConnector message from the central system
      * @param request Request received
      * @param response Response to send
      * @param error Error (Empty if not a CallError)
      * @param message Error message (Empty if not a CallError)
      * @return true if the request has been sent and a response has been received, false otherwise
      */
    virtual bool onUnlockConnector(const ocpp::messages::ocpp20::UnlockConnectorReq& request,
                                   ocpp::messages::ocpp20::UnlockConnectorConf&      response,
                                   std::string&                                      error,
                                   std::string&                                      message) = 0;
    /**
      * @brief Called on reception of a UnpublishFirmware message from the central system
      * @param request Request received
      * @param response Response to send
      * @param error Error (Empty if not a CallError)
      * @param message Error message (Empty if not a CallError)
      * @return true if the request has been sent and a response has been received, false otherwise
      */
    virtual bool onUnpublishFirmware(const ocpp::messages::ocpp20::UnpublishFirmwareReq& request,
                                     ocpp::messages::ocpp20::UnpublishFirmwareConf&      response,
                                     std::string&                                        error,
                                     std::string&                                        message) = 0;
    /**
      * @brief Called on reception of a UpdateFirmware message from the central system
      * @param request Request received
      * @param response Response to send
      * @param error Error (Empty if not a CallError)
      * @param message Error message (Empty if not a CallError)
      * @return true if the request has been sent and a response has been received, false otherwise
      */
    virtual bool onUpdateFirmware(const ocpp::messages::ocpp20::UpdateFirmwareReq& request,
                                  ocpp::messages::ocpp20::UpdateFirmwareConf&      response,
                                  std::string&                                     error,
                                  std::string&                                     message) = 0;
};

} // namespace ocpp20
} // namespace chargepoint
} // namespace ocpp

#endif // OPENOCPP_OCPP20_ICHARGEPOINTEVENTSHANDLERCHARGEPOINT20_H