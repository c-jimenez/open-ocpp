/*
Copyright (c) 2020 Cedric Jimenez
This file is part of OpenOCPP.

OpenOCPP is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 2.1 of the License, or
(at your option) any later version.

OpenOCPP is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OpenOCPP. If not, see <http://www.gnu.org/licenses/>.
*/

/* Generated by json2cpp */

#ifndef OPENOCPP_OCPP20_ICHARGEPOINT20_H
#define OPENOCPP_OCPP20_ICHARGEPOINT20_H

#include "Authorize20.h"
#include "BootNotification20.h"
#include "ClearedChargingLimit20.h"
#include "CostUpdated20.h"
#include "DataTransfer20.h"
#include "FirmwareStatusNotification20.h"
#include "Heartbeat20.h"
#include "IChargePointConfig20.h"
#include "IChargePointEventsHandler20.h"
#include "LogStatusNotification20.h"
#include "MeterValues20.h"
#include "NotifyChargingLimit20.h"
#include "NotifyCustomerInformation20.h"
#include "NotifyDisplayMessages20.h"
#include "NotifyEVChargingNeeds20.h"
#include "NotifyEVChargingSchedule20.h"
#include "NotifyEvent20.h"
#include "NotifyMonitoringReport20.h"
#include "NotifyReport20.h"
#include "PublishFirmwareStatusNotification20.h"
#include "ReportChargingProfiles20.h"
#include "ReservationStatusUpdate20.h"
#include "SecurityEventNotification20.h"
#include "SignCertificate20.h"
#include "StatusNotification20.h"
#include "TransactionEvent20.h"

#include <memory>

namespace ocpp
{
namespace helpers
{
class ITimerPool;
class WorkerThreadPool;
} // namespace helpers
namespace database
{
class Database;
} // namespace database

namespace chargepoint
{
namespace ocpp20
{

/** @brief Interface for charge point implementations */
class IChargePoint20
{
  public:
    /**
     * @brief Instanciate a charge point
     * @param stack_config Stack configuration
     * @param event_handler Stack event handler
     */
    static std::unique_ptr<IChargePoint20> create(const ocpp::config::IChargePointConfig20& stack_config,
                                                  IChargePointEventsHandler20&              events_handler);

    /**
     * @brief Instanciate a charge point with the provided timer and worker pools
     *        To use when you have to instanciate multiple Central System / Charge Point
     *        => Allow to reduce thread and memory usage
     * @param stack_config Stack configuration
     * @param event_handler Stack event handler
     * @param timer_pool Timer pool
     * @param worker_pool Worker thread pool
     */
    static std::unique_ptr<IChargePoint20> create(const ocpp::config::IChargePointConfig20&        stack_config,
                                                  IChargePointEventsHandler20&                     events_handler,
                                                  std::shared_ptr<ocpp::helpers::ITimerPool>       timer_pool,
                                                  std::shared_ptr<ocpp::helpers::WorkerThreadPool> worker_pool);

    /** @brief Destructor */
    virtual ~IChargePoint20() { }

    /**
     * @brief Get the timer pool associated to the charge point
     * @return Timer pool associated to the charge point
     */
    virtual ocpp::helpers::ITimerPool& getTimerPool() = 0;

    /**
     * @brief Get the worker pool associated to the charge point
     * @return Worker pool associated to the charge point
     */
    virtual ocpp::helpers::WorkerThreadPool& getWorkerPool() = 0;

    /**
     * @brief Reset the charge point's internal data (can be done only when the charge point is stopped)
     * @return true if the data has been reset, false otherwise
     */
    virtual bool resetData() = 0;

    /**
     * @brief Start the charge point
     * @return true if the charge point has been started, false otherwise
     */
    virtual bool start() = 0;

    /**
     * @brief Stop the charge point
     * @return true if the charge point has been stopped, false otherwise
     */
    virtual bool stop() = 0;

    /**
     * @brief Triggers a reconnexion of the charge point to the Central System
     * @return true if the reconnexion has been scheduled, false otherwise
     */
    virtual bool reconnect() = 0;

    // OCPP operations
    /**
     * @brief Send a BootNotification message to the central system
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::BootNotificationReq& request,
                      ocpp::messages::ocpp20::BootNotificationConf&      response,
                      std::string&                                       error,
                      std::string&                                       message) = 0;
    /**
     * @brief Send a Authorize message to the central system
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::AuthorizeReq& request,
                      ocpp::messages::ocpp20::AuthorizeConf&      response,
                      std::string&                                error,
                      std::string&                                message) = 0;
    /**
     * @brief Send a ClearedChargingLimit message to the central system
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::ClearedChargingLimitReq& request,
                      ocpp::messages::ocpp20::ClearedChargingLimitConf&      response,
                      std::string&                                           error,
                      std::string&                                           message) = 0;
    /**
     * @brief Send a CostUpdated message to the central system
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::CostUpdatedReq& request,
                      ocpp::messages::ocpp20::CostUpdatedConf&      response,
                      std::string&                                  error,
                      std::string&                                  message) = 0;
    /**
     * @brief Send a DataTransfer message to the central system
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::DataTransferReq& request,
                      ocpp::messages::ocpp20::DataTransferConf&      response,
                      std::string&                                   error,
                      std::string&                                   message) = 0;
    /**
     * @brief Send a FirmwareStatusNotification message to the central system
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::FirmwareStatusNotificationReq& request,
                      ocpp::messages::ocpp20::FirmwareStatusNotificationConf&      response,
                      std::string&                                                 error,
                      std::string&                                                 message) = 0;
    /**
     * @brief Send a Heartbeat message to the central system
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::HeartbeatReq& request,
                      ocpp::messages::ocpp20::HeartbeatConf&      response,
                      std::string&                                error,
                      std::string&                                message) = 0;
    /**
     * @brief Send a LogStatusNotification message to the central system
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::LogStatusNotificationReq& request,
                      ocpp::messages::ocpp20::LogStatusNotificationConf&      response,
                      std::string&                                            error,
                      std::string&                                            message) = 0;
    /**
     * @brief Send a MeterValues message to the central system
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::MeterValuesReq& request,
                      ocpp::messages::ocpp20::MeterValuesConf&      response,
                      std::string&                                  error,
                      std::string&                                  message) = 0;
    /**
     * @brief Send a NotifyChargingLimit message to the central system
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::NotifyChargingLimitReq& request,
                      ocpp::messages::ocpp20::NotifyChargingLimitConf&      response,
                      std::string&                                          error,
                      std::string&                                          message) = 0;
    /**
     * @brief Send a NotifyCustomerInformation message to the central system
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::NotifyCustomerInformationReq& request,
                      ocpp::messages::ocpp20::NotifyCustomerInformationConf&      response,
                      std::string&                                                error,
                      std::string&                                                message) = 0;
    /**
     * @brief Send a NotifyDisplayMessages message to the central system
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::NotifyDisplayMessagesReq& request,
                      ocpp::messages::ocpp20::NotifyDisplayMessagesConf&      response,
                      std::string&                                            error,
                      std::string&                                            message) = 0;
    /**
     * @brief Send a NotifyEVChargingNeeds message to the central system
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::NotifyEVChargingNeedsReq& request,
                      ocpp::messages::ocpp20::NotifyEVChargingNeedsConf&      response,
                      std::string&                                            error,
                      std::string&                                            message) = 0;
    /**
     * @brief Send a NotifyEVChargingSchedule message to the central system
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::NotifyEVChargingScheduleReq& request,
                      ocpp::messages::ocpp20::NotifyEVChargingScheduleConf&      response,
                      std::string&                                               error,
                      std::string&                                               message) = 0;
    /**
     * @brief Send a NotifyEvent message to the central system
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::NotifyEventReq& request,
                      ocpp::messages::ocpp20::NotifyEventConf&      response,
                      std::string&                                  error,
                      std::string&                                  message) = 0;
    /**
     * @brief Send a NotifyMonitoringReport message to the central system
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::NotifyMonitoringReportReq& request,
                      ocpp::messages::ocpp20::NotifyMonitoringReportConf&      response,
                      std::string&                                             error,
                      std::string&                                             message) = 0;
    /**
     * @brief Send a NotifyReport message to the central system
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::NotifyReportReq& request,
                      ocpp::messages::ocpp20::NotifyReportConf&      response,
                      std::string&                                   error,
                      std::string&                                   message) = 0;
    /**
     * @brief Send a PublishFirmwareStatusNotification message to the central system
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::PublishFirmwareStatusNotificationReq& request,
                      ocpp::messages::ocpp20::PublishFirmwareStatusNotificationConf&      response,
                      std::string&                                                        error,
                      std::string&                                                        message) = 0;
    /**
     * @brief Send a ReportChargingProfiles message to the central system
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::ReportChargingProfilesReq& request,
                      ocpp::messages::ocpp20::ReportChargingProfilesConf&      response,
                      std::string&                                             error,
                      std::string&                                             message) = 0;
    /**
     * @brief Send a ReservationStatusUpdate message to the central system
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::ReservationStatusUpdateReq& request,
                      ocpp::messages::ocpp20::ReservationStatusUpdateConf&      response,
                      std::string&                                              error,
                      std::string&                                              message) = 0;
    /**
     * @brief Send a SecurityEventNotification message to the central system
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::SecurityEventNotificationReq& request,
                      ocpp::messages::ocpp20::SecurityEventNotificationConf&      response,
                      std::string&                                                error,
                      std::string&                                                message) = 0;
    /**
     * @brief Send a SignCertificate message to the central system
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::SignCertificateReq& request,
                      ocpp::messages::ocpp20::SignCertificateConf&      response,
                      std::string&                                      error,
                      std::string&                                      message) = 0;
    /**
     * @brief Send a StatusNotification message to the central system
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::StatusNotificationReq& request,
                      ocpp::messages::ocpp20::StatusNotificationConf&      response,
                      std::string&                                         error,
                      std::string&                                         message) = 0;
    /**
     * @brief Send a TransactionEvent message to the central system
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::TransactionEventReq& request,
                      ocpp::messages::ocpp20::TransactionEventConf&      response,
                      std::string&                                       error,
                      std::string&                                       message) = 0;
};

} // namespace ocpp20
} // namespace chargepoint
} // namespace ocpp

#endif // OPENOCPP_OCPP20_ICHARGEPOINT20_H