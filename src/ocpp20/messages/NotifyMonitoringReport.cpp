/*
Copyright (c) 2020 Cedric Jimenez
This file is part of OpenOCPP.

OpenOCPP is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 2.1 of the License, or
(at your option) any later version.

OpenOCPP is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OpenOCPP. If not, see <http://www.gnu.org/licenses/>.
*/

/*
    Generated by json2cpp from : urn:OCPP:Cp:2:2020:3:NotifyMonitoringReportRequest
                                 OCPP 2.0.1 FINAL
*/

#include "NotifyMonitoringReport.h"

#include "IRpc.h"

namespace ocpp
{
namespace messages
{
namespace ocpp20
{

/** @brief Convert a NotifyMonitoringReportReq from a JSON representation */
bool NotifyMonitoringReportReqConverter::fromJson(const rapidjson::Value&    json,
                                                  NotifyMonitoringReportReq& data,
                                                  std::string&               error_code,
                                                  std::string&               error_message)
{
    bool ret = true;

    // customData
    if (json.HasMember("customData"))
    {
        ocpp::types::ocpp20::CustomDataTypeConverter customData_converter;
        ret = ret && customData_converter.fromJson(json["customData"], data.customData, error_code, error_message);
    }

    // monitor
    const rapidjson::Value&                          monitor_json = json["monitor"];
    ocpp::types::ocpp20::MonitoringDataTypeConverter monitor_converter;
    for (auto it = monitor_json.Begin(); ret && (it != monitor_json.End()); ++it)
    {
        ocpp::types::ocpp20::MonitoringDataType& item = data.monitor.emplace_back();
        ret                                           = ret && monitor_converter.fromJson(*it, item, error_code, error_message);
    }

    // requestId
    extract(json, "requestId", data.requestId);

    // tbc
    extract(json, "tbc", data.tbc);

    // seqNo
    extract(json, "seqNo", data.seqNo);

    // generatedAt
    ret = ret && extract(json, "generatedAt", data.generatedAt, error_message);

    if (!ret)
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_TYPE_CONSTRAINT_VIOLATION;
    }

    return ret;
}

/** @brief Convert a NotifyMonitoringReportReq to a JSON representation */
bool NotifyMonitoringReportReqConverter::toJson(const NotifyMonitoringReportReq& data, rapidjson::Document& json)
{
    bool ret = true;

    // customData
    if (data.customData.isSet())
    {
        ocpp::types::ocpp20::CustomDataTypeConverter customData_converter;
        customData_converter.setAllocator(allocator);
        rapidjson::Document customData_doc;
        customData_doc.Parse("{}");
        ret = ret && customData_converter.toJson(data.customData, customData_doc);
        json.AddMember(rapidjson::StringRef("customData"), customData_doc.Move(), *allocator);
    }

    // monitor
    if (!data.monitor.empty())
    {
        rapidjson::Value                                 monitor_json(rapidjson::kArrayType);
        ocpp::types::ocpp20::MonitoringDataTypeConverter monitor_converter;
        monitor_converter.setAllocator(allocator);
        for (const ocpp::types::ocpp20::MonitoringDataType& item : data.monitor)
        {
            rapidjson::Document item_doc;
            item_doc.Parse("{}");
            ret = ret && monitor_converter.toJson(item, item_doc);
            monitor_json.PushBack(item_doc.Move(), *allocator);
        }
        json.AddMember(rapidjson::StringRef("monitor"), monitor_json.Move(), *allocator);
    }

    // requestId
    fill(json, "requestId", data.requestId);

    // tbc
    fill(json, "tbc", data.tbc);

    // seqNo
    fill(json, "seqNo", data.seqNo);

    // generatedAt
    fill(json, "generatedAt", data.generatedAt);

    return ret;
}

/** @brief Convert a NotifyMonitoringReportConf from a JSON representation */
bool NotifyMonitoringReportConfConverter::fromJson(const rapidjson::Value&     json,
                                                   NotifyMonitoringReportConf& data,
                                                   std::string&                error_code,
                                                   std::string&                error_message)
{
    bool ret = true;

    // customData
    if (json.HasMember("customData"))
    {
        ocpp::types::ocpp20::CustomDataTypeConverter customData_converter;
        ret = ret && customData_converter.fromJson(json["customData"], data.customData, error_code, error_message);
    }

    if (!ret)
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_TYPE_CONSTRAINT_VIOLATION;
    }

    return ret;
}

/** @brief Convert a NotifyMonitoringReportConf to a JSON representation */
bool NotifyMonitoringReportConfConverter::toJson(const NotifyMonitoringReportConf& data, rapidjson::Document& json)
{
    bool ret = true;

    // customData
    if (data.customData.isSet())
    {
        ocpp::types::ocpp20::CustomDataTypeConverter customData_converter;
        customData_converter.setAllocator(allocator);
        rapidjson::Document customData_doc;
        customData_doc.Parse("{}");
        ret = ret && customData_converter.toJson(data.customData, customData_doc);
        json.AddMember(rapidjson::StringRef("customData"), customData_doc.Move(), *allocator);
    }

    return ret;
}

} // namespace ocpp20
} // namespace messages
} // namespace ocpp