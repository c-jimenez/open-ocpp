/*
Copyright (c) 2020 Cedric Jimenez
This file is part of OpenOCPP.

OpenOCPP is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 2.1 of the License, or
(at your option) any later version.

OpenOCPP is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OpenOCPP. If not, see <http://www.gnu.org/licenses/>.
*/

/*
    Generated by json2cpp from : urn:OCPP:Cp:2:2020:3:GetChargingProfilesRequest
                                 OCPP 2.0.1 FINAL
*/

#include "GetChargingProfiles20.h"

#include "IRpc.h"

namespace ocpp
{
namespace messages
{
namespace ocpp20
{

/** @brief Convert a GetChargingProfiles20Req from a JSON representation */
bool GetChargingProfiles20ReqConverter::fromJson(const rapidjson::Value&   json,
                                                 GetChargingProfiles20Req& data,
                                                 std::string&              error_code,
                                                 std::string&              error_message)
{
    bool ret = true;

    // customData
    if (json.HasMember("customData"))
    {
        ocpp::types::ocpp20::CustomDataType20Converter customData_converter;
        ret = ret && customData_converter.fromJson(json["customData"], data.customData, error_code, error_message);
    }

    // requestId
    extract(json, "requestId", data.requestId);

    // evseId
    extract(json, "evseId", data.evseId);

    // chargingProfile
    ocpp::types::ocpp20::ChargingProfileCriterionType20Converter chargingProfile_converter;
    ret = ret && chargingProfile_converter.fromJson(json["chargingProfile"], data.chargingProfile, error_code, error_message);

    if (!ret)
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_TYPE_CONSTRAINT_VIOLATION;
    }

    return ret;
}

/** @brief Convert a GetChargingProfiles20Req to a JSON representation */
bool GetChargingProfiles20ReqConverter::toJson(const GetChargingProfiles20Req& data, rapidjson::Document& json)
{
    bool ret = true;

    // customData
    if (data.customData.isSet())
    {
        ocpp::types::ocpp20::CustomDataType20Converter customData_converter;
        customData_converter.setAllocator(allocator);
        rapidjson::Document customData_doc;
        customData_doc.Parse("{}");
        ret = ret && customData_converter.toJson(data.customData, customData_doc);
        json.AddMember(rapidjson::StringRef("customData"), customData_doc.Move(), *allocator);
    }

    // requestId
    fill(json, "requestId", data.requestId);

    // evseId
    fill(json, "evseId", data.evseId);

    // chargingProfile
    ocpp::types::ocpp20::ChargingProfileCriterionType20Converter chargingProfile_converter;
    chargingProfile_converter.setAllocator(allocator);
    rapidjson::Document chargingProfile_doc;
    chargingProfile_doc.Parse("{}");
    ret = ret && chargingProfile_converter.toJson(data.chargingProfile, chargingProfile_doc);
    json.AddMember(rapidjson::StringRef("chargingProfile"), chargingProfile_doc.Move(), *allocator);

    return ret;
}

/** @brief Convert a GetChargingProfiles20Conf from a JSON representation */
bool GetChargingProfiles20ConfConverter::fromJson(const rapidjson::Value&    json,
                                                  GetChargingProfiles20Conf& data,
                                                  std::string&               error_code,
                                                  std::string&               error_message)
{
    bool ret = true;

    // customData
    if (json.HasMember("customData"))
    {
        ocpp::types::ocpp20::CustomDataType20Converter customData_converter;
        ret = ret && customData_converter.fromJson(json["customData"], data.customData, error_code, error_message);
    }

    // status
    data.status = ocpp::types::ocpp20::GetChargingProfileStatusEnumType20Helper.fromString(json["status"].GetString());

    // statusInfo
    if (json.HasMember("statusInfo"))
    {
        ocpp::types::ocpp20::StatusInfoType20Converter statusInfo_converter;
        ret = ret && statusInfo_converter.fromJson(json["statusInfo"], data.statusInfo, error_code, error_message);
    }

    if (!ret)
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_TYPE_CONSTRAINT_VIOLATION;
    }

    return ret;
}

/** @brief Convert a GetChargingProfiles20Conf to a JSON representation */
bool GetChargingProfiles20ConfConverter::toJson(const GetChargingProfiles20Conf& data, rapidjson::Document& json)
{
    bool ret = true;

    // customData
    if (data.customData.isSet())
    {
        ocpp::types::ocpp20::CustomDataType20Converter customData_converter;
        customData_converter.setAllocator(allocator);
        rapidjson::Document customData_doc;
        customData_doc.Parse("{}");
        ret = ret && customData_converter.toJson(data.customData, customData_doc);
        json.AddMember(rapidjson::StringRef("customData"), customData_doc.Move(), *allocator);
    }

    // status
    fill(json, "status", ocpp::types::ocpp20::GetChargingProfileStatusEnumType20Helper.toString(data.status));

    // statusInfo
    if (data.statusInfo.isSet())
    {
        ocpp::types::ocpp20::StatusInfoType20Converter statusInfo_converter;
        statusInfo_converter.setAllocator(allocator);
        rapidjson::Document statusInfo_doc;
        statusInfo_doc.Parse("{}");
        ret = ret && statusInfo_converter.toJson(data.statusInfo, statusInfo_doc);
        json.AddMember(rapidjson::StringRef("statusInfo"), statusInfo_doc.Move(), *allocator);
    }

    return ret;
}

} // namespace ocpp20
} // namespace messages
} // namespace ocpp