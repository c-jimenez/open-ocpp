/*
Copyright (c) 2020 Cedric Jimenez
This file is part of OpenOCPP.

OpenOCPP is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 2.1 of the License, or
(at your option) any later version.

OpenOCPP is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OpenOCPP. If not, see <http://www.gnu.org/licenses/>.
*/

/*
    Generated by json2cpp from : urn:OCPP:Cp:2:2020:3:UpdateFirmwareRequest
                                 OCPP 2.0.1 FINAL
*/

#ifndef OPENOCPP_UPDATEFIRMWARE20_H
#define OPENOCPP_UPDATEFIRMWARE20_H

#include "IMessageConverter.h"

#include "CustomDataType20.h"
#include "FirmwareType20.h"
#include "StatusInfoType20.h"
#include "UpdateFirmwareStatusEnumType20.h"

namespace ocpp
{
namespace messages
{
namespace ocpp20
{

/** @brief Action corresponding to the UpdateFirmware20 messages */
static const std::string UPDATEFIRMWARE20_ACTION = "UpdateFirmware";

/** @brief UpdateFirmware20Req message */
struct UpdateFirmware20Req
{
    /** @brief  */
    ocpp::types::Optional<ocpp::types::ocpp20::CustomDataType20> customData;
    /** @brief This specifies how many times Charging Station must try to download the firmware before giving up. If this field is not present, it is left to Charging Station to decide how many times it wants to retry. */
    ocpp::types::Optional<int> retries;
    /** @brief The interval in seconds after which a retry may be attempted. If this field is not present, it is left to Charging Station to decide how long to wait between attempts. */
    ocpp::types::Optional<int> retryInterval;
    /** @brief The Id of this request */
    int requestId;
    /** @brief  */
    ocpp::types::ocpp20::FirmwareType20 firmware;
};

/** @brief UpdateFirmware20Conf message */
struct UpdateFirmware20Conf
{
    /** @brief  */
    ocpp::types::Optional<ocpp::types::ocpp20::CustomDataType20> customData;
    /** @brief  */
    ocpp::types::ocpp20::UpdateFirmwareStatusEnumType20 status;
    /** @brief  */
    ocpp::types::Optional<ocpp::types::ocpp20::StatusInfoType20> statusInfo;
};

// Message converters
MESSAGE_CONVERTERS(UpdateFirmware20)

} // namespace ocpp20
} // namespace messages
} // namespace ocpp

#endif // OPENOCPP_UPDATEFIRMWARE20_H