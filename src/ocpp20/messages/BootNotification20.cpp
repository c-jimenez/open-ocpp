/*
Copyright (c) 2020 Cedric Jimenez
This file is part of OpenOCPP.

OpenOCPP is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 2.1 of the License, or
(at your option) any later version.

OpenOCPP is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OpenOCPP. If not, see <http://www.gnu.org/licenses/>.
*/

/*
    Generated by json2cpp from : urn:OCPP:Cp:2:2020:3:BootNotificationRequest
                                 OCPP 2.0.1 FINAL
*/

#include "BootNotification20.h"

#include "IRpc.h"

namespace ocpp
{
namespace messages
{
namespace ocpp20
{

/** @brief Convert a BootNotification20Req from a JSON representation */
bool BootNotification20ReqConverter::fromJson(const rapidjson::Value& json,
                                              BootNotification20Req&  data,
                                              std::string&            error_code,
                                              std::string&            error_message)
{
    bool ret = true;

    // customData
    if (json.HasMember("customData"))
    {
        ocpp::types::ocpp20::CustomDataType20Converter customData_converter;
        ret = ret && customData_converter.fromJson(json["customData"], data.customData, error_code, error_message);
    }

    // chargingStation
    ocpp::types::ocpp20::ChargingStationType20Converter chargingStation_converter;
    ret = ret && chargingStation_converter.fromJson(json["chargingStation"], data.chargingStation, error_code, error_message);

    // reason
    data.reason = ocpp::types::ocpp20::BootReasonEnumType20Helper.fromString(json["reason"].GetString());

    if (!ret)
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_TYPE_CONSTRAINT_VIOLATION;
    }

    return ret;
}

/** @brief Convert a BootNotification20Req to a JSON representation */
bool BootNotification20ReqConverter::toJson(const BootNotification20Req& data, rapidjson::Document& json)
{
    bool ret = true;

    // customData
    if (data.customData.isSet())
    {
        ocpp::types::ocpp20::CustomDataType20Converter customData_converter;
        customData_converter.setAllocator(allocator);
        rapidjson::Document customData_doc;
        customData_doc.Parse("{}");
        ret = ret && customData_converter.toJson(data.customData, customData_doc);
        json.AddMember(rapidjson::StringRef("customData"), customData_doc.Move(), *allocator);
    }

    // chargingStation
    ocpp::types::ocpp20::ChargingStationType20Converter chargingStation_converter;
    chargingStation_converter.setAllocator(allocator);
    rapidjson::Document chargingStation_doc;
    chargingStation_doc.Parse("{}");
    ret = ret && chargingStation_converter.toJson(data.chargingStation, chargingStation_doc);
    json.AddMember(rapidjson::StringRef("chargingStation"), chargingStation_doc.Move(), *allocator);

    // reason
    fill(json, "reason", ocpp::types::ocpp20::BootReasonEnumType20Helper.toString(data.reason));

    return ret;
}

/** @brief Convert a BootNotification20Conf from a JSON representation */
bool BootNotification20ConfConverter::fromJson(const rapidjson::Value& json,
                                               BootNotification20Conf& data,
                                               std::string&            error_code,
                                               std::string&            error_message)
{
    bool ret = true;

    // customData
    if (json.HasMember("customData"))
    {
        ocpp::types::ocpp20::CustomDataType20Converter customData_converter;
        ret = ret && customData_converter.fromJson(json["customData"], data.customData, error_code, error_message);
    }

    // currentTime
    ret = ret && extract(json, "currentTime", data.currentTime, error_message);

    // interval
    extract(json, "interval", data.interval);

    // status
    data.status = ocpp::types::ocpp20::RegistrationStatusEnumType20Helper.fromString(json["status"].GetString());

    // statusInfo
    if (json.HasMember("statusInfo"))
    {
        ocpp::types::ocpp20::StatusInfoType20Converter statusInfo_converter;
        ret = ret && statusInfo_converter.fromJson(json["statusInfo"], data.statusInfo, error_code, error_message);
    }

    if (!ret)
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_TYPE_CONSTRAINT_VIOLATION;
    }

    return ret;
}

/** @brief Convert a BootNotification20Conf to a JSON representation */
bool BootNotification20ConfConverter::toJson(const BootNotification20Conf& data, rapidjson::Document& json)
{
    bool ret = true;

    // customData
    if (data.customData.isSet())
    {
        ocpp::types::ocpp20::CustomDataType20Converter customData_converter;
        customData_converter.setAllocator(allocator);
        rapidjson::Document customData_doc;
        customData_doc.Parse("{}");
        ret = ret && customData_converter.toJson(data.customData, customData_doc);
        json.AddMember(rapidjson::StringRef("customData"), customData_doc.Move(), *allocator);
    }

    // currentTime
    fill(json, "currentTime", data.currentTime);

    // interval
    fill(json, "interval", data.interval);

    // status
    fill(json, "status", ocpp::types::ocpp20::RegistrationStatusEnumType20Helper.toString(data.status));

    // statusInfo
    if (data.statusInfo.isSet())
    {
        ocpp::types::ocpp20::StatusInfoType20Converter statusInfo_converter;
        statusInfo_converter.setAllocator(allocator);
        rapidjson::Document statusInfo_doc;
        statusInfo_doc.Parse("{}");
        ret = ret && statusInfo_converter.toJson(data.statusInfo, statusInfo_doc);
        json.AddMember(rapidjson::StringRef("statusInfo"), statusInfo_doc.Move(), *allocator);
    }

    return ret;
}

} // namespace ocpp20
} // namespace messages
} // namespace ocpp