/*
Copyright (c) 2020 Cedric Jimenez
This file is part of OpenOCPP.

OpenOCPP is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 2.1 of the License, or
(at your option) any later version.

OpenOCPP is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OpenOCPP. If not, see <http://www.gnu.org/licenses/>.
*/

/*
    Generated by json2cpp from : urn:OCPP:Cp:2:2020:3:ReportChargingProfilesRequest
                                 OCPP 2.0.1 FINAL
*/

#include "ReportChargingProfiles20.h"

#include "IRpc.h"

namespace ocpp
{
namespace messages
{
namespace ocpp20
{

/** @brief Convert a ReportChargingProfilesReq from a JSON representation */
bool ReportChargingProfilesReqConverter::fromJson(const rapidjson::Value&    json,
                                                  ReportChargingProfilesReq& data,
                                                  std::string&               error_code,
                                                  std::string&               error_message)
{
    bool ret = true;

    // customData
    if (json.HasMember("customData"))
    {
        ocpp::types::ocpp20::CustomDataTypeConverter customData_converter;
        ret = ret && customData_converter.fromJson(json["customData"], data.customData, error_code, error_message);
    }

    // requestId
    extract(json, "requestId", data.requestId);

    // chargingLimitSource
    data.chargingLimitSource = ocpp::types::ocpp20::ChargingLimitSourceEnumTypeHelper.fromString(json["chargingLimitSource"].GetString());

    // chargingProfile
    if (json.HasMember("chargingProfile"))
    {
        const rapidjson::Value&                           chargingProfile_json = json["chargingProfile"];
        ocpp::types::ocpp20::ChargingProfileTypeConverter chargingProfile_converter;
        for (auto it = chargingProfile_json.Begin(); ret && (it != chargingProfile_json.End()); ++it)
        {
            ocpp::types::ocpp20::ChargingProfileType& item = data.chargingProfile.emplace_back();
            ret = ret && chargingProfile_converter.fromJson(*it, item, error_code, error_message);
        }
    }

    // tbc
    extract(json, "tbc", data.tbc);

    // evseId
    extract(json, "evseId", data.evseId);

    if (!ret)
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_TYPE_CONSTRAINT_VIOLATION;
    }

    return ret;
}

/** @brief Convert a ReportChargingProfilesReq to a JSON representation */
bool ReportChargingProfilesReqConverter::toJson(const ReportChargingProfilesReq& data, rapidjson::Document& json)
{
    bool ret = true;

    // customData
    if (data.customData.isSet())
    {
        ocpp::types::ocpp20::CustomDataTypeConverter customData_converter;
        customData_converter.setAllocator(allocator);
        rapidjson::Document customData_doc(rapidjson::kObjectType);
        ret = ret && customData_converter.toJson(data.customData, customData_doc);
        json.AddMember(rapidjson::StringRef("customData"), customData_doc.Move(), *allocator);
    }

    // requestId
    fill(json, "requestId", data.requestId);

    // chargingLimitSource
    fill(json, "chargingLimitSource", ocpp::types::ocpp20::ChargingLimitSourceEnumTypeHelper.toString(data.chargingLimitSource));

    // chargingProfile

    rapidjson::Value                                  chargingProfile_json(rapidjson::kArrayType);
    ocpp::types::ocpp20::ChargingProfileTypeConverter chargingProfile_converter;
    chargingProfile_converter.setAllocator(allocator);
    for (const ocpp::types::ocpp20::ChargingProfileType& item : data.chargingProfile)
    {
        rapidjson::Document item_doc(rapidjson::kObjectType);
        ret = ret && chargingProfile_converter.toJson(item, item_doc);
        chargingProfile_json.PushBack(item_doc.Move(), *allocator);
    }
    json.AddMember(rapidjson::StringRef("chargingProfile"), chargingProfile_json.Move(), *allocator);

    // tbc
    fill(json, "tbc", data.tbc);

    // evseId
    fill(json, "evseId", data.evseId);

    return ret;
}

/** @brief Convert a ReportChargingProfilesConf from a JSON representation */
bool ReportChargingProfilesConfConverter::fromJson(const rapidjson::Value&     json,
                                                   ReportChargingProfilesConf& data,
                                                   std::string&                error_code,
                                                   std::string&                error_message)
{
    bool ret = true;

    // customData
    if (json.HasMember("customData"))
    {
        ocpp::types::ocpp20::CustomDataTypeConverter customData_converter;
        ret = ret && customData_converter.fromJson(json["customData"], data.customData, error_code, error_message);
    }

    if (!ret)
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_TYPE_CONSTRAINT_VIOLATION;
    }

    return ret;
}

/** @brief Convert a ReportChargingProfilesConf to a JSON representation */
bool ReportChargingProfilesConfConverter::toJson(const ReportChargingProfilesConf& data, rapidjson::Document& json)
{
    bool ret = true;

    // customData
    if (data.customData.isSet())
    {
        ocpp::types::ocpp20::CustomDataTypeConverter customData_converter;
        customData_converter.setAllocator(allocator);
        rapidjson::Document customData_doc(rapidjson::kObjectType);
        ret = ret && customData_converter.toJson(data.customData, customData_doc);
        json.AddMember(rapidjson::StringRef("customData"), customData_doc.Move(), *allocator);
    }

    return ret;
}

} // namespace ocpp20
} // namespace messages
} // namespace ocpp