/*
Copyright (c) 2020 Cedric Jimenez
This file is part of OpenOCPP.

OpenOCPP is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 2.1 of the License, or
(at your option) any later version.

OpenOCPP is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OpenOCPP. If not, see <http://www.gnu.org/licenses/>.
*/

/*
    Generated by json2cpp from : urn:OCPP:Cp:2:2020:3:SetVariableMonitoringRequest
                                 OCPP 2.0.1 FINAL
*/

#include "SetVariableMonitoring.h"

#include "IRpc.h"

namespace ocpp
{
namespace messages
{
namespace ocpp20
{

/** @brief Convert a SetVariableMonitoringReq from a JSON representation */
bool SetVariableMonitoringReqConverter::fromJson(const rapidjson::Value&   json,
                                                 SetVariableMonitoringReq& data,
                                                 std::string&              error_code,
                                                 std::string&              error_message)
{
    bool ret = true;

    // customData
    if (json.HasMember("customData"))
    {
        ocpp::types::ocpp20::CustomDataTypeConverter customData_converter;
        ret = ret && customData_converter.fromJson(json["customData"], data.customData, error_code, error_message);
    }

    // setMonitoringData
    const rapidjson::Value&                             setMonitoringData_json = json["setMonitoringData"];
    ocpp::types::ocpp20::SetMonitoringDataTypeConverter setMonitoringData_converter;
    for (auto it = setMonitoringData_json.Begin(); ret && (it != setMonitoringData_json.End()); ++it)
    {
        ocpp::types::ocpp20::SetMonitoringDataType& item = data.setMonitoringData.emplace_back();
        ret = ret && setMonitoringData_converter.fromJson(*it, item, error_code, error_message);
    }

    if (!ret)
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_TYPE_CONSTRAINT_VIOLATION;
    }

    return ret;
}

/** @brief Convert a SetVariableMonitoringReq to a JSON representation */
bool SetVariableMonitoringReqConverter::toJson(const SetVariableMonitoringReq& data, rapidjson::Document& json)
{
    bool ret = true;

    // customData
    if (data.customData.isSet())
    {
        ocpp::types::ocpp20::CustomDataTypeConverter customData_converter;
        customData_converter.setAllocator(allocator);
        rapidjson::Document customData_doc;
        customData_doc.Parse("{}");
        ret = ret && customData_converter.toJson(data.customData, customData_doc);
        json.AddMember(rapidjson::StringRef("customData"), customData_doc.Move(), *allocator);
    }

    // setMonitoringData
    if (!data.setMonitoringData.empty())
    {
        rapidjson::Value                                    setMonitoringData_json(rapidjson::kArrayType);
        ocpp::types::ocpp20::SetMonitoringDataTypeConverter setMonitoringData_converter;
        setMonitoringData_converter.setAllocator(allocator);
        for (const ocpp::types::ocpp20::SetMonitoringDataType& item : data.setMonitoringData)
        {
            rapidjson::Document item_doc;
            item_doc.Parse("{}");
            ret = ret && setMonitoringData_converter.toJson(item, item_doc);
            setMonitoringData_json.PushBack(item_doc.Move(), *allocator);
        }
        json.AddMember(rapidjson::StringRef("setMonitoringData"), setMonitoringData_json.Move(), *allocator);
    }

    return ret;
}

/** @brief Convert a SetVariableMonitoringConf from a JSON representation */
bool SetVariableMonitoringConfConverter::fromJson(const rapidjson::Value&    json,
                                                  SetVariableMonitoringConf& data,
                                                  std::string&               error_code,
                                                  std::string&               error_message)
{
    bool ret = true;

    // customData
    if (json.HasMember("customData"))
    {
        ocpp::types::ocpp20::CustomDataTypeConverter customData_converter;
        ret = ret && customData_converter.fromJson(json["customData"], data.customData, error_code, error_message);
    }

    // setMonitoringResult
    const rapidjson::Value&                               setMonitoringResult_json = json["setMonitoringResult"];
    ocpp::types::ocpp20::SetMonitoringResultTypeConverter setMonitoringResult_converter;
    for (auto it = setMonitoringResult_json.Begin(); ret && (it != setMonitoringResult_json.End()); ++it)
    {
        ocpp::types::ocpp20::SetMonitoringResultType& item = data.setMonitoringResult.emplace_back();
        ret = ret && setMonitoringResult_converter.fromJson(*it, item, error_code, error_message);
    }

    if (!ret)
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_TYPE_CONSTRAINT_VIOLATION;
    }

    return ret;
}

/** @brief Convert a SetVariableMonitoringConf to a JSON representation */
bool SetVariableMonitoringConfConverter::toJson(const SetVariableMonitoringConf& data, rapidjson::Document& json)
{
    bool ret = true;

    // customData
    if (data.customData.isSet())
    {
        ocpp::types::ocpp20::CustomDataTypeConverter customData_converter;
        customData_converter.setAllocator(allocator);
        rapidjson::Document customData_doc;
        customData_doc.Parse("{}");
        ret = ret && customData_converter.toJson(data.customData, customData_doc);
        json.AddMember(rapidjson::StringRef("customData"), customData_doc.Move(), *allocator);
    }

    // setMonitoringResult
    if (!data.setMonitoringResult.empty())
    {
        rapidjson::Value                                      setMonitoringResult_json(rapidjson::kArrayType);
        ocpp::types::ocpp20::SetMonitoringResultTypeConverter setMonitoringResult_converter;
        setMonitoringResult_converter.setAllocator(allocator);
        for (const ocpp::types::ocpp20::SetMonitoringResultType& item : data.setMonitoringResult)
        {
            rapidjson::Document item_doc;
            item_doc.Parse("{}");
            ret = ret && setMonitoringResult_converter.toJson(item, item_doc);
            setMonitoringResult_json.PushBack(item_doc.Move(), *allocator);
        }
        json.AddMember(rapidjson::StringRef("setMonitoringResult"), setMonitoringResult_json.Move(), *allocator);
    }

    return ret;
}

} // namespace ocpp20
} // namespace messages
} // namespace ocpp