/*
Copyright (c) 2020 Cedric Jimenez
This file is part of OpenOCPP.

OpenOCPP is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 2.1 of the License, or
(at your option) any later version.

OpenOCPP is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OpenOCPP. If not, see <http://www.gnu.org/licenses/>.
*/

/*
    Generated by json2cpp from : urn:OCPP:Cp:2:2020:3:DeleteCertificateRequest
                                 OCPP 2.0.1 FINAL
*/

#include "DeleteCertificate.h"

#include "IRpc.h"

namespace ocpp
{
namespace messages
{
namespace ocpp20
{

/** @brief Convert a DeleteCertificateReq from a JSON representation */
bool DeleteCertificateReqConverter::fromJson(const rapidjson::Value& json,
                                             DeleteCertificateReq&   data,
                                             std::string&            error_code,
                                             std::string&            error_message)
{
    bool ret = true;

    // customData
    if (json.HasMember("customData"))
    {
        ocpp::types::ocpp20::CustomDataTypeConverter customData_converter;
        ret = ret && customData_converter.fromJson(json["customData"], data.customData, error_code, error_message);
    }

    // certificateHashData
    ocpp::types::ocpp20::CertificateHashDataTypeConverter certificateHashData_converter;
    ret = ret && certificateHashData_converter.fromJson(json["certificateHashData"], data.certificateHashData, error_code, error_message);

    if (!ret)
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_TYPE_CONSTRAINT_VIOLATION;
    }

    return ret;
}

/** @brief Convert a DeleteCertificateReq to a JSON representation */
bool DeleteCertificateReqConverter::toJson(const DeleteCertificateReq& data, rapidjson::Document& json)
{
    bool ret = true;

    // customData
    if (data.customData.isSet())
    {
        ocpp::types::ocpp20::CustomDataTypeConverter customData_converter;
        customData_converter.setAllocator(allocator);
        rapidjson::Document customData_doc;
        customData_doc.Parse("{}");
        ret = ret && customData_converter.toJson(data.customData, customData_doc);
        json.AddMember(rapidjson::StringRef("customData"), customData_doc.Move(), *allocator);
    }

    // certificateHashData
    ocpp::types::ocpp20::CertificateHashDataTypeConverter certificateHashData_converter;
    certificateHashData_converter.setAllocator(allocator);
    rapidjson::Document certificateHashData_doc;
    certificateHashData_doc.Parse("{}");
    ret = ret && certificateHashData_converter.toJson(data.certificateHashData, certificateHashData_doc);
    json.AddMember(rapidjson::StringRef("certificateHashData"), certificateHashData_doc.Move(), *allocator);

    return ret;
}

/** @brief Convert a DeleteCertificateConf from a JSON representation */
bool DeleteCertificateConfConverter::fromJson(const rapidjson::Value& json,
                                              DeleteCertificateConf&  data,
                                              std::string&            error_code,
                                              std::string&            error_message)
{
    bool ret = true;

    // customData
    if (json.HasMember("customData"))
    {
        ocpp::types::ocpp20::CustomDataTypeConverter customData_converter;
        ret = ret && customData_converter.fromJson(json["customData"], data.customData, error_code, error_message);
    }

    // status
    data.status = ocpp::types::ocpp20::DeleteCertificateStatusEnumTypeHelper.fromString(json["status"].GetString());

    // statusInfo
    if (json.HasMember("statusInfo"))
    {
        ocpp::types::ocpp20::StatusInfoTypeConverter statusInfo_converter;
        ret = ret && statusInfo_converter.fromJson(json["statusInfo"], data.statusInfo, error_code, error_message);
    }

    if (!ret)
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_TYPE_CONSTRAINT_VIOLATION;
    }

    return ret;
}

/** @brief Convert a DeleteCertificateConf to a JSON representation */
bool DeleteCertificateConfConverter::toJson(const DeleteCertificateConf& data, rapidjson::Document& json)
{
    bool ret = true;

    // customData
    if (data.customData.isSet())
    {
        ocpp::types::ocpp20::CustomDataTypeConverter customData_converter;
        customData_converter.setAllocator(allocator);
        rapidjson::Document customData_doc;
        customData_doc.Parse("{}");
        ret = ret && customData_converter.toJson(data.customData, customData_doc);
        json.AddMember(rapidjson::StringRef("customData"), customData_doc.Move(), *allocator);
    }

    // status
    fill(json, "status", ocpp::types::ocpp20::DeleteCertificateStatusEnumTypeHelper.toString(data.status));

    // statusInfo
    if (data.statusInfo.isSet())
    {
        ocpp::types::ocpp20::StatusInfoTypeConverter statusInfo_converter;
        statusInfo_converter.setAllocator(allocator);
        rapidjson::Document statusInfo_doc;
        statusInfo_doc.Parse("{}");
        ret = ret && statusInfo_converter.toJson(data.statusInfo, statusInfo_doc);
        json.AddMember(rapidjson::StringRef("statusInfo"), statusInfo_doc.Move(), *allocator);
    }

    return ret;
}

} // namespace ocpp20
} // namespace messages
} // namespace ocpp