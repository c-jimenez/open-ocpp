/*
Copyright (c) 2020 Cedric Jimenez
This file is part of OpenOCPP.

OpenOCPP is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 2.1 of the License, or
(at your option) any later version.

OpenOCPP is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OpenOCPP. If not, see <http://www.gnu.org/licenses/>.
*/

/*
    Generated by json2cpp from : urn:OCPP:Cp:2:2020:3:GetCompositeScheduleRequest
                                 OCPP 2.0.1 FINAL
*/

#ifndef OPENOCPP_GETCOMPOSITESCHEDULE_H
#define OPENOCPP_GETCOMPOSITESCHEDULE_H

#include "IMessageConverter.h"

#include "ChargingRateUnitEnumType.h"
#include "CompositeScheduleType.h"
#include "CustomDataType.h"
#include "GenericStatusEnumType.h"
#include "StatusInfoType.h"

namespace ocpp
{
namespace messages
{
namespace ocpp20
{

/** @brief Action corresponding to the GetCompositeSchedule messages */
static const std::string GETCOMPOSITESCHEDULE_ACTION = "GetCompositeSchedule";

/** @brief GetCompositeScheduleReq message */
struct GetCompositeScheduleReq
{
    /** @brief  */
    ocpp::types::Optional<ocpp::types::ocpp20::CustomDataType> customData;
    /** @brief Length of the requested schedule in seconds. */
    int duration;
    /** @brief  */
    ocpp::types::Optional<ocpp::types::ocpp20::ChargingRateUnitEnumType> chargingRateUnit;
    /** @brief The ID of the EVSE for which the schedule is requested. When evseid=0, the Charging Station will calculate the expected consumption for the grid connection. */
    int evseId;
};

/** @brief GetCompositeScheduleConf message */
struct GetCompositeScheduleConf
{
    /** @brief  */
    ocpp::types::Optional<ocpp::types::ocpp20::CustomDataType> customData;
    /** @brief  */
    ocpp::types::ocpp20::GenericStatusEnumType status;
    /** @brief  */
    ocpp::types::Optional<ocpp::types::ocpp20::StatusInfoType> statusInfo;
    /** @brief  */
    ocpp::types::Optional<ocpp::types::ocpp20::CompositeScheduleType> schedule;
};

// Message converters
MESSAGE_CONVERTERS(GetCompositeSchedule)

} // namespace ocpp20
} // namespace messages
} // namespace ocpp

#endif // OPENOCPP_GETCOMPOSITESCHEDULE_H