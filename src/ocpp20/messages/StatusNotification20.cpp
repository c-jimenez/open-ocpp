/*
Copyright (c) 2020 Cedric Jimenez
This file is part of OpenOCPP.

OpenOCPP is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 2.1 of the License, or
(at your option) any later version.

OpenOCPP is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OpenOCPP. If not, see <http://www.gnu.org/licenses/>.
*/

/*
    Generated by json2cpp from : urn:OCPP:Cp:2:2020:3:StatusNotificationRequest
                                 OCPP 2.0.1 FINAL
*/

#include "StatusNotification20.h"

#include "IRpc.h"

namespace ocpp
{
namespace messages
{
namespace ocpp20
{

/** @brief Convert a StatusNotificationReq from a JSON representation */
bool StatusNotificationReqConverter::fromJson(const rapidjson::Value& json,
                                              StatusNotificationReq&  data,
                                              std::string&            error_code,
                                              std::string&            error_message)
{
    bool ret = true;

    // customData
    if (json.HasMember("customData"))
    {
        ocpp::types::ocpp20::CustomDataTypeConverter customData_converter;
        ret = ret && customData_converter.fromJson(json["customData"], data.customData, error_code, error_message);
    }

    // timestamp
    ret = ret && extract(json, "timestamp", data.timestamp, error_message);

    // connectorStatus
    data.connectorStatus = ocpp::types::ocpp20::ConnectorStatusEnumTypeHelper.fromString(json["connectorStatus"].GetString());

    // evseId
    extract(json, "evseId", data.evseId);

    // connectorId
    extract(json, "connectorId", data.connectorId);

    if (!ret)
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_TYPE_CONSTRAINT_VIOLATION;
    }

    return ret;
}

/** @brief Convert a StatusNotificationReq to a JSON representation */
bool StatusNotificationReqConverter::toJson(const StatusNotificationReq& data, rapidjson::Document& json)
{
    bool ret = true;

    // customData
    if (data.customData.isSet())
    {
        ocpp::types::ocpp20::CustomDataTypeConverter customData_converter;
        customData_converter.setAllocator(allocator);
        rapidjson::Document customData_doc;
        customData_doc.Parse("{}");
        ret = ret && customData_converter.toJson(data.customData, customData_doc);
        json.AddMember(rapidjson::StringRef("customData"), customData_doc.Move(), *allocator);
    }

    // timestamp
    fill(json, "timestamp", data.timestamp);

    // connectorStatus
    fill(json, "connectorStatus", ocpp::types::ocpp20::ConnectorStatusEnumTypeHelper.toString(data.connectorStatus));

    // evseId
    fill(json, "evseId", data.evseId);

    // connectorId
    fill(json, "connectorId", data.connectorId);

    return ret;
}

/** @brief Convert a StatusNotificationConf from a JSON representation */
bool StatusNotificationConfConverter::fromJson(const rapidjson::Value& json,
                                               StatusNotificationConf& data,
                                               std::string&            error_code,
                                               std::string&            error_message)
{
    bool ret = true;

    // customData
    if (json.HasMember("customData"))
    {
        ocpp::types::ocpp20::CustomDataTypeConverter customData_converter;
        ret = ret && customData_converter.fromJson(json["customData"], data.customData, error_code, error_message);
    }

    if (!ret)
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_TYPE_CONSTRAINT_VIOLATION;
    }

    return ret;
}

/** @brief Convert a StatusNotificationConf to a JSON representation */
bool StatusNotificationConfConverter::toJson(const StatusNotificationConf& data, rapidjson::Document& json)
{
    bool ret = true;

    // customData
    if (data.customData.isSet())
    {
        ocpp::types::ocpp20::CustomDataTypeConverter customData_converter;
        customData_converter.setAllocator(allocator);
        rapidjson::Document customData_doc;
        customData_doc.Parse("{}");
        ret = ret && customData_converter.toJson(data.customData, customData_doc);
        json.AddMember(rapidjson::StringRef("customData"), customData_doc.Move(), *allocator);
    }

    return ret;
}

} // namespace ocpp20
} // namespace messages
} // namespace ocpp