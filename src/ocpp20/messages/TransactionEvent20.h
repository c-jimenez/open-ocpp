/*
Copyright (c) 2020 Cedric Jimenez
This file is part of OpenOCPP.

OpenOCPP is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 2.1 of the License, or
(at your option) any later version.

OpenOCPP is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OpenOCPP. If not, see <http://www.gnu.org/licenses/>.
*/

/*
    Generated by json2cpp from : urn:OCPP:Cp:2:2020:3:TransactionEventRequest
                                 OCPP 2.0.1 FINAL
*/

#ifndef OPENOCPP_OCPP20_TRANSACTIONEVENT_H
#define OPENOCPP_OCPP20_TRANSACTIONEVENT_H

#include "IMessageConverter.h"

#include "CustomDataType20.h"
#include "EVSEType20.h"
#include "IdTokenInfoType20.h"
#include "IdTokenType20.h"
#include "MessageContentType20.h"
#include "MeterValueType20.h"
#include "TransactionEventEnumType20.h"
#include "TransactionType20.h"
#include "TriggerReasonEnumType20.h"

namespace ocpp
{
namespace messages
{
namespace ocpp20
{

/** @brief Action corresponding to the TransactionEvent messages */
static const std::string TRANSACTIONEVENT_ACTION = "TransactionEvent";

/** @brief TransactionEventReq message */
struct TransactionEventReq
{
    /** @brief  */
    ocpp::types::Optional<ocpp::types::ocpp20::CustomDataType> customData;
    /** @brief  */
    ocpp::types::ocpp20::TransactionEventEnumType eventType;
    /** @brief  */
    std::vector<ocpp::types::ocpp20::MeterValueType> meterValue;
    /** @brief The date and time at which this transaction event occurred. */
    ocpp::types::DateTime timestamp;
    /** @brief  */
    ocpp::types::ocpp20::TriggerReasonEnumType triggerReason;
    /** @brief Incremental sequence number, helps with determining if all messages of a transaction have been received. */
    int seqNo;
    /** @brief Indication that this transaction event happened when the Charging Station was offline. Default = false, meaning: the event occurred when the Charging Station was online. */
    ocpp::types::Optional<bool> offline;
    /** @brief If the Charging Station is able to report the number of phases used, then it SHALL provide it. When omitted the CSMS may be able to determine the number of phases used via device management. */
    ocpp::types::Optional<int> numberOfPhasesUsed;
    /** @brief The maximum current of the connected cable in Ampere (A). */
    ocpp::types::Optional<int> cableMaxCurrent;
    /** @brief This contains the Id of the reservation that terminates as a result of this transaction. */
    ocpp::types::Optional<int> reservationId;
    /** @brief  */
    ocpp::types::ocpp20::TransactionType transactionInfo;
    /** @brief  */
    ocpp::types::Optional<ocpp::types::ocpp20::EVSEType> evse;
    /** @brief  */
    ocpp::types::Optional<ocpp::types::ocpp20::IdTokenType> idToken;
};

/** @brief TransactionEventConf message */
struct TransactionEventConf
{
    /** @brief  */
    ocpp::types::Optional<ocpp::types::ocpp20::CustomDataType> customData;
    /** @brief SHALL only be sent when charging has ended. Final total cost of this transaction, including taxes. In the currency configured with the Configuration Variable: &lt;&lt;configkey-currency,`Currency`&gt;&gt;. When omitted, the transaction was NOT free. To indicate a free transaction, the CSMS SHALL send 0.00. */
    ocpp::types::Optional<float> totalCost;
    /** @brief Priority from a business point of view. Default priority is 0, The range is from -9 to 9. Higher values indicate a higher priority. The chargingPriority in &lt;&lt;transactioneventresponse,TransactionEventResponse&gt;&gt; is temporarily, so it may not be set in the &lt;&lt;cmn_idtokeninfotype,IdTokenInfoType&gt;&gt; afterwards. Also the chargingPriority in &lt;&lt;transactioneventresponse,TransactionEventResponse&gt;&gt; overrules the one in &lt;&lt;cmn_idtokeninfotype,IdTokenInfoType&gt;&gt;. */
    ocpp::types::Optional<int> chargingPriority;
    /** @brief  */
    ocpp::types::Optional<ocpp::types::ocpp20::IdTokenInfoType> idTokenInfo;
    /** @brief  */
    ocpp::types::Optional<ocpp::types::ocpp20::MessageContentType> updatedPersonalMessage;
};

// Message converters
MESSAGE_CONVERTERS(TransactionEvent)

} // namespace ocpp20
} // namespace messages
} // namespace ocpp

#endif // OPENOCPP_OCPP20_TRANSACTIONEVENT_H