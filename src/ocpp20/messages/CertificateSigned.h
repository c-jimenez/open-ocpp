/*
Copyright (c) 2020 Cedric Jimenez
This file is part of OpenOCPP.

OpenOCPP is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 2.1 of the License, or
(at your option) any later version.

OpenOCPP is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OpenOCPP. If not, see <http://www.gnu.org/licenses/>.
*/

/*
    Generated by json2cpp from : urn:OCPP:Cp:2:2020:3:CertificateSignedRequest
                                 OCPP 2.0.1 FINAL
*/

#ifndef OPENOCPP_CERTIFICATESIGNED_H
#define OPENOCPP_CERTIFICATESIGNED_H

#include "IMessageConverter.h"

#include "CertificateSignedStatusEnumType.h"
#include "CertificateSigningUseEnumType.h"
#include "CustomDataType.h"
#include "StatusInfoType.h"

namespace ocpp
{
namespace messages
{
namespace ocpp20
{

/** @brief Action corresponding to the CertificateSigned messages */
static const std::string CERTIFICATESIGNED_ACTION = "CertificateSigned";

/** @brief CertificateSignedReq message */
struct CertificateSignedReq
{
    /** @brief  */
    ocpp::types::Optional<ocpp::types::ocpp20::CustomDataType> customData;
    /** @brief The signed PEM encoded X.509 certificate. This can also contain the necessary sub CA certificates. In that case, the order of the bundle should follow the certificate chain, starting from the leaf certificate.

The Configuration Variable &lt;&lt;configkey-max-certificate-chain-size,MaxCertificateChainSize&gt;&gt; can be used to limit the maximum size of this field. */
    ocpp::types::CiStringType<10000u> certificateChain;
    /** @brief  */
    ocpp::types::Optional<ocpp::types::ocpp20::CertificateSigningUseEnumType> certificateType;
};

/** @brief CertificateSignedConf message */
struct CertificateSignedConf
{
    /** @brief  */
    ocpp::types::Optional<ocpp::types::ocpp20::CustomDataType> customData;
    /** @brief  */
    ocpp::types::ocpp20::CertificateSignedStatusEnumType status;
    /** @brief  */
    ocpp::types::Optional<ocpp::types::ocpp20::StatusInfoType> statusInfo;
};

// Message converters
MESSAGE_CONVERTERS(CertificateSigned)

} // namespace ocpp20
} // namespace messages
} // namespace ocpp

#endif // OPENOCPP_CERTIFICATESIGNED_H