/*
Copyright (c) 2020 Cedric Jimenez
This file is part of OpenOCPP.

OpenOCPP is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 2.1 of the License, or
(at your option) any later version.

OpenOCPP is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OpenOCPP. If not, see <http://www.gnu.org/licenses/>.
*/

/*
    Generated by json2cpp from : urn:OCPP:Cp:2:2020:3:ClearChargingProfileRequest
                                 OCPP 2.0.1 FINAL
*/

#include "ClearChargingProfile.h"

#include "IRpc.h"

namespace ocpp
{
namespace messages
{
namespace ocpp20
{

/** @brief Convert a ClearChargingProfileReq from a JSON representation */
bool ClearChargingProfileReqConverter::fromJson(const rapidjson::Value&  json,
                                                ClearChargingProfileReq& data,
                                                std::string&             error_code,
                                                std::string&             error_message)
{
    bool ret = true;

    // customData
    if (json.HasMember("customData"))
    {
        ocpp::types::ocpp20::CustomDataTypeConverter customData_converter;
        ret = ret && customData_converter.fromJson(json["customData"], data.customData, error_code, error_message);
    }

    // chargingProfileId
    extract(json, "chargingProfileId", data.chargingProfileId);

    // chargingProfileCriteria
    if (json.HasMember("chargingProfileCriteria"))
    {
        ocpp::types::ocpp20::ClearChargingProfileTypeConverter chargingProfileCriteria_converter;
        ret = ret && chargingProfileCriteria_converter.fromJson(
                         json["chargingProfileCriteria"], data.chargingProfileCriteria, error_code, error_message);
    }

    if (!ret)
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_TYPE_CONSTRAINT_VIOLATION;
    }

    return ret;
}

/** @brief Convert a ClearChargingProfileReq to a JSON representation */
bool ClearChargingProfileReqConverter::toJson(const ClearChargingProfileReq& data, rapidjson::Document& json)
{
    bool ret = true;

    // customData
    if (data.customData.isSet())
    {
        ocpp::types::ocpp20::CustomDataTypeConverter customData_converter;
        customData_converter.setAllocator(allocator);
        rapidjson::Document customData_doc;
        customData_doc.Parse("{}");
        ret = ret && customData_converter.toJson(data.customData, customData_doc);
        json.AddMember(rapidjson::StringRef("customData"), customData_doc.Move(), *allocator);
    }

    // chargingProfileId
    fill(json, "chargingProfileId", data.chargingProfileId);

    // chargingProfileCriteria
    if (data.chargingProfileCriteria.isSet())
    {
        ocpp::types::ocpp20::ClearChargingProfileTypeConverter chargingProfileCriteria_converter;
        chargingProfileCriteria_converter.setAllocator(allocator);
        rapidjson::Document chargingProfileCriteria_doc;
        chargingProfileCriteria_doc.Parse("{}");
        ret = ret && chargingProfileCriteria_converter.toJson(data.chargingProfileCriteria, chargingProfileCriteria_doc);
        json.AddMember(rapidjson::StringRef("chargingProfileCriteria"), chargingProfileCriteria_doc.Move(), *allocator);
    }

    return ret;
}

/** @brief Convert a ClearChargingProfileConf from a JSON representation */
bool ClearChargingProfileConfConverter::fromJson(const rapidjson::Value&   json,
                                                 ClearChargingProfileConf& data,
                                                 std::string&              error_code,
                                                 std::string&              error_message)
{
    bool ret = true;

    // customData
    if (json.HasMember("customData"))
    {
        ocpp::types::ocpp20::CustomDataTypeConverter customData_converter;
        ret = ret && customData_converter.fromJson(json["customData"], data.customData, error_code, error_message);
    }

    // status
    data.status = ocpp::types::ocpp20::ClearChargingProfileStatusEnumTypeHelper.fromString(json["status"].GetString());

    // statusInfo
    if (json.HasMember("statusInfo"))
    {
        ocpp::types::ocpp20::StatusInfoTypeConverter statusInfo_converter;
        ret = ret && statusInfo_converter.fromJson(json["statusInfo"], data.statusInfo, error_code, error_message);
    }

    if (!ret)
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_TYPE_CONSTRAINT_VIOLATION;
    }

    return ret;
}

/** @brief Convert a ClearChargingProfileConf to a JSON representation */
bool ClearChargingProfileConfConverter::toJson(const ClearChargingProfileConf& data, rapidjson::Document& json)
{
    bool ret = true;

    // customData
    if (data.customData.isSet())
    {
        ocpp::types::ocpp20::CustomDataTypeConverter customData_converter;
        customData_converter.setAllocator(allocator);
        rapidjson::Document customData_doc;
        customData_doc.Parse("{}");
        ret = ret && customData_converter.toJson(data.customData, customData_doc);
        json.AddMember(rapidjson::StringRef("customData"), customData_doc.Move(), *allocator);
    }

    // status
    fill(json, "status", ocpp::types::ocpp20::ClearChargingProfileStatusEnumTypeHelper.toString(data.status));

    // statusInfo
    if (data.statusInfo.isSet())
    {
        ocpp::types::ocpp20::StatusInfoTypeConverter statusInfo_converter;
        statusInfo_converter.setAllocator(allocator);
        rapidjson::Document statusInfo_doc;
        statusInfo_doc.Parse("{}");
        ret = ret && statusInfo_converter.toJson(data.statusInfo, statusInfo_doc);
        json.AddMember(rapidjson::StringRef("statusInfo"), statusInfo_doc.Move(), *allocator);
    }

    return ret;
}

} // namespace ocpp20
} // namespace messages
} // namespace ocpp