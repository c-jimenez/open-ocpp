/*
Copyright (c) 2020 Cedric Jimenez
This file is part of OpenOCPP.

OpenOCPP is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 2.1 of the License, or
(at your option) any later version.

OpenOCPP is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OpenOCPP. If not, see <http://www.gnu.org/licenses/>.
*/

/*
    Generated by json2cpp from : urn:OCPP:Cp:2:2020:3:ClearedChargingLimitRequest
                                 OCPP 2.0.1 FINAL
*/

#include "ClearedChargingLimit20.h"

#include "IRpc.h"

namespace ocpp
{
namespace messages
{
namespace ocpp20
{

/** @brief Convert a ClearedChargingLimit20Req from a JSON representation */
bool ClearedChargingLimit20ReqConverter::fromJson(const rapidjson::Value&    json,
                                                  ClearedChargingLimit20Req& data,
                                                  std::string&               error_code,
                                                  std::string&               error_message)
{
    bool ret = true;

    // customData
    if (json.HasMember("customData"))
    {
        ocpp::types::ocpp20::CustomDataType20Converter customData_converter;
        ret = ret && customData_converter.fromJson(json["customData"], data.customData, error_code, error_message);
    }

    // chargingLimitSource
    data.chargingLimitSource = ocpp::types::ocpp20::ChargingLimitSourceEnumType20Helper.fromString(json["chargingLimitSource"].GetString());

    // evseId
    extract(json, "evseId", data.evseId);

    if (!ret)
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_TYPE_CONSTRAINT_VIOLATION;
    }

    return ret;
}

/** @brief Convert a ClearedChargingLimit20Req to a JSON representation */
bool ClearedChargingLimit20ReqConverter::toJson(const ClearedChargingLimit20Req& data, rapidjson::Document& json)
{
    bool ret = true;

    // customData
    if (data.customData.isSet())
    {
        ocpp::types::ocpp20::CustomDataType20Converter customData_converter;
        customData_converter.setAllocator(allocator);
        rapidjson::Document customData_doc;
        customData_doc.Parse("{}");
        ret = ret && customData_converter.toJson(data.customData, customData_doc);
        json.AddMember(rapidjson::StringRef("customData"), customData_doc.Move(), *allocator);
    }

    // chargingLimitSource
    fill(json, "chargingLimitSource", ocpp::types::ocpp20::ChargingLimitSourceEnumType20Helper.toString(data.chargingLimitSource));

    // evseId
    fill(json, "evseId", data.evseId);

    return ret;
}

/** @brief Convert a ClearedChargingLimit20Conf from a JSON representation */
bool ClearedChargingLimit20ConfConverter::fromJson(const rapidjson::Value&     json,
                                                   ClearedChargingLimit20Conf& data,
                                                   std::string&                error_code,
                                                   std::string&                error_message)
{
    bool ret = true;

    // customData
    if (json.HasMember("customData"))
    {
        ocpp::types::ocpp20::CustomDataType20Converter customData_converter;
        ret = ret && customData_converter.fromJson(json["customData"], data.customData, error_code, error_message);
    }

    if (!ret)
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_TYPE_CONSTRAINT_VIOLATION;
    }

    return ret;
}

/** @brief Convert a ClearedChargingLimit20Conf to a JSON representation */
bool ClearedChargingLimit20ConfConverter::toJson(const ClearedChargingLimit20Conf& data, rapidjson::Document& json)
{
    bool ret = true;

    // customData
    if (data.customData.isSet())
    {
        ocpp::types::ocpp20::CustomDataType20Converter customData_converter;
        customData_converter.setAllocator(allocator);
        rapidjson::Document customData_doc;
        customData_doc.Parse("{}");
        ret = ret && customData_converter.toJson(data.customData, customData_doc);
        json.AddMember(rapidjson::StringRef("customData"), customData_doc.Move(), *allocator);
    }

    return ret;
}

} // namespace ocpp20
} // namespace messages
} // namespace ocpp