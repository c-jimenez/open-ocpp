/*
Copyright (c) 2020 Cedric Jimenez
This file is part of OpenOCPP.

OpenOCPP is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 2.1 of the License, or
(at your option) any later version.

OpenOCPP is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OpenOCPP. If not, see <http://www.gnu.org/licenses/>.
*/

/*
    Generated by json2cpp from : urn:OCPP:Cp:2:2020:3:GetLogRequest
                                 OCPP 2.0.1 FINAL
*/

#include "GetLog20.h"

#include "IRpc.h"

namespace ocpp
{
namespace messages
{
namespace ocpp20
{

/** @brief Convert a GetLog20Req from a JSON representation */
bool GetLog20ReqConverter::fromJson(const rapidjson::Value& json, GetLog20Req& data, std::string& error_code, std::string& error_message)
{
    bool ret = true;

    // customData
    if (json.HasMember("customData"))
    {
        ocpp::types::ocpp20::CustomDataType20Converter customData_converter;
        ret = ret && customData_converter.fromJson(json["customData"], data.customData, error_code, error_message);
    }

    // log
    ocpp::types::ocpp20::LogParametersType20Converter log_converter;
    ret = ret && log_converter.fromJson(json["log"], data.log, error_code, error_message);

    // logType
    data.logType = ocpp::types::ocpp20::LogEnumType20Helper.fromString(json["logType"].GetString());

    // requestId
    extract(json, "requestId", data.requestId);

    // retries
    extract(json, "retries", data.retries);

    // retryInterval
    extract(json, "retryInterval", data.retryInterval);

    if (!ret)
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_TYPE_CONSTRAINT_VIOLATION;
    }

    return ret;
}

/** @brief Convert a GetLog20Req to a JSON representation */
bool GetLog20ReqConverter::toJson(const GetLog20Req& data, rapidjson::Document& json)
{
    bool ret = true;

    // customData
    if (data.customData.isSet())
    {
        ocpp::types::ocpp20::CustomDataType20Converter customData_converter;
        customData_converter.setAllocator(allocator);
        rapidjson::Document customData_doc;
        customData_doc.Parse("{}");
        ret = ret && customData_converter.toJson(data.customData, customData_doc);
        json.AddMember(rapidjson::StringRef("customData"), customData_doc.Move(), *allocator);
    }

    // log
    ocpp::types::ocpp20::LogParametersType20Converter log_converter;
    log_converter.setAllocator(allocator);
    rapidjson::Document log_doc;
    log_doc.Parse("{}");
    ret = ret && log_converter.toJson(data.log, log_doc);
    json.AddMember(rapidjson::StringRef("log"), log_doc.Move(), *allocator);

    // logType
    fill(json, "logType", ocpp::types::ocpp20::LogEnumType20Helper.toString(data.logType));

    // requestId
    fill(json, "requestId", data.requestId);

    // retries
    fill(json, "retries", data.retries);

    // retryInterval
    fill(json, "retryInterval", data.retryInterval);

    return ret;
}

/** @brief Convert a GetLog20Conf from a JSON representation */
bool GetLog20ConfConverter::fromJson(const rapidjson::Value& json, GetLog20Conf& data, std::string& error_code, std::string& error_message)
{
    bool ret = true;

    // customData
    if (json.HasMember("customData"))
    {
        ocpp::types::ocpp20::CustomDataType20Converter customData_converter;
        ret = ret && customData_converter.fromJson(json["customData"], data.customData, error_code, error_message);
    }

    // status
    data.status = ocpp::types::ocpp20::LogStatusEnumType20Helper.fromString(json["status"].GetString());

    // statusInfo
    if (json.HasMember("statusInfo"))
    {
        ocpp::types::ocpp20::StatusInfoType20Converter statusInfo_converter;
        ret = ret && statusInfo_converter.fromJson(json["statusInfo"], data.statusInfo, error_code, error_message);
    }

    // filename
    extract(json, "filename", data.filename);

    if (!ret)
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_TYPE_CONSTRAINT_VIOLATION;
    }

    return ret;
}

/** @brief Convert a GetLog20Conf to a JSON representation */
bool GetLog20ConfConverter::toJson(const GetLog20Conf& data, rapidjson::Document& json)
{
    bool ret = true;

    // customData
    if (data.customData.isSet())
    {
        ocpp::types::ocpp20::CustomDataType20Converter customData_converter;
        customData_converter.setAllocator(allocator);
        rapidjson::Document customData_doc;
        customData_doc.Parse("{}");
        ret = ret && customData_converter.toJson(data.customData, customData_doc);
        json.AddMember(rapidjson::StringRef("customData"), customData_doc.Move(), *allocator);
    }

    // status
    fill(json, "status", ocpp::types::ocpp20::LogStatusEnumType20Helper.toString(data.status));

    // statusInfo
    if (data.statusInfo.isSet())
    {
        ocpp::types::ocpp20::StatusInfoType20Converter statusInfo_converter;
        statusInfo_converter.setAllocator(allocator);
        rapidjson::Document statusInfo_doc;
        statusInfo_doc.Parse("{}");
        ret = ret && statusInfo_converter.toJson(data.statusInfo, statusInfo_doc);
        json.AddMember(rapidjson::StringRef("statusInfo"), statusInfo_doc.Move(), *allocator);
    }

    // filename
    fill(json, "filename", data.filename);

    return ret;
}

} // namespace ocpp20
} // namespace messages
} // namespace ocpp