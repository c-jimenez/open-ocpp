/*
Copyright (c) 2020 Cedric Jimenez
This file is part of OpenOCPP.

OpenOCPP is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 2.1 of the License, or
(at your option) any later version.

OpenOCPP is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OpenOCPP. If not, see <http://www.gnu.org/licenses/>.
*/

/*
    Generated by json2cpp from : urn:OCPP:Cp:2:2020:3:CustomerInformationRequest
                                 OCPP 2.0.1 FINAL
*/

#include "CustomerInformation20.h"

#include "IRpc.h"

namespace ocpp
{
namespace messages
{
namespace ocpp20
{

/** @brief Convert a CustomerInformation20Req from a JSON representation */
bool CustomerInformation20ReqConverter::fromJson(const rapidjson::Value&   json,
                                                 CustomerInformation20Req& data,
                                                 std::string&              error_code,
                                                 std::string&              error_message)
{
    bool ret = true;

    // customData
    if (json.HasMember("customData"))
    {
        ocpp::types::ocpp20::CustomDataType20Converter customData_converter;
        ret = ret && customData_converter.fromJson(json["customData"], data.customData, error_code, error_message);
    }

    // customerCertificate
    if (json.HasMember("customerCertificate"))
    {
        ocpp::types::ocpp20::CertificateHashDataType20Converter customerCertificate_converter;
        ret =
            ret && customerCertificate_converter.fromJson(json["customerCertificate"], data.customerCertificate, error_code, error_message);
    }

    // idToken
    if (json.HasMember("idToken"))
    {
        ocpp::types::ocpp20::IdTokenType20Converter idToken_converter;
        ret = ret && idToken_converter.fromJson(json["idToken"], data.idToken, error_code, error_message);
    }

    // requestId
    extract(json, "requestId", data.requestId);

    // report
    extract(json, "report", data.report);

    // clear
    extract(json, "clear", data.clear);

    // customerIdentifier
    extract(json, "customerIdentifier", data.customerIdentifier);

    if (!ret)
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_TYPE_CONSTRAINT_VIOLATION;
    }

    return ret;
}

/** @brief Convert a CustomerInformation20Req to a JSON representation */
bool CustomerInformation20ReqConverter::toJson(const CustomerInformation20Req& data, rapidjson::Document& json)
{
    bool ret = true;

    // customData
    if (data.customData.isSet())
    {
        ocpp::types::ocpp20::CustomDataType20Converter customData_converter;
        customData_converter.setAllocator(allocator);
        rapidjson::Document customData_doc;
        customData_doc.Parse("{}");
        ret = ret && customData_converter.toJson(data.customData, customData_doc);
        json.AddMember(rapidjson::StringRef("customData"), customData_doc.Move(), *allocator);
    }

    // customerCertificate
    if (data.customerCertificate.isSet())
    {
        ocpp::types::ocpp20::CertificateHashDataType20Converter customerCertificate_converter;
        customerCertificate_converter.setAllocator(allocator);
        rapidjson::Document customerCertificate_doc;
        customerCertificate_doc.Parse("{}");
        ret = ret && customerCertificate_converter.toJson(data.customerCertificate, customerCertificate_doc);
        json.AddMember(rapidjson::StringRef("customerCertificate"), customerCertificate_doc.Move(), *allocator);
    }

    // idToken
    if (data.idToken.isSet())
    {
        ocpp::types::ocpp20::IdTokenType20Converter idToken_converter;
        idToken_converter.setAllocator(allocator);
        rapidjson::Document idToken_doc;
        idToken_doc.Parse("{}");
        ret = ret && idToken_converter.toJson(data.idToken, idToken_doc);
        json.AddMember(rapidjson::StringRef("idToken"), idToken_doc.Move(), *allocator);
    }

    // requestId
    fill(json, "requestId", data.requestId);

    // report
    fill(json, "report", data.report);

    // clear
    fill(json, "clear", data.clear);

    // customerIdentifier
    fill(json, "customerIdentifier", data.customerIdentifier);

    return ret;
}

/** @brief Convert a CustomerInformation20Conf from a JSON representation */
bool CustomerInformation20ConfConverter::fromJson(const rapidjson::Value&    json,
                                                  CustomerInformation20Conf& data,
                                                  std::string&               error_code,
                                                  std::string&               error_message)
{
    bool ret = true;

    // customData
    if (json.HasMember("customData"))
    {
        ocpp::types::ocpp20::CustomDataType20Converter customData_converter;
        ret = ret && customData_converter.fromJson(json["customData"], data.customData, error_code, error_message);
    }

    // status
    data.status = ocpp::types::ocpp20::CustomerInformationStatusEnumType20Helper.fromString(json["status"].GetString());

    // statusInfo
    if (json.HasMember("statusInfo"))
    {
        ocpp::types::ocpp20::StatusInfoType20Converter statusInfo_converter;
        ret = ret && statusInfo_converter.fromJson(json["statusInfo"], data.statusInfo, error_code, error_message);
    }

    if (!ret)
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_TYPE_CONSTRAINT_VIOLATION;
    }

    return ret;
}

/** @brief Convert a CustomerInformation20Conf to a JSON representation */
bool CustomerInformation20ConfConverter::toJson(const CustomerInformation20Conf& data, rapidjson::Document& json)
{
    bool ret = true;

    // customData
    if (data.customData.isSet())
    {
        ocpp::types::ocpp20::CustomDataType20Converter customData_converter;
        customData_converter.setAllocator(allocator);
        rapidjson::Document customData_doc;
        customData_doc.Parse("{}");
        ret = ret && customData_converter.toJson(data.customData, customData_doc);
        json.AddMember(rapidjson::StringRef("customData"), customData_doc.Move(), *allocator);
    }

    // status
    fill(json, "status", ocpp::types::ocpp20::CustomerInformationStatusEnumType20Helper.toString(data.status));

    // statusInfo
    if (data.statusInfo.isSet())
    {
        ocpp::types::ocpp20::StatusInfoType20Converter statusInfo_converter;
        statusInfo_converter.setAllocator(allocator);
        rapidjson::Document statusInfo_doc;
        statusInfo_doc.Parse("{}");
        ret = ret && statusInfo_converter.toJson(data.statusInfo, statusInfo_doc);
        json.AddMember(rapidjson::StringRef("statusInfo"), statusInfo_doc.Move(), *allocator);
    }

    return ret;
}

} // namespace ocpp20
} // namespace messages
} // namespace ocpp