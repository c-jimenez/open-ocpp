/*
Copyright (c) 2020 Cedric Jimenez
This file is part of OpenOCPP.

OpenOCPP is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 2.1 of the License, or
(at your option) any later version.

OpenOCPP is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OpenOCPP. If not, see <http://www.gnu.org/licenses/>.
*/

/*
    Generated by json2cpp from : urn:OCPP:Cp:2:2020:3:Get15118EVCertificateRequest
                                 OCPP 2.0.1 FINAL
*/

#include "Get15118EVCertificate20.h"

#include "IRpc.h"

namespace ocpp
{
namespace messages
{
namespace ocpp20
{

/** @brief Convert a Get15118EVCertificateReq from a JSON representation */
bool Get15118EVCertificateReqConverter::fromJson(const rapidjson::Value&   json,
                                                 Get15118EVCertificateReq& data,
                                                 std::string&              error_code,
                                                 std::string&              error_message)
{
    bool ret = true;

    // customData
    if (json.HasMember("customData"))
    {
        ocpp::types::ocpp20::CustomDataTypeConverter customData_converter;
        ret = ret && customData_converter.fromJson(json["customData"], data.customData, error_code, error_message);
    }

    // iso15118SchemaVersion
    extract(json, "iso15118SchemaVersion", data.iso15118SchemaVersion);

    // action
    data.action = ocpp::types::ocpp20::CertificateActionEnumTypeHelper.fromString(json["action"].GetString());

    // exiRequest
    extract(json, "exiRequest", data.exiRequest);

    if (!ret)
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_TYPE_CONSTRAINT_VIOLATION;
    }

    return ret;
}

/** @brief Convert a Get15118EVCertificateReq to a JSON representation */
bool Get15118EVCertificateReqConverter::toJson(const Get15118EVCertificateReq& data, rapidjson::Document& json)
{
    bool ret = true;

    // customData
    if (data.customData.isSet())
    {
        ocpp::types::ocpp20::CustomDataTypeConverter customData_converter;
        customData_converter.setAllocator(allocator);
        rapidjson::Document customData_doc;
        customData_doc.Parse("{}");
        ret = ret && customData_converter.toJson(data.customData, customData_doc);
        json.AddMember(rapidjson::StringRef("customData"), customData_doc.Move(), *allocator);
    }

    // iso15118SchemaVersion
    fill(json, "iso15118SchemaVersion", data.iso15118SchemaVersion);

    // action
    fill(json, "action", ocpp::types::ocpp20::CertificateActionEnumTypeHelper.toString(data.action));

    // exiRequest
    fill(json, "exiRequest", data.exiRequest);

    return ret;
}

/** @brief Convert a Get15118EVCertificateConf from a JSON representation */
bool Get15118EVCertificateConfConverter::fromJson(const rapidjson::Value&    json,
                                                  Get15118EVCertificateConf& data,
                                                  std::string&               error_code,
                                                  std::string&               error_message)
{
    bool ret = true;

    // customData
    if (json.HasMember("customData"))
    {
        ocpp::types::ocpp20::CustomDataTypeConverter customData_converter;
        ret = ret && customData_converter.fromJson(json["customData"], data.customData, error_code, error_message);
    }

    // status
    data.status = ocpp::types::ocpp20::Iso15118EVCertificateStatusEnumTypeHelper.fromString(json["status"].GetString());

    // statusInfo
    if (json.HasMember("statusInfo"))
    {
        ocpp::types::ocpp20::StatusInfoTypeConverter statusInfo_converter;
        ret = ret && statusInfo_converter.fromJson(json["statusInfo"], data.statusInfo, error_code, error_message);
    }

    // exiResponse
    extract(json, "exiResponse", data.exiResponse);

    if (!ret)
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_TYPE_CONSTRAINT_VIOLATION;
    }

    return ret;
}

/** @brief Convert a Get15118EVCertificateConf to a JSON representation */
bool Get15118EVCertificateConfConverter::toJson(const Get15118EVCertificateConf& data, rapidjson::Document& json)
{
    bool ret = true;

    // customData
    if (data.customData.isSet())
    {
        ocpp::types::ocpp20::CustomDataTypeConverter customData_converter;
        customData_converter.setAllocator(allocator);
        rapidjson::Document customData_doc;
        customData_doc.Parse("{}");
        ret = ret && customData_converter.toJson(data.customData, customData_doc);
        json.AddMember(rapidjson::StringRef("customData"), customData_doc.Move(), *allocator);
    }

    // status
    fill(json, "status", ocpp::types::ocpp20::Iso15118EVCertificateStatusEnumTypeHelper.toString(data.status));

    // statusInfo
    if (data.statusInfo.isSet())
    {
        ocpp::types::ocpp20::StatusInfoTypeConverter statusInfo_converter;
        statusInfo_converter.setAllocator(allocator);
        rapidjson::Document statusInfo_doc;
        statusInfo_doc.Parse("{}");
        ret = ret && statusInfo_converter.toJson(data.statusInfo, statusInfo_doc);
        json.AddMember(rapidjson::StringRef("statusInfo"), statusInfo_doc.Move(), *allocator);
    }

    // exiResponse
    fill(json, "exiResponse", data.exiResponse);

    return ret;
}

} // namespace ocpp20
} // namespace messages
} // namespace ocpp