/*
Copyright (c) 2020 Cedric Jimenez
This file is part of OpenOCPP.

OpenOCPP is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 2.1 of the License, or
(at your option) any later version.

OpenOCPP is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OpenOCPP. If not, see <http://www.gnu.org/licenses/>.
*/

/*
    Generated by json2cpp from : urn:OCPP:Cp:2:2020:3:ReservationStatusUpdateRequest
                                 OCPP 2.0.1 FINAL
*/

#include "ReservationStatusUpdate.h"

#include "IRpc.h"

namespace ocpp
{
namespace messages
{
namespace ocpp20
{

/** @brief Convert a ReservationStatusUpdateReq from a JSON representation */
bool ReservationStatusUpdateReqConverter::fromJson(const rapidjson::Value&       json,
                                     ReservationStatusUpdateReq&                 data,
                                     std::string&                  error_code,
                                     std::string&                  error_message)
{
    bool ret = true;

    // customData
    if (json.HasMember("customData"))
    {
    ocpp::types::ocpp20::CustomDataTypeConverter customData_converter;
    ret = ret && customData_converter.fromJson(json["customData"], data.customData, error_code, error_message);
    }

    // reservationId
    extract(json, "reservationId", data.reservationId);

    // reservationUpdateStatus
    data.reservationUpdateStatus = ocpp::types::ocpp20::ReservationUpdateStatusEnumTypeHelper.fromString(json["reservationUpdateStatus"].GetString());

    if (!ret)
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_TYPE_CONSTRAINT_VIOLATION;
    }

    return ret;
}

/** @brief Convert a ReservationStatusUpdateReq to a JSON representation */
bool ReservationStatusUpdateReqConverter::toJson(const ReservationStatusUpdateReq& data, rapidjson::Document& json) 
{
    bool ret = true;

    // customData
    if (data.customData.isSet())
    {
    ocpp::types::ocpp20::CustomDataTypeConverter customData_converter;
    customData_converter.setAllocator(allocator);
    rapidjson::Document customData_doc;
    customData_doc.Parse("{}");
    ret = ret && customData_converter.toJson(data.customData, customData_doc);
    json.AddMember(rapidjson::StringRef("customData"), customData_doc.Move(), *allocator);
    }

    // reservationId
    fill(json, "reservationId", data.reservationId);

    // reservationUpdateStatus
    fill(json, "reservationUpdateStatus", ocpp::types::ocpp20::ReservationUpdateStatusEnumTypeHelper.toString(data.reservationUpdateStatus));

    return ret;
}

/** @brief Convert a ReservationStatusUpdateConf from a JSON representation */
bool ReservationStatusUpdateConfConverter::fromJson(const rapidjson::Value&       json,
                                     ReservationStatusUpdateConf&                 data,
                                     std::string&                  error_code,
                                     std::string&                  error_message)
{
    bool ret = true;

    // customData
    if (json.HasMember("customData"))
    {
    ocpp::types::ocpp20::CustomDataTypeConverter customData_converter;
    ret = ret && customData_converter.fromJson(json["customData"], data.customData, error_code, error_message);
    }

    if (!ret)
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_TYPE_CONSTRAINT_VIOLATION;
    }

    return ret;
}

/** @brief Convert a ReservationStatusUpdateConf to a JSON representation */
bool ReservationStatusUpdateConfConverter::toJson(const ReservationStatusUpdateConf& data, rapidjson::Document& json) 
{
    bool ret = true;

    // customData
    if (data.customData.isSet())
    {
    ocpp::types::ocpp20::CustomDataTypeConverter customData_converter;
    customData_converter.setAllocator(allocator);
    rapidjson::Document customData_doc;
    customData_doc.Parse("{}");
    ret = ret && customData_converter.toJson(data.customData, customData_doc);
    json.AddMember(rapidjson::StringRef("customData"), customData_doc.Move(), *allocator);
    }

    return ret;
}

} // namespace ocpp20
} // namespace messages
} // namespace ocpp