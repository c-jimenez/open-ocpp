/*
Copyright (c) 2020 Cedric Jimenez
This file is part of OpenOCPP.

OpenOCPP is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 2.1 of the License, or
(at your option) any later version.

OpenOCPP is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OpenOCPP. If not, see <http://www.gnu.org/licenses/>.
*/

/*
    Generated by json2cpp from : urn:OCPP:Cp:2:2020:3:MeterValuesRequest
                                 OCPP 2.0.1 FINAL
*/

#include "MeterValues20.h"

#include "IRpc.h"

namespace ocpp
{
namespace messages
{
namespace ocpp20
{

/** @brief Convert a MeterValues20Req from a JSON representation */
bool MeterValues20ReqConverter::fromJson(const rapidjson::Value& json,
                                         MeterValues20Req&       data,
                                         std::string&            error_code,
                                         std::string&            error_message)
{
    bool ret = true;

    // customData
    if (json.HasMember("customData"))
    {
        ocpp::types::ocpp20::CustomDataType20Converter customData_converter;
        ret = ret && customData_converter.fromJson(json["customData"], data.customData, error_code, error_message);
    }

    // evseId
    extract(json, "evseId", data.evseId);

    // meterValue
    if (json.HasMember("meterValue"))
    {
        const rapidjson::Value&                        meterValue_json = json["meterValue"];
        ocpp::types::ocpp20::MeterValueType20Converter meterValue_converter;
        for (auto it = meterValue_json.Begin(); ret && (it != meterValue_json.End()); ++it)
        {
            ocpp::types::ocpp20::MeterValueType20& item = data.meterValue.emplace_back();
            ret                                         = ret && meterValue_converter.fromJson(*it, item, error_code, error_message);
        }
    }

    if (!ret)
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_TYPE_CONSTRAINT_VIOLATION;
    }

    return ret;
}

/** @brief Convert a MeterValues20Req to a JSON representation */
bool MeterValues20ReqConverter::toJson(const MeterValues20Req& data, rapidjson::Document& json)
{
    bool ret = true;

    // customData
    if (data.customData.isSet())
    {
        ocpp::types::ocpp20::CustomDataType20Converter customData_converter;
        customData_converter.setAllocator(allocator);
        rapidjson::Document customData_doc;
        customData_doc.Parse("{}");
        ret = ret && customData_converter.toJson(data.customData, customData_doc);
        json.AddMember(rapidjson::StringRef("customData"), customData_doc.Move(), *allocator);
    }

    // evseId
    fill(json, "evseId", data.evseId);

    // meterValue

    rapidjson::Value                               meterValue_json(rapidjson::kArrayType);
    ocpp::types::ocpp20::MeterValueType20Converter meterValue_converter;
    meterValue_converter.setAllocator(allocator);
    for (const ocpp::types::ocpp20::MeterValueType20& item : data.meterValue)
    {
        rapidjson::Document item_doc;
        item_doc.Parse("{}");
        ret = ret && meterValue_converter.toJson(item, item_doc);
        meterValue_json.PushBack(item_doc.Move(), *allocator);
    }
    json.AddMember(rapidjson::StringRef("meterValue"), meterValue_json.Move(), *allocator);

    return ret;
}

/** @brief Convert a MeterValues20Conf from a JSON representation */
bool MeterValues20ConfConverter::fromJson(const rapidjson::Value& json,
                                          MeterValues20Conf&      data,
                                          std::string&            error_code,
                                          std::string&            error_message)
{
    bool ret = true;

    // customData
    if (json.HasMember("customData"))
    {
        ocpp::types::ocpp20::CustomDataType20Converter customData_converter;
        ret = ret && customData_converter.fromJson(json["customData"], data.customData, error_code, error_message);
    }

    if (!ret)
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_TYPE_CONSTRAINT_VIOLATION;
    }

    return ret;
}

/** @brief Convert a MeterValues20Conf to a JSON representation */
bool MeterValues20ConfConverter::toJson(const MeterValues20Conf& data, rapidjson::Document& json)
{
    bool ret = true;

    // customData
    if (data.customData.isSet())
    {
        ocpp::types::ocpp20::CustomDataType20Converter customData_converter;
        customData_converter.setAllocator(allocator);
        rapidjson::Document customData_doc;
        customData_doc.Parse("{}");
        ret = ret && customData_converter.toJson(data.customData, customData_doc);
        json.AddMember(rapidjson::StringRef("customData"), customData_doc.Move(), *allocator);
    }

    return ret;
}

} // namespace ocpp20
} // namespace messages
} // namespace ocpp