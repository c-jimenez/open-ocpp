/*
Copyright (c) 2020 Cedric Jimenez
This file is part of OpenOCPP.

OpenOCPP is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 2.1 of the License, or
(at your option) any later version.

OpenOCPP is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OpenOCPP. If not, see <http://www.gnu.org/licenses/>.
*/

/*
    Generated by json2cpp from : urn:OCPP:Cp:2:2020:3:GetInstalledCertificateIdsRequest
                                 OCPP 2.0.1 FINAL
*/

#include "GetInstalledCertificateIds20.h"

#include "IRpc.h"

namespace ocpp
{
namespace messages
{
namespace ocpp20
{

/** @brief Convert a GetInstalledCertificateIds20Req from a JSON representation */
bool GetInstalledCertificateIds20ReqConverter::fromJson(const rapidjson::Value&          json,
                                                        GetInstalledCertificateIds20Req& data,
                                                        std::string&                     error_code,
                                                        std::string&                     error_message)
{
    bool ret = true;

    // customData
    if (json.HasMember("customData"))
    {
        ocpp::types::ocpp20::CustomDataType20Converter customData_converter;
        ret = ret && customData_converter.fromJson(json["customData"], data.customData, error_code, error_message);
    }

    // certificateType
    const rapidjson::Value& certificateType_json = json["certificateType"];
    for (auto it = certificateType_json.Begin(); ret && (it != certificateType_json.End()); ++it)
    {
        ocpp::types::ocpp20::GetCertificateIdUseEnumType20& item = data.certificateType.emplace_back();
        item = ocpp::types::ocpp20::GetCertificateIdUseEnumType20Helper.fromString(it->GetString());
    }

    if (!ret)
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_TYPE_CONSTRAINT_VIOLATION;
    }

    return ret;
}

/** @brief Convert a GetInstalledCertificateIds20Req to a JSON representation */
bool GetInstalledCertificateIds20ReqConverter::toJson(const GetInstalledCertificateIds20Req& data, rapidjson::Document& json)
{
    bool ret = true;

    // customData
    if (data.customData.isSet())
    {
        ocpp::types::ocpp20::CustomDataType20Converter customData_converter;
        customData_converter.setAllocator(allocator);
        rapidjson::Document customData_doc;
        customData_doc.Parse("{}");
        ret = ret && customData_converter.toJson(data.customData, customData_doc);
        json.AddMember(rapidjson::StringRef("customData"), customData_doc.Move(), *allocator);
    }

    // certificateType
    if (!data.certificateType.empty())
    {
        rapidjson::Value certificateType_json(rapidjson::kArrayType);
        for (const ocpp::types::ocpp20::GetCertificateIdUseEnumType20& item : data.certificateType)
        {
            certificateType_json.PushBack(
                rapidjson::Value(ocpp::types::ocpp20::GetCertificateIdUseEnumType20Helper.toString(item).c_str(), *allocator).Move(),
                *allocator);
        }
        json.AddMember(rapidjson::StringRef("certificateType"), certificateType_json.Move(), *allocator);
    }

    return ret;
}

/** @brief Convert a GetInstalledCertificateIds20Conf from a JSON representation */
bool GetInstalledCertificateIds20ConfConverter::fromJson(const rapidjson::Value&           json,
                                                         GetInstalledCertificateIds20Conf& data,
                                                         std::string&                      error_code,
                                                         std::string&                      error_message)
{
    bool ret = true;

    // customData
    if (json.HasMember("customData"))
    {
        ocpp::types::ocpp20::CustomDataType20Converter customData_converter;
        ret = ret && customData_converter.fromJson(json["customData"], data.customData, error_code, error_message);
    }

    // status
    data.status = ocpp::types::ocpp20::GetInstalledCertificateStatusEnumType20Helper.fromString(json["status"].GetString());

    // statusInfo
    if (json.HasMember("statusInfo"))
    {
        ocpp::types::ocpp20::StatusInfoType20Converter statusInfo_converter;
        ret = ret && statusInfo_converter.fromJson(json["statusInfo"], data.statusInfo, error_code, error_message);
    }

    // certificateHashDataChain
    const rapidjson::Value&                                      certificateHashDataChain_json = json["certificateHashDataChain"];
    ocpp::types::ocpp20::CertificateHashDataChainType20Converter certificateHashDataChain_converter;
    for (auto it = certificateHashDataChain_json.Begin(); ret && (it != certificateHashDataChain_json.End()); ++it)
    {
        ocpp::types::ocpp20::CertificateHashDataChainType20& item = data.certificateHashDataChain.emplace_back();
        ret = ret && certificateHashDataChain_converter.fromJson(*it, item, error_code, error_message);
    }

    if (!ret)
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_TYPE_CONSTRAINT_VIOLATION;
    }

    return ret;
}

/** @brief Convert a GetInstalledCertificateIds20Conf to a JSON representation */
bool GetInstalledCertificateIds20ConfConverter::toJson(const GetInstalledCertificateIds20Conf& data, rapidjson::Document& json)
{
    bool ret = true;

    // customData
    if (data.customData.isSet())
    {
        ocpp::types::ocpp20::CustomDataType20Converter customData_converter;
        customData_converter.setAllocator(allocator);
        rapidjson::Document customData_doc;
        customData_doc.Parse("{}");
        ret = ret && customData_converter.toJson(data.customData, customData_doc);
        json.AddMember(rapidjson::StringRef("customData"), customData_doc.Move(), *allocator);
    }

    // status
    fill(json, "status", ocpp::types::ocpp20::GetInstalledCertificateStatusEnumType20Helper.toString(data.status));

    // statusInfo
    if (data.statusInfo.isSet())
    {
        ocpp::types::ocpp20::StatusInfoType20Converter statusInfo_converter;
        statusInfo_converter.setAllocator(allocator);
        rapidjson::Document statusInfo_doc;
        statusInfo_doc.Parse("{}");
        ret = ret && statusInfo_converter.toJson(data.statusInfo, statusInfo_doc);
        json.AddMember(rapidjson::StringRef("statusInfo"), statusInfo_doc.Move(), *allocator);
    }

    // certificateHashDataChain
    if (!data.certificateHashDataChain.empty())
    {
        rapidjson::Value                                             certificateHashDataChain_json(rapidjson::kArrayType);
        ocpp::types::ocpp20::CertificateHashDataChainType20Converter certificateHashDataChain_converter;
        certificateHashDataChain_converter.setAllocator(allocator);
        for (const ocpp::types::ocpp20::CertificateHashDataChainType20& item : data.certificateHashDataChain)
        {
            rapidjson::Document item_doc;
            item_doc.Parse("{}");
            ret = ret && certificateHashDataChain_converter.toJson(item, item_doc);
            certificateHashDataChain_json.PushBack(item_doc.Move(), *allocator);
        }
        json.AddMember(rapidjson::StringRef("certificateHashDataChain"), certificateHashDataChain_json.Move(), *allocator);
    }

    return ret;
}

} // namespace ocpp20
} // namespace messages
} // namespace ocpp