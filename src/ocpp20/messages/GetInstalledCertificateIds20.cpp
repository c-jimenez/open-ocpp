/*
Copyright (c) 2020 Cedric Jimenez
This file is part of OpenOCPP.

OpenOCPP is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 2.1 of the License, or
(at your option) any later version.

OpenOCPP is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OpenOCPP. If not, see <http://www.gnu.org/licenses/>.
*/

/*
    Generated by json2cpp from : urn:OCPP:Cp:2:2020:3:GetInstalledCertificateIdsRequest
                                 OCPP 2.0.1 FINAL
*/

#include "GetInstalledCertificateIds20.h"

#include "IRpc.h"

namespace ocpp
{
namespace messages
{
namespace ocpp20
{

/** @brief Convert a GetInstalledCertificateIdsReq from a JSON representation */
bool GetInstalledCertificateIdsReqConverter::fromJson(const rapidjson::Value&        json,
                                                      GetInstalledCertificateIdsReq& data,
                                                      std::string&                   error_code,
                                                      std::string&                   error_message)
{
    bool ret = true;

    // customData
    if (json.HasMember("customData"))
    {
        ocpp::types::ocpp20::CustomDataTypeConverter customData_converter;
        ret = ret && customData_converter.fromJson(json["customData"], data.customData, error_code, error_message);
    }

    // certificateType
    if (json.HasMember("certificateType"))
    {
        const rapidjson::Value& certificateType_json = json["certificateType"];
        for (auto it = certificateType_json.Begin(); ret && (it != certificateType_json.End()); ++it)
        {
            ocpp::types::ocpp20::GetCertificateIdUseEnumType& item = data.certificateType.emplace_back();
            item = ocpp::types::ocpp20::GetCertificateIdUseEnumTypeHelper.fromString(it->GetString());
        }
    }

    if (!ret)
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_TYPE_CONSTRAINT_VIOLATION;
    }

    return ret;
}

/** @brief Convert a GetInstalledCertificateIdsReq to a JSON representation */
bool GetInstalledCertificateIdsReqConverter::toJson(const GetInstalledCertificateIdsReq& data, rapidjson::Document& json)
{
    bool ret = true;

    // customData
    if (data.customData.isSet())
    {
        ocpp::types::ocpp20::CustomDataTypeConverter customData_converter;
        customData_converter.setAllocator(allocator);
        rapidjson::Document customData_doc;
        customData_doc.Parse("{}");
        ret = ret && customData_converter.toJson(data.customData, customData_doc);
        json.AddMember(rapidjson::StringRef("customData"), customData_doc.Move(), *allocator);
    }

    // certificateType
    if (!data.certificateType.empty())
    {

        rapidjson::Value certificateType_json(rapidjson::kArrayType);
        for (const ocpp::types::ocpp20::GetCertificateIdUseEnumType& item : data.certificateType)
        {
            certificateType_json.PushBack(
                rapidjson::Value(ocpp::types::ocpp20::GetCertificateIdUseEnumTypeHelper.toString(item).c_str(), *allocator).Move(),
                *allocator);
        }
        json.AddMember(rapidjson::StringRef("certificateType"), certificateType_json.Move(), *allocator);
    }

    return ret;
}

/** @brief Convert a GetInstalledCertificateIdsConf from a JSON representation */
bool GetInstalledCertificateIdsConfConverter::fromJson(const rapidjson::Value&         json,
                                                       GetInstalledCertificateIdsConf& data,
                                                       std::string&                    error_code,
                                                       std::string&                    error_message)
{
    bool ret = true;

    // customData
    if (json.HasMember("customData"))
    {
        ocpp::types::ocpp20::CustomDataTypeConverter customData_converter;
        ret = ret && customData_converter.fromJson(json["customData"], data.customData, error_code, error_message);
    }

    // status
    data.status = ocpp::types::ocpp20::GetInstalledCertificateStatusEnumTypeHelper.fromString(json["status"].GetString());

    // statusInfo
    if (json.HasMember("statusInfo"))
    {
        ocpp::types::ocpp20::StatusInfoTypeConverter statusInfo_converter;
        ret = ret && statusInfo_converter.fromJson(json["statusInfo"], data.statusInfo, error_code, error_message);
    }

    // certificateHashDataChain
    if (json.HasMember("certificateHashDataChain"))
    {
        const rapidjson::Value&                                    certificateHashDataChain_json = json["certificateHashDataChain"];
        ocpp::types::ocpp20::CertificateHashDataChainTypeConverter certificateHashDataChain_converter;
        for (auto it = certificateHashDataChain_json.Begin(); ret && (it != certificateHashDataChain_json.End()); ++it)
        {
            ocpp::types::ocpp20::CertificateHashDataChainType& item = data.certificateHashDataChain.emplace_back();
            ret = ret && certificateHashDataChain_converter.fromJson(*it, item, error_code, error_message);
        }
    }

    if (!ret)
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_TYPE_CONSTRAINT_VIOLATION;
    }

    return ret;
}

/** @brief Convert a GetInstalledCertificateIdsConf to a JSON representation */
bool GetInstalledCertificateIdsConfConverter::toJson(const GetInstalledCertificateIdsConf& data, rapidjson::Document& json)
{
    bool ret = true;

    // customData
    if (data.customData.isSet())
    {
        ocpp::types::ocpp20::CustomDataTypeConverter customData_converter;
        customData_converter.setAllocator(allocator);
        rapidjson::Document customData_doc;
        customData_doc.Parse("{}");
        ret = ret && customData_converter.toJson(data.customData, customData_doc);
        json.AddMember(rapidjson::StringRef("customData"), customData_doc.Move(), *allocator);
    }

    // status
    fill(json, "status", ocpp::types::ocpp20::GetInstalledCertificateStatusEnumTypeHelper.toString(data.status));

    // statusInfo
    if (data.statusInfo.isSet())
    {
        ocpp::types::ocpp20::StatusInfoTypeConverter statusInfo_converter;
        statusInfo_converter.setAllocator(allocator);
        rapidjson::Document statusInfo_doc;
        statusInfo_doc.Parse("{}");
        ret = ret && statusInfo_converter.toJson(data.statusInfo, statusInfo_doc);
        json.AddMember(rapidjson::StringRef("statusInfo"), statusInfo_doc.Move(), *allocator);
    }

    // certificateHashDataChain
    if (!data.certificateHashDataChain.empty())
    {

        rapidjson::Value                                           certificateHashDataChain_json(rapidjson::kArrayType);
        ocpp::types::ocpp20::CertificateHashDataChainTypeConverter certificateHashDataChain_converter;
        certificateHashDataChain_converter.setAllocator(allocator);
        for (const ocpp::types::ocpp20::CertificateHashDataChainType& item : data.certificateHashDataChain)
        {
            rapidjson::Document item_doc;
            item_doc.Parse("{}");
            ret = ret && certificateHashDataChain_converter.toJson(item, item_doc);
            certificateHashDataChain_json.PushBack(item_doc.Move(), *allocator);
        }
        json.AddMember(rapidjson::StringRef("certificateHashDataChain"), certificateHashDataChain_json.Move(), *allocator);
    }

    return ret;
}

} // namespace ocpp20
} // namespace messages
} // namespace ocpp