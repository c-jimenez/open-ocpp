/*
Copyright (c) 2020 Cedric Jimenez
This file is part of OpenOCPP.

OpenOCPP is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 2.1 of the License, or
(at your option) any later version.

OpenOCPP is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OpenOCPP. If not, see <http://www.gnu.org/licenses/>.
*/

/*
    Generated by json2cpp from : urn:OCPP:Cp:2:2020:3:ReserveNowRequest
                                 OCPP 2.0.1 FINAL
*/

#include "ReserveNow20.h"

#include "IRpc.h"

namespace ocpp
{
namespace messages
{
namespace ocpp20
{

/** @brief Convert a ReserveNowReq from a JSON representation */
bool ReserveNowReqConverter::fromJson(const rapidjson::Value& json,
                                      ReserveNowReq&          data,
                                      std::string&            error_code,
                                      std::string&            error_message)
{
    bool ret = true;

    // customData
    if (json.HasMember("customData"))
    {
        ocpp::types::ocpp20::CustomDataTypeConverter customData_converter;
        ret = ret && customData_converter.fromJson(json["customData"], data.customData, error_code, error_message);
    }

    // id
    extract(json, "id", data.id);

    // expiryDateTime
    ret = ret && extract(json, "expiryDateTime", data.expiryDateTime, error_message);

    // connectorType
    if (json.HasMember("connectorType"))
    {
        data.connectorType = ocpp::types::ocpp20::ConnectorEnumTypeHelper.fromString(json["connectorType"].GetString());
    }

    // idToken
    ocpp::types::ocpp20::IdTokenTypeConverter idToken_converter;
    ret = ret && idToken_converter.fromJson(json["idToken"], data.idToken, error_code, error_message);

    // evseId
    extract(json, "evseId", data.evseId);

    // groupIdToken
    if (json.HasMember("groupIdToken"))
    {
        ocpp::types::ocpp20::IdTokenTypeConverter groupIdToken_converter;
        ret = ret && groupIdToken_converter.fromJson(json["groupIdToken"], data.groupIdToken, error_code, error_message);
    }

    if (!ret)
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_TYPE_CONSTRAINT_VIOLATION;
    }

    return ret;
}

/** @brief Convert a ReserveNowReq to a JSON representation */
bool ReserveNowReqConverter::toJson(const ReserveNowReq& data, rapidjson::Document& json)
{
    bool ret = true;

    // customData
    if (data.customData.isSet())
    {
        ocpp::types::ocpp20::CustomDataTypeConverter customData_converter;
        customData_converter.setAllocator(allocator);
        rapidjson::Document customData_doc(rapidjson::kObjectType);
        ret = ret && customData_converter.toJson(data.customData, customData_doc);
        json.AddMember(rapidjson::StringRef("customData"), customData_doc.Move(), *allocator);
    }

    // id
    fill(json, "id", data.id);

    // expiryDateTime
    fill(json, "expiryDateTime", data.expiryDateTime);

    // connectorType
    if (data.connectorType.isSet())
    {
        fill(json, "connectorType", ocpp::types::ocpp20::ConnectorEnumTypeHelper.toString(data.connectorType));
    }

    // idToken
    ocpp::types::ocpp20::IdTokenTypeConverter idToken_converter;
    idToken_converter.setAllocator(allocator);
    rapidjson::Document idToken_doc(rapidjson::kObjectType);
    ret = ret && idToken_converter.toJson(data.idToken, idToken_doc);
    json.AddMember(rapidjson::StringRef("idToken"), idToken_doc.Move(), *allocator);

    // evseId
    fill(json, "evseId", data.evseId);

    // groupIdToken
    if (data.groupIdToken.isSet())
    {
        ocpp::types::ocpp20::IdTokenTypeConverter groupIdToken_converter;
        groupIdToken_converter.setAllocator(allocator);
        rapidjson::Document groupIdToken_doc(rapidjson::kObjectType);
        ret = ret && groupIdToken_converter.toJson(data.groupIdToken, groupIdToken_doc);
        json.AddMember(rapidjson::StringRef("groupIdToken"), groupIdToken_doc.Move(), *allocator);
    }

    return ret;
}

/** @brief Convert a ReserveNowConf from a JSON representation */
bool ReserveNowConfConverter::fromJson(const rapidjson::Value& json,
                                       ReserveNowConf&         data,
                                       std::string&            error_code,
                                       std::string&            error_message)
{
    bool ret = true;

    // customData
    if (json.HasMember("customData"))
    {
        ocpp::types::ocpp20::CustomDataTypeConverter customData_converter;
        ret = ret && customData_converter.fromJson(json["customData"], data.customData, error_code, error_message);
    }

    // status
    data.status = ocpp::types::ocpp20::ReserveNowStatusEnumTypeHelper.fromString(json["status"].GetString());

    // statusInfo
    if (json.HasMember("statusInfo"))
    {
        ocpp::types::ocpp20::StatusInfoTypeConverter statusInfo_converter;
        ret = ret && statusInfo_converter.fromJson(json["statusInfo"], data.statusInfo, error_code, error_message);
    }

    if (!ret)
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_TYPE_CONSTRAINT_VIOLATION;
    }

    return ret;
}

/** @brief Convert a ReserveNowConf to a JSON representation */
bool ReserveNowConfConverter::toJson(const ReserveNowConf& data, rapidjson::Document& json)
{
    bool ret = true;

    // customData
    if (data.customData.isSet())
    {
        ocpp::types::ocpp20::CustomDataTypeConverter customData_converter;
        customData_converter.setAllocator(allocator);
        rapidjson::Document customData_doc(rapidjson::kObjectType);
        ret = ret && customData_converter.toJson(data.customData, customData_doc);
        json.AddMember(rapidjson::StringRef("customData"), customData_doc.Move(), *allocator);
    }

    // status
    fill(json, "status", ocpp::types::ocpp20::ReserveNowStatusEnumTypeHelper.toString(data.status));

    // statusInfo
    if (data.statusInfo.isSet())
    {
        ocpp::types::ocpp20::StatusInfoTypeConverter statusInfo_converter;
        statusInfo_converter.setAllocator(allocator);
        rapidjson::Document statusInfo_doc(rapidjson::kObjectType);
        ret = ret && statusInfo_converter.toJson(data.statusInfo, statusInfo_doc);
        json.AddMember(rapidjson::StringRef("statusInfo"), statusInfo_doc.Move(), *allocator);
    }

    return ret;
}

} // namespace ocpp20
} // namespace messages
} // namespace ocpp