/*
Copyright (c) 2020 Cedric Jimenez
This file is part of OpenOCPP.

OpenOCPP is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 2.1 of the License, or
(at your option) any later version.

OpenOCPP is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OpenOCPP. If not, see <http://www.gnu.org/licenses/>.
*/

/*
    Generated by json2cpp from : urn:OCPP:Cp:2:2020:3:GetVariablesRequest
                                 OCPP 2.0.1 FINAL
*/

#include "GetVariables.h"

#include "IRpc.h"

namespace ocpp
{
namespace messages
{
namespace ocpp20
{

/** @brief Convert a GetVariablesReq from a JSON representation */
bool GetVariablesReqConverter::fromJson(const rapidjson::Value&       json,
                                     GetVariablesReq&                 data,
                                     std::string&                  error_code,
                                     std::string&                  error_message)
{
    bool ret = true;

    // customData
    if (json.HasMember("customData"))
    {
    ocpp::types::ocpp20::CustomDataTypeConverter customData_converter;
    ret = ret && customData_converter.fromJson(json["customData"], data.customData, error_code, error_message);
    }

    // getVariableData
    const rapidjson::Value& getVariableData_json = json["getVariableData"];
    ocpp::types::ocpp20::GetVariableDataTypeConverter getVariableData_converter;
    for (auto it = getVariableData_json.Begin(); ret && (it != getVariableData_json.End()); ++it)
    {
        ocpp::types::ocpp20::GetVariableDataType& item = data.getVariableData.emplace_back();
        ret = ret && getVariableData_converter.fromJson(*it, item, error_code, error_message);
    }

    if (!ret)
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_TYPE_CONSTRAINT_VIOLATION;
    }

    return ret;
}

/** @brief Convert a GetVariablesReq to a JSON representation */
bool GetVariablesReqConverter::toJson(const GetVariablesReq& data, rapidjson::Document& json) 
{
    bool ret = true;

    // customData
    if (data.customData.isSet())
    {
    ocpp::types::ocpp20::CustomDataTypeConverter customData_converter;
    customData_converter.setAllocator(allocator);
    rapidjson::Document customData_doc;
    customData_doc.Parse("{}");
    ret = ret && customData_converter.toJson(data.customData, customData_doc);
    json.AddMember(rapidjson::StringRef("customData"), customData_doc.Move(), *allocator);
    }

    // getVariableData
    if (!data.getVariableData.empty())
    {
        rapidjson::Value getVariableData_json(rapidjson::kArrayType);
        ocpp::types::ocpp20::GetVariableDataTypeConverter getVariableData_converter;
        getVariableData_converter.setAllocator(allocator);
        for (const ocpp::types::ocpp20::GetVariableDataType& item : data.getVariableData)
        {
            rapidjson::Document item_doc;
            item_doc.Parse("{}");
            ret = ret && getVariableData_converter.toJson(item, item_doc);
            getVariableData_json.PushBack(item_doc.Move(), *allocator);
        }
        json.AddMember(rapidjson::StringRef("getVariableData"), getVariableData_json.Move(), *allocator);
    }

    return ret;
}

/** @brief Convert a GetVariablesConf from a JSON representation */
bool GetVariablesConfConverter::fromJson(const rapidjson::Value&       json,
                                     GetVariablesConf&                 data,
                                     std::string&                  error_code,
                                     std::string&                  error_message)
{
    bool ret = true;

    // customData
    if (json.HasMember("customData"))
    {
    ocpp::types::ocpp20::CustomDataTypeConverter customData_converter;
    ret = ret && customData_converter.fromJson(json["customData"], data.customData, error_code, error_message);
    }

    // getVariableResult
    const rapidjson::Value& getVariableResult_json = json["getVariableResult"];
    ocpp::types::ocpp20::GetVariableResultTypeConverter getVariableResult_converter;
    for (auto it = getVariableResult_json.Begin(); ret && (it != getVariableResult_json.End()); ++it)
    {
        ocpp::types::ocpp20::GetVariableResultType& item = data.getVariableResult.emplace_back();
        ret = ret && getVariableResult_converter.fromJson(*it, item, error_code, error_message);
    }

    if (!ret)
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_TYPE_CONSTRAINT_VIOLATION;
    }

    return ret;
}

/** @brief Convert a GetVariablesConf to a JSON representation */
bool GetVariablesConfConverter::toJson(const GetVariablesConf& data, rapidjson::Document& json) 
{
    bool ret = true;

    // customData
    if (data.customData.isSet())
    {
    ocpp::types::ocpp20::CustomDataTypeConverter customData_converter;
    customData_converter.setAllocator(allocator);
    rapidjson::Document customData_doc;
    customData_doc.Parse("{}");
    ret = ret && customData_converter.toJson(data.customData, customData_doc);
    json.AddMember(rapidjson::StringRef("customData"), customData_doc.Move(), *allocator);
    }

    // getVariableResult
    if (!data.getVariableResult.empty())
    {
        rapidjson::Value getVariableResult_json(rapidjson::kArrayType);
        ocpp::types::ocpp20::GetVariableResultTypeConverter getVariableResult_converter;
        getVariableResult_converter.setAllocator(allocator);
        for (const ocpp::types::ocpp20::GetVariableResultType& item : data.getVariableResult)
        {
            rapidjson::Document item_doc;
            item_doc.Parse("{}");
            ret = ret && getVariableResult_converter.toJson(item, item_doc);
            getVariableResult_json.PushBack(item_doc.Move(), *allocator);
        }
        json.AddMember(rapidjson::StringRef("getVariableResult"), getVariableResult_json.Move(), *allocator);
    }

    return ret;
}

} // namespace ocpp20
} // namespace messages
} // namespace ocpp