/*
Copyright (c) 2020 Cedric Jimenez
This file is part of OpenOCPP.

OpenOCPP is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 2.1 of the License, or
(at your option) any later version.

OpenOCPP is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OpenOCPP. If not, see <http://www.gnu.org/licenses/>.
*/

/*
    Generated by json2cpp from : urn:OCPP:Cp:2:2020:3:NotifyCustomerInformationRequest
                                 OCPP 2.0.1 FINAL
*/

#include "NotifyCustomerInformation.h"

#include "IRpc.h"

namespace ocpp
{
namespace messages
{
namespace ocpp20
{

/** @brief Convert a NotifyCustomerInformationReq from a JSON representation */
bool NotifyCustomerInformationReqConverter::fromJson(const rapidjson::Value&       json,
                                                     NotifyCustomerInformationReq& data,
                                                     std::string&                  error_code,
                                                     std::string&                  error_message)
{
    bool ret = true;

    // customData
    if (json.HasMember("customData"))
    {
        ocpp::types::ocpp20::CustomDataTypeConverter customData_converter;
        ret = ret && customData_converter.fromJson(json["customData"], data.customData, error_code, error_message);
    }

    // data
    extract(json, "data", data.data);

    // tbc
    extract(json, "tbc", data.tbc);

    // seqNo
    extract(json, "seqNo", data.seqNo);

    // generatedAt
    ret = ret && extract(json, "generatedAt", data.generatedAt, error_message);

    // requestId
    extract(json, "requestId", data.requestId);

    if (!ret)
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_TYPE_CONSTRAINT_VIOLATION;
    }

    return ret;
}

/** @brief Convert a NotifyCustomerInformationReq to a JSON representation */
bool NotifyCustomerInformationReqConverter::toJson(const NotifyCustomerInformationReq& data, rapidjson::Document& json)
{
    bool ret = true;

    // customData
    if (data.customData.isSet())
    {
        ocpp::types::ocpp20::CustomDataTypeConverter customData_converter;
        customData_converter.setAllocator(allocator);
        rapidjson::Document customData_doc;
        customData_doc.Parse("{}");
        ret = ret && customData_converter.toJson(data.customData, customData_doc);
        json.AddMember(rapidjson::StringRef("customData"), customData_doc.Move(), *allocator);
    }

    // data
    fill(json, "data", data.data);

    // tbc
    fill(json, "tbc", data.tbc);

    // seqNo
    fill(json, "seqNo", data.seqNo);

    // generatedAt
    fill(json, "generatedAt", data.generatedAt);

    // requestId
    fill(json, "requestId", data.requestId);

    return ret;
}

/** @brief Convert a NotifyCustomerInformationConf from a JSON representation */
bool NotifyCustomerInformationConfConverter::fromJson(const rapidjson::Value&        json,
                                                      NotifyCustomerInformationConf& data,
                                                      std::string&                   error_code,
                                                      std::string&                   error_message)
{
    bool ret = true;

    // customData
    if (json.HasMember("customData"))
    {
        ocpp::types::ocpp20::CustomDataTypeConverter customData_converter;
        ret = ret && customData_converter.fromJson(json["customData"], data.customData, error_code, error_message);
    }

    if (!ret)
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_TYPE_CONSTRAINT_VIOLATION;
    }

    return ret;
}

/** @brief Convert a NotifyCustomerInformationConf to a JSON representation */
bool NotifyCustomerInformationConfConverter::toJson(const NotifyCustomerInformationConf& data, rapidjson::Document& json)
{
    bool ret = true;

    // customData
    if (data.customData.isSet())
    {
        ocpp::types::ocpp20::CustomDataTypeConverter customData_converter;
        customData_converter.setAllocator(allocator);
        rapidjson::Document customData_doc;
        customData_doc.Parse("{}");
        ret = ret && customData_converter.toJson(data.customData, customData_doc);
        json.AddMember(rapidjson::StringRef("customData"), customData_doc.Move(), *allocator);
    }

    return ret;
}

} // namespace ocpp20
} // namespace messages
} // namespace ocpp