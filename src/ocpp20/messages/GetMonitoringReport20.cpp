/*
Copyright (c) 2020 Cedric Jimenez
This file is part of OpenOCPP.

OpenOCPP is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 2.1 of the License, or
(at your option) any later version.

OpenOCPP is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OpenOCPP. If not, see <http://www.gnu.org/licenses/>.
*/

/*
    Generated by json2cpp from : urn:OCPP:Cp:2:2020:3:GetMonitoringReportRequest
                                 OCPP 2.0.1 FINAL
*/

#include "GetMonitoringReport20.h"

#include "IRpc.h"

namespace ocpp
{
namespace messages
{
namespace ocpp20
{

/** @brief Convert a GetMonitoringReportReq from a JSON representation */
bool GetMonitoringReportReqConverter::fromJson(const rapidjson::Value& json,
                                               GetMonitoringReportReq& data,
                                               std::string&            error_code,
                                               std::string&            error_message)
{
    bool ret = true;

    // customData
    if (json.HasMember("customData"))
    {
        ocpp::types::ocpp20::CustomDataTypeConverter customData_converter;
        ret = ret && customData_converter.fromJson(json["customData"], data.customData, error_code, error_message);
    }

    // componentVariable
    if (json.HasMember("componentVariable"))
    {
        const rapidjson::Value&                             componentVariable_json = json["componentVariable"];
        ocpp::types::ocpp20::ComponentVariableTypeConverter componentVariable_converter;
        for (auto it = componentVariable_json.Begin(); ret && (it != componentVariable_json.End()); ++it)
        {
            ocpp::types::ocpp20::ComponentVariableType& item = data.componentVariable.emplace_back();
            ret = ret && componentVariable_converter.fromJson(*it, item, error_code, error_message);
        }
    }

    // requestId
    extract(json, "requestId", data.requestId);

    // monitoringCriteria
    if (json.HasMember("monitoringCriteria"))
    {
        const rapidjson::Value& monitoringCriteria_json = json["monitoringCriteria"];
        for (auto it = monitoringCriteria_json.Begin(); ret && (it != monitoringCriteria_json.End()); ++it)
        {
            ocpp::types::ocpp20::MonitoringCriterionEnumType& item = data.monitoringCriteria.emplace_back();
            item = ocpp::types::ocpp20::MonitoringCriterionEnumTypeHelper.fromString(it->GetString());
        }
    }

    if (!ret)
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_TYPE_CONSTRAINT_VIOLATION;
    }

    return ret;
}

/** @brief Convert a GetMonitoringReportReq to a JSON representation */
bool GetMonitoringReportReqConverter::toJson(const GetMonitoringReportReq& data, rapidjson::Document& json)
{
    bool ret = true;

    // customData
    if (data.customData.isSet())
    {
        ocpp::types::ocpp20::CustomDataTypeConverter customData_converter;
        customData_converter.setAllocator(allocator);
        rapidjson::Document customData_doc(rapidjson::kObjectType);
        ret = ret && customData_converter.toJson(data.customData, customData_doc);
        json.AddMember(rapidjson::StringRef("customData"), customData_doc.Move(), *allocator);
    }

    // componentVariable
    if (!data.componentVariable.empty())
    {

        rapidjson::Value                                    componentVariable_json(rapidjson::kArrayType);
        ocpp::types::ocpp20::ComponentVariableTypeConverter componentVariable_converter;
        componentVariable_converter.setAllocator(allocator);
        for (const ocpp::types::ocpp20::ComponentVariableType& item : data.componentVariable)
        {
            rapidjson::Document item_doc(rapidjson::kObjectType);
            ret = ret && componentVariable_converter.toJson(item, item_doc);
            componentVariable_json.PushBack(item_doc.Move(), *allocator);
        }
        json.AddMember(rapidjson::StringRef("componentVariable"), componentVariable_json.Move(), *allocator);
    }

    // requestId
    fill(json, "requestId", data.requestId);

    // monitoringCriteria
    if (!data.monitoringCriteria.empty())
    {

        rapidjson::Value monitoringCriteria_json(rapidjson::kArrayType);
        for (const ocpp::types::ocpp20::MonitoringCriterionEnumType& item : data.monitoringCriteria)
        {
            monitoringCriteria_json.PushBack(
                rapidjson::Value(ocpp::types::ocpp20::MonitoringCriterionEnumTypeHelper.toString(item).c_str(), *allocator).Move(),
                *allocator);
        }
        json.AddMember(rapidjson::StringRef("monitoringCriteria"), monitoringCriteria_json.Move(), *allocator);
    }

    return ret;
}

/** @brief Convert a GetMonitoringReportConf from a JSON representation */
bool GetMonitoringReportConfConverter::fromJson(const rapidjson::Value&  json,
                                                GetMonitoringReportConf& data,
                                                std::string&             error_code,
                                                std::string&             error_message)
{
    bool ret = true;

    // customData
    if (json.HasMember("customData"))
    {
        ocpp::types::ocpp20::CustomDataTypeConverter customData_converter;
        ret = ret && customData_converter.fromJson(json["customData"], data.customData, error_code, error_message);
    }

    // status
    data.status = ocpp::types::ocpp20::GenericDeviceModelStatusEnumTypeHelper.fromString(json["status"].GetString());

    // statusInfo
    if (json.HasMember("statusInfo"))
    {
        ocpp::types::ocpp20::StatusInfoTypeConverter statusInfo_converter;
        ret = ret && statusInfo_converter.fromJson(json["statusInfo"], data.statusInfo, error_code, error_message);
    }

    if (!ret)
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_TYPE_CONSTRAINT_VIOLATION;
    }

    return ret;
}

/** @brief Convert a GetMonitoringReportConf to a JSON representation */
bool GetMonitoringReportConfConverter::toJson(const GetMonitoringReportConf& data, rapidjson::Document& json)
{
    bool ret = true;

    // customData
    if (data.customData.isSet())
    {
        ocpp::types::ocpp20::CustomDataTypeConverter customData_converter;
        customData_converter.setAllocator(allocator);
        rapidjson::Document customData_doc(rapidjson::kObjectType);
        ret = ret && customData_converter.toJson(data.customData, customData_doc);
        json.AddMember(rapidjson::StringRef("customData"), customData_doc.Move(), *allocator);
    }

    // status
    fill(json, "status", ocpp::types::ocpp20::GenericDeviceModelStatusEnumTypeHelper.toString(data.status));

    // statusInfo
    if (data.statusInfo.isSet())
    {
        ocpp::types::ocpp20::StatusInfoTypeConverter statusInfo_converter;
        statusInfo_converter.setAllocator(allocator);
        rapidjson::Document statusInfo_doc(rapidjson::kObjectType);
        ret = ret && statusInfo_converter.toJson(data.statusInfo, statusInfo_doc);
        json.AddMember(rapidjson::StringRef("statusInfo"), statusInfo_doc.Move(), *allocator);
    }

    return ret;
}

} // namespace ocpp20
} // namespace messages
} // namespace ocpp