/*
Copyright (c) 2020 Cedric Jimenez
This file is part of OpenOCPP.

OpenOCPP is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 2.1 of the License, or
(at your option) any later version.

OpenOCPP is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OpenOCPP. If not, see <http://www.gnu.org/licenses/>.
*/

/*
    Generated by json2cpp from : urn:OCPP:Cp:2:2020:3:NotifyEVChargingScheduleRequest
                                 OCPP 2.0.1 FINAL
*/

#include "NotifyEVChargingSchedule20.h"

#include "IRpc.h"

namespace ocpp
{
namespace messages
{
namespace ocpp20
{

/** @brief Convert a NotifyEVChargingScheduleReq from a JSON representation */
bool NotifyEVChargingScheduleReqConverter::fromJson(const rapidjson::Value&      json,
                                                    NotifyEVChargingScheduleReq& data,
                                                    std::string&                 error_code,
                                                    std::string&                 error_message)
{
    bool ret = true;

    // customData
    if (json.HasMember("customData"))
    {
        ocpp::types::ocpp20::CustomDataTypeConverter customData_converter;
        ret = ret && customData_converter.fromJson(json["customData"], data.customData, error_code, error_message);
    }

    // timeBase
    ret = ret && extract(json, "timeBase", data.timeBase, error_message);

    // chargingSchedule
    ocpp::types::ocpp20::ChargingScheduleTypeConverter chargingSchedule_converter;
    ret = ret && chargingSchedule_converter.fromJson(json["chargingSchedule"], data.chargingSchedule, error_code, error_message);

    // evseId
    extract(json, "evseId", data.evseId);

    if (!ret)
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_TYPE_CONSTRAINT_VIOLATION;
    }

    return ret;
}

/** @brief Convert a NotifyEVChargingScheduleReq to a JSON representation */
bool NotifyEVChargingScheduleReqConverter::toJson(const NotifyEVChargingScheduleReq& data, rapidjson::Document& json)
{
    bool ret = true;

    // customData
    if (data.customData.isSet())
    {
        ocpp::types::ocpp20::CustomDataTypeConverter customData_converter;
        customData_converter.setAllocator(allocator);
        rapidjson::Document customData_doc(rapidjson::kObjectType);
        ret = ret && customData_converter.toJson(data.customData, customData_doc);
        json.AddMember(rapidjson::StringRef("customData"), customData_doc.Move(), *allocator);
    }

    // timeBase
    fill(json, "timeBase", data.timeBase);

    // chargingSchedule
    ocpp::types::ocpp20::ChargingScheduleTypeConverter chargingSchedule_converter;
    chargingSchedule_converter.setAllocator(allocator);
    rapidjson::Document chargingSchedule_doc(rapidjson::kObjectType);
    ret = ret && chargingSchedule_converter.toJson(data.chargingSchedule, chargingSchedule_doc);
    json.AddMember(rapidjson::StringRef("chargingSchedule"), chargingSchedule_doc.Move(), *allocator);

    // evseId
    fill(json, "evseId", data.evseId);

    return ret;
}

/** @brief Convert a NotifyEVChargingScheduleConf from a JSON representation */
bool NotifyEVChargingScheduleConfConverter::fromJson(const rapidjson::Value&       json,
                                                     NotifyEVChargingScheduleConf& data,
                                                     std::string&                  error_code,
                                                     std::string&                  error_message)
{
    bool ret = true;

    // customData
    if (json.HasMember("customData"))
    {
        ocpp::types::ocpp20::CustomDataTypeConverter customData_converter;
        ret = ret && customData_converter.fromJson(json["customData"], data.customData, error_code, error_message);
    }

    // status
    data.status = ocpp::types::ocpp20::GenericStatusEnumTypeHelper.fromString(json["status"].GetString());

    // statusInfo
    if (json.HasMember("statusInfo"))
    {
        ocpp::types::ocpp20::StatusInfoTypeConverter statusInfo_converter;
        ret = ret && statusInfo_converter.fromJson(json["statusInfo"], data.statusInfo, error_code, error_message);
    }

    if (!ret)
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_TYPE_CONSTRAINT_VIOLATION;
    }

    return ret;
}

/** @brief Convert a NotifyEVChargingScheduleConf to a JSON representation */
bool NotifyEVChargingScheduleConfConverter::toJson(const NotifyEVChargingScheduleConf& data, rapidjson::Document& json)
{
    bool ret = true;

    // customData
    if (data.customData.isSet())
    {
        ocpp::types::ocpp20::CustomDataTypeConverter customData_converter;
        customData_converter.setAllocator(allocator);
        rapidjson::Document customData_doc(rapidjson::kObjectType);
        ret = ret && customData_converter.toJson(data.customData, customData_doc);
        json.AddMember(rapidjson::StringRef("customData"), customData_doc.Move(), *allocator);
    }

    // status
    fill(json, "status", ocpp::types::ocpp20::GenericStatusEnumTypeHelper.toString(data.status));

    // statusInfo
    if (data.statusInfo.isSet())
    {
        ocpp::types::ocpp20::StatusInfoTypeConverter statusInfo_converter;
        statusInfo_converter.setAllocator(allocator);
        rapidjson::Document statusInfo_doc(rapidjson::kObjectType);
        ret = ret && statusInfo_converter.toJson(data.statusInfo, statusInfo_doc);
        json.AddMember(rapidjson::StringRef("statusInfo"), statusInfo_doc.Move(), *allocator);
    }

    return ret;
}

} // namespace ocpp20
} // namespace messages
} // namespace ocpp