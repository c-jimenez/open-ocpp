/*
Copyright (c) 2020 Cedric Jimenez
This file is part of OpenOCPP.

OpenOCPP is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 2.1 of the License, or
(at your option) any later version.

OpenOCPP is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OpenOCPP. If not, see <http://www.gnu.org/licenses/>.
*/

/*
    Generated by json2cpp from : urn:OCPP:Cp:2:2020:3:PublishFirmwareStatusNotificationRequest
                                 OCPP 2.0.1 FINAL
*/

#include "PublishFirmwareStatusNotification.h"

#include "IRpc.h"

namespace ocpp
{
namespace messages
{
namespace ocpp20
{

/** @brief Convert a PublishFirmwareStatusNotificationReq from a JSON representation */
bool PublishFirmwareStatusNotificationReqConverter::fromJson(const rapidjson::Value&               json,
                                                             PublishFirmwareStatusNotificationReq& data,
                                                             std::string&                          error_code,
                                                             std::string&                          error_message)
{
    bool ret = true;

    // customData
    if (json.HasMember("customData"))
    {
        ocpp::types::ocpp20::CustomDataTypeConverter customData_converter;
        ret = ret && customData_converter.fromJson(json["customData"], data.customData, error_code, error_message);
    }

    // status
    data.status = ocpp::types::ocpp20::PublishFirmwareStatusEnumTypeHelper.fromString(json["status"].GetString());

    // location
    const rapidjson::Value& location_json = json["location"];
    for (auto it = location_json.Begin(); ret && (it != location_json.End()); ++it)
    {
        std::string& item = data.location.emplace_back();
        item              = it->GetString();
    }

    // requestId
    extract(json, "requestId", data.requestId);

    if (!ret)
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_TYPE_CONSTRAINT_VIOLATION;
    }

    return ret;
}

/** @brief Convert a PublishFirmwareStatusNotificationReq to a JSON representation */
bool PublishFirmwareStatusNotificationReqConverter::toJson(const PublishFirmwareStatusNotificationReq& data, rapidjson::Document& json)
{
    bool ret = true;

    // customData
    if (data.customData.isSet())
    {
        ocpp::types::ocpp20::CustomDataTypeConverter customData_converter;
        customData_converter.setAllocator(allocator);
        rapidjson::Document customData_doc;
        customData_doc.Parse("{}");
        ret = ret && customData_converter.toJson(data.customData, customData_doc);
        json.AddMember(rapidjson::StringRef("customData"), customData_doc.Move(), *allocator);
    }

    // status
    fill(json, "status", ocpp::types::ocpp20::PublishFirmwareStatusEnumTypeHelper.toString(data.status));

    // location
    if (!data.location.empty())
    {
        rapidjson::Value location_json(rapidjson::kArrayType);
        for (const std::string& item : data.location)
        {
            location_json.PushBack(rapidjson::Value(item.c_str(), *allocator).Move(), *allocator);
        }
        json.AddMember(rapidjson::StringRef("location"), location_json.Move(), *allocator);
    }

    // requestId
    fill(json, "requestId", data.requestId);

    return ret;
}

/** @brief Convert a PublishFirmwareStatusNotificationConf from a JSON representation */
bool PublishFirmwareStatusNotificationConfConverter::fromJson(const rapidjson::Value&                json,
                                                              PublishFirmwareStatusNotificationConf& data,
                                                              std::string&                           error_code,
                                                              std::string&                           error_message)
{
    bool ret = true;

    // customData
    if (json.HasMember("customData"))
    {
        ocpp::types::ocpp20::CustomDataTypeConverter customData_converter;
        ret = ret && customData_converter.fromJson(json["customData"], data.customData, error_code, error_message);
    }

    if (!ret)
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_TYPE_CONSTRAINT_VIOLATION;
    }

    return ret;
}

/** @brief Convert a PublishFirmwareStatusNotificationConf to a JSON representation */
bool PublishFirmwareStatusNotificationConfConverter::toJson(const PublishFirmwareStatusNotificationConf& data, rapidjson::Document& json)
{
    bool ret = true;

    // customData
    if (data.customData.isSet())
    {
        ocpp::types::ocpp20::CustomDataTypeConverter customData_converter;
        customData_converter.setAllocator(allocator);
        rapidjson::Document customData_doc;
        customData_doc.Parse("{}");
        ret = ret && customData_converter.toJson(data.customData, customData_doc);
        json.AddMember(rapidjson::StringRef("customData"), customData_doc.Move(), *allocator);
    }

    return ret;
}

} // namespace ocpp20
} // namespace messages
} // namespace ocpp