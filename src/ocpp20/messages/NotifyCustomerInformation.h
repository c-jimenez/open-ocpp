/*
Copyright (c) 2020 Cedric Jimenez
This file is part of OpenOCPP.

OpenOCPP is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 2.1 of the License, or
(at your option) any later version.

OpenOCPP is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OpenOCPP. If not, see <http://www.gnu.org/licenses/>.
*/

/*
    Generated by json2cpp from : urn:OCPP:Cp:2:2020:3:NotifyCustomerInformationRequest
                                 OCPP 2.0.1 FINAL
*/

#ifndef OPENOCPP_NOTIFYCUSTOMERINFORMATION_H
#define OPENOCPP_NOTIFYCUSTOMERINFORMATION_H

#include "IMessageConverter.h"

#include "CustomDataType.h"

namespace ocpp
{
namespace messages
{
namespace ocpp20
{

/** @brief Action corresponding to the NotifyCustomerInformation messages */
static const std::string NOTIFYCUSTOMERINFORMATION_ACTION = "NotifyCustomerInformation";

/** @brief NotifyCustomerInformationReq message */
struct NotifyCustomerInformationReq
{
    /** @brief  */
    ocpp::types::Optional<ocpp::types::ocpp20::CustomDataType> customData;
    /** @brief (Part of) the requested data. No format specified in which the data is returned. Should be human readable. */
    ocpp::types::CiStringType<512u> data;
    /** @brief “to be continued” indicator. Indicates whether another part of the monitoringData follows in an upcoming notifyMonitoringReportRequest message. Default value when omitted is false. */
    ocpp::types::Optional<bool> tbc;
    /** @brief Sequence number of this message. First message starts at 0. */
    int seqNo;
    /** @brief Timestamp of the moment this message was generated at the Charging Station. */
    ocpp::types::DateTime generatedAt;
    /** @brief The Id of the request. */
    int requestId;
};

/** @brief NotifyCustomerInformationConf message */
struct NotifyCustomerInformationConf
{
    /** @brief  */
    ocpp::types::Optional<ocpp::types::ocpp20::CustomDataType> customData;
};

// Message converters
MESSAGE_CONVERTERS(NotifyCustomerInformation)

} // namespace ocpp20
} // namespace messages
} // namespace ocpp

#endif // OPENOCPP_NOTIFYCUSTOMERINFORMATION_H