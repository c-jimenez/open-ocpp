/*
Copyright (c) 2020 Cedric Jimenez
This file is part of OpenOCPP.

OpenOCPP is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 2.1 of the License, or
(at your option) any later version.

OpenOCPP is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OpenOCPP. If not, see <http://www.gnu.org/licenses/>.
*/

/*
    Generated by json2cpp from : urn:OCPP:Cp:2:2020:3:TransactionEventRequest
                                 OCPP 2.0.1 FINAL
*/

#include "TransactionEvent20.h"

#include "IRpc.h"

namespace ocpp
{
namespace messages
{
namespace ocpp20
{

/** @brief Convert a TransactionEventReq from a JSON representation */
bool TransactionEventReqConverter::fromJson(const rapidjson::Value& json,
                                            TransactionEventReq&    data,
                                            std::string&            error_code,
                                            std::string&            error_message)
{
    bool ret = true;

    // customData
    if (json.HasMember("customData"))
    {
        ocpp::types::ocpp20::CustomDataTypeConverter customData_converter;
        ret = ret && customData_converter.fromJson(json["customData"], data.customData, error_code, error_message);
    }

    // eventType
    data.eventType = ocpp::types::ocpp20::TransactionEventEnumTypeHelper.fromString(json["eventType"].GetString());

    // meterValue
    if (json.HasMember("meterValue"))
    {
        const rapidjson::Value&                      meterValue_json = json["meterValue"];
        ocpp::types::ocpp20::MeterValueTypeConverter meterValue_converter;
        for (auto it = meterValue_json.Begin(); ret && (it != meterValue_json.End()); ++it)
        {
            ocpp::types::ocpp20::MeterValueType& item = data.meterValue.emplace_back();
            ret                                       = ret && meterValue_converter.fromJson(*it, item, error_code, error_message);
        }
    }

    // timestamp
    ret = ret && extract(json, "timestamp", data.timestamp, error_message);

    // triggerReason
    data.triggerReason = ocpp::types::ocpp20::TriggerReasonEnumTypeHelper.fromString(json["triggerReason"].GetString());

    // seqNo
    extract(json, "seqNo", data.seqNo);

    // offline
    extract(json, "offline", data.offline);

    // numberOfPhasesUsed
    extract(json, "numberOfPhasesUsed", data.numberOfPhasesUsed);

    // cableMaxCurrent
    extract(json, "cableMaxCurrent", data.cableMaxCurrent);

    // reservationId
    extract(json, "reservationId", data.reservationId);

    // transactionInfo
    ocpp::types::ocpp20::TransactionTypeConverter transactionInfo_converter;
    ret = ret && transactionInfo_converter.fromJson(json["transactionInfo"], data.transactionInfo, error_code, error_message);

    // evse
    if (json.HasMember("evse"))
    {
        ocpp::types::ocpp20::EVSETypeConverter evse_converter;
        ret = ret && evse_converter.fromJson(json["evse"], data.evse, error_code, error_message);
    }

    // idToken
    if (json.HasMember("idToken"))
    {
        ocpp::types::ocpp20::IdTokenTypeConverter idToken_converter;
        ret = ret && idToken_converter.fromJson(json["idToken"], data.idToken, error_code, error_message);
    }

    if (!ret)
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_TYPE_CONSTRAINT_VIOLATION;
    }

    return ret;
}

/** @brief Convert a TransactionEventReq to a JSON representation */
bool TransactionEventReqConverter::toJson(const TransactionEventReq& data, rapidjson::Document& json)
{
    bool ret = true;

    // customData
    if (data.customData.isSet())
    {
        ocpp::types::ocpp20::CustomDataTypeConverter customData_converter;
        customData_converter.setAllocator(allocator);
        rapidjson::Document customData_doc;
        customData_doc.Parse("{}");
        ret = ret && customData_converter.toJson(data.customData, customData_doc);
        json.AddMember(rapidjson::StringRef("customData"), customData_doc.Move(), *allocator);
    }

    // eventType
    fill(json, "eventType", ocpp::types::ocpp20::TransactionEventEnumTypeHelper.toString(data.eventType));

    // meterValue
    if (!data.meterValue.empty())
    {

        rapidjson::Value                             meterValue_json(rapidjson::kArrayType);
        ocpp::types::ocpp20::MeterValueTypeConverter meterValue_converter;
        meterValue_converter.setAllocator(allocator);
        for (const ocpp::types::ocpp20::MeterValueType& item : data.meterValue)
        {
            rapidjson::Document item_doc;
            item_doc.Parse("{}");
            ret = ret && meterValue_converter.toJson(item, item_doc);
            meterValue_json.PushBack(item_doc.Move(), *allocator);
        }
        json.AddMember(rapidjson::StringRef("meterValue"), meterValue_json.Move(), *allocator);
    }

    // timestamp
    fill(json, "timestamp", data.timestamp);

    // triggerReason
    fill(json, "triggerReason", ocpp::types::ocpp20::TriggerReasonEnumTypeHelper.toString(data.triggerReason));

    // seqNo
    fill(json, "seqNo", data.seqNo);

    // offline
    fill(json, "offline", data.offline);

    // numberOfPhasesUsed
    fill(json, "numberOfPhasesUsed", data.numberOfPhasesUsed);

    // cableMaxCurrent
    fill(json, "cableMaxCurrent", data.cableMaxCurrent);

    // reservationId
    fill(json, "reservationId", data.reservationId);

    // transactionInfo
    ocpp::types::ocpp20::TransactionTypeConverter transactionInfo_converter;
    transactionInfo_converter.setAllocator(allocator);
    rapidjson::Document transactionInfo_doc;
    transactionInfo_doc.Parse("{}");
    ret = ret && transactionInfo_converter.toJson(data.transactionInfo, transactionInfo_doc);
    json.AddMember(rapidjson::StringRef("transactionInfo"), transactionInfo_doc.Move(), *allocator);

    // evse
    if (data.evse.isSet())
    {
        ocpp::types::ocpp20::EVSETypeConverter evse_converter;
        evse_converter.setAllocator(allocator);
        rapidjson::Document evse_doc;
        evse_doc.Parse("{}");
        ret = ret && evse_converter.toJson(data.evse, evse_doc);
        json.AddMember(rapidjson::StringRef("evse"), evse_doc.Move(), *allocator);
    }

    // idToken
    if (data.idToken.isSet())
    {
        ocpp::types::ocpp20::IdTokenTypeConverter idToken_converter;
        idToken_converter.setAllocator(allocator);
        rapidjson::Document idToken_doc;
        idToken_doc.Parse("{}");
        ret = ret && idToken_converter.toJson(data.idToken, idToken_doc);
        json.AddMember(rapidjson::StringRef("idToken"), idToken_doc.Move(), *allocator);
    }

    return ret;
}

/** @brief Convert a TransactionEventConf from a JSON representation */
bool TransactionEventConfConverter::fromJson(const rapidjson::Value& json,
                                             TransactionEventConf&   data,
                                             std::string&            error_code,
                                             std::string&            error_message)
{
    bool ret = true;

    // customData
    if (json.HasMember("customData"))
    {
        ocpp::types::ocpp20::CustomDataTypeConverter customData_converter;
        ret = ret && customData_converter.fromJson(json["customData"], data.customData, error_code, error_message);
    }

    // totalCost
    extract(json, "totalCost", data.totalCost);

    // chargingPriority
    extract(json, "chargingPriority", data.chargingPriority);

    // idTokenInfo
    if (json.HasMember("idTokenInfo"))
    {
        ocpp::types::ocpp20::IdTokenInfoTypeConverter idTokenInfo_converter;
        ret = ret && idTokenInfo_converter.fromJson(json["idTokenInfo"], data.idTokenInfo, error_code, error_message);
    }

    // updatedPersonalMessage
    if (json.HasMember("updatedPersonalMessage"))
    {
        ocpp::types::ocpp20::MessageContentTypeConverter updatedPersonalMessage_converter;
        ret = ret && updatedPersonalMessage_converter.fromJson(
                         json["updatedPersonalMessage"], data.updatedPersonalMessage, error_code, error_message);
    }

    if (!ret)
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_TYPE_CONSTRAINT_VIOLATION;
    }

    return ret;
}

/** @brief Convert a TransactionEventConf to a JSON representation */
bool TransactionEventConfConverter::toJson(const TransactionEventConf& data, rapidjson::Document& json)
{
    bool ret = true;

    // customData
    if (data.customData.isSet())
    {
        ocpp::types::ocpp20::CustomDataTypeConverter customData_converter;
        customData_converter.setAllocator(allocator);
        rapidjson::Document customData_doc;
        customData_doc.Parse("{}");
        ret = ret && customData_converter.toJson(data.customData, customData_doc);
        json.AddMember(rapidjson::StringRef("customData"), customData_doc.Move(), *allocator);
    }

    // totalCost
    fill(json, "totalCost", data.totalCost);

    // chargingPriority
    fill(json, "chargingPriority", data.chargingPriority);

    // idTokenInfo
    if (data.idTokenInfo.isSet())
    {
        ocpp::types::ocpp20::IdTokenInfoTypeConverter idTokenInfo_converter;
        idTokenInfo_converter.setAllocator(allocator);
        rapidjson::Document idTokenInfo_doc;
        idTokenInfo_doc.Parse("{}");
        ret = ret && idTokenInfo_converter.toJson(data.idTokenInfo, idTokenInfo_doc);
        json.AddMember(rapidjson::StringRef("idTokenInfo"), idTokenInfo_doc.Move(), *allocator);
    }

    // updatedPersonalMessage
    if (data.updatedPersonalMessage.isSet())
    {
        ocpp::types::ocpp20::MessageContentTypeConverter updatedPersonalMessage_converter;
        updatedPersonalMessage_converter.setAllocator(allocator);
        rapidjson::Document updatedPersonalMessage_doc;
        updatedPersonalMessage_doc.Parse("{}");
        ret = ret && updatedPersonalMessage_converter.toJson(data.updatedPersonalMessage, updatedPersonalMessage_doc);
        json.AddMember(rapidjson::StringRef("updatedPersonalMessage"), updatedPersonalMessage_doc.Move(), *allocator);
    }

    return ret;
}

} // namespace ocpp20
} // namespace messages
} // namespace ocpp