/*
Copyright (c) 2020 Cedric Jimenez
This file is part of OpenOCPP.

OpenOCPP is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 2.1 of the License, or
(at your option) any later version.

OpenOCPP is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OpenOCPP. If not, see <http://www.gnu.org/licenses/>.
*/

/*
    Generated by json2cpp from : urn:OCPP:Cp:2:2020:3:NotifyReportRequest
                                 OCPP 2.0.1 FINAL
*/

#ifndef OPENOCPP_NOTIFYREPORT_H
#define OPENOCPP_NOTIFYREPORT_H

#include "IMessageConverter.h"

#include "CustomDataType.h"
#include "ReportDataType.h"

namespace ocpp
{
namespace messages
{
namespace ocpp20
{

/** @brief Action corresponding to the NotifyReport messages */
static const std::string NOTIFYREPORT_ACTION = "NotifyReport";

/** @brief NotifyReportReq message */
struct NotifyReportReq
{
    /** @brief  */
    ocpp::types::Optional<ocpp::types::ocpp20::CustomDataType> customData;
    /** @brief The id of the GetReportRequest  or GetBaseReportRequest that requested this report */
    int requestId;
    /** @brief Timestamp of the moment this message was generated at the Charging Station. */
    ocpp::types::DateTime generatedAt;
    /** @brief  */
    std::vector<ocpp::types::ocpp20::ReportDataType> reportData;
    /** @brief “to be continued” indicator. Indicates whether another part of the report follows in an upcoming notifyReportRequest message. Default value when omitted is false. */
    ocpp::types::Optional<bool> tbc;
    /** @brief Sequence number of this message. First message starts at 0. */
    int seqNo;
};

/** @brief NotifyReportConf message */
struct NotifyReportConf
{
    /** @brief  */
    ocpp::types::Optional<ocpp::types::ocpp20::CustomDataType> customData;
};

// Message converters
MESSAGE_CONVERTERS(NotifyReport)

} // namespace ocpp20
} // namespace messages
} // namespace ocpp

#endif // OPENOCPP_NOTIFYREPORT_H