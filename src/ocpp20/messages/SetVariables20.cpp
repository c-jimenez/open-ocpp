/*
Copyright (c) 2020 Cedric Jimenez
This file is part of OpenOCPP.

OpenOCPP is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 2.1 of the License, or
(at your option) any later version.

OpenOCPP is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OpenOCPP. If not, see <http://www.gnu.org/licenses/>.
*/

/*
    Generated by json2cpp from : urn:OCPP:Cp:2:2020:3:SetVariablesRequest
                                 OCPP 2.0.1 FINAL
*/

#include "SetVariables20.h"

#include "IRpc.h"

namespace ocpp
{
namespace messages
{
namespace ocpp20
{

/** @brief Convert a SetVariables20Req from a JSON representation */
bool SetVariables20ReqConverter::fromJson(const rapidjson::Value& json,
                                          SetVariables20Req&      data,
                                          std::string&            error_code,
                                          std::string&            error_message)
{
    bool ret = true;

    // customData
    if (json.HasMember("customData"))
    {
        ocpp::types::ocpp20::CustomDataType20Converter customData_converter;
        ret = ret && customData_converter.fromJson(json["customData"], data.customData, error_code, error_message);
    }

    // setVariableData
    const rapidjson::Value&                             setVariableData_json = json["setVariableData"];
    ocpp::types::ocpp20::SetVariableDataType20Converter setVariableData_converter;
    for (auto it = setVariableData_json.Begin(); ret && (it != setVariableData_json.End()); ++it)
    {
        ocpp::types::ocpp20::SetVariableDataType20& item = data.setVariableData.emplace_back();
        ret                                              = ret && setVariableData_converter.fromJson(*it, item, error_code, error_message);
    }

    if (!ret)
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_TYPE_CONSTRAINT_VIOLATION;
    }

    return ret;
}

/** @brief Convert a SetVariables20Req to a JSON representation */
bool SetVariables20ReqConverter::toJson(const SetVariables20Req& data, rapidjson::Document& json)
{
    bool ret = true;

    // customData
    if (data.customData.isSet())
    {
        ocpp::types::ocpp20::CustomDataType20Converter customData_converter;
        customData_converter.setAllocator(allocator);
        rapidjson::Document customData_doc;
        customData_doc.Parse("{}");
        ret = ret && customData_converter.toJson(data.customData, customData_doc);
        json.AddMember(rapidjson::StringRef("customData"), customData_doc.Move(), *allocator);
    }

    // setVariableData
    if (!data.setVariableData.empty())
    {
        rapidjson::Value                                    setVariableData_json(rapidjson::kArrayType);
        ocpp::types::ocpp20::SetVariableDataType20Converter setVariableData_converter;
        setVariableData_converter.setAllocator(allocator);
        for (const ocpp::types::ocpp20::SetVariableDataType20& item : data.setVariableData)
        {
            rapidjson::Document item_doc;
            item_doc.Parse("{}");
            ret = ret && setVariableData_converter.toJson(item, item_doc);
            setVariableData_json.PushBack(item_doc.Move(), *allocator);
        }
        json.AddMember(rapidjson::StringRef("setVariableData"), setVariableData_json.Move(), *allocator);
    }

    return ret;
}

/** @brief Convert a SetVariables20Conf from a JSON representation */
bool SetVariables20ConfConverter::fromJson(const rapidjson::Value& json,
                                           SetVariables20Conf&     data,
                                           std::string&            error_code,
                                           std::string&            error_message)
{
    bool ret = true;

    // customData
    if (json.HasMember("customData"))
    {
        ocpp::types::ocpp20::CustomDataType20Converter customData_converter;
        ret = ret && customData_converter.fromJson(json["customData"], data.customData, error_code, error_message);
    }

    // setVariableResult
    const rapidjson::Value&                               setVariableResult_json = json["setVariableResult"];
    ocpp::types::ocpp20::SetVariableResultType20Converter setVariableResult_converter;
    for (auto it = setVariableResult_json.Begin(); ret && (it != setVariableResult_json.End()); ++it)
    {
        ocpp::types::ocpp20::SetVariableResultType20& item = data.setVariableResult.emplace_back();
        ret = ret && setVariableResult_converter.fromJson(*it, item, error_code, error_message);
    }

    if (!ret)
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_TYPE_CONSTRAINT_VIOLATION;
    }

    return ret;
}

/** @brief Convert a SetVariables20Conf to a JSON representation */
bool SetVariables20ConfConverter::toJson(const SetVariables20Conf& data, rapidjson::Document& json)
{
    bool ret = true;

    // customData
    if (data.customData.isSet())
    {
        ocpp::types::ocpp20::CustomDataType20Converter customData_converter;
        customData_converter.setAllocator(allocator);
        rapidjson::Document customData_doc;
        customData_doc.Parse("{}");
        ret = ret && customData_converter.toJson(data.customData, customData_doc);
        json.AddMember(rapidjson::StringRef("customData"), customData_doc.Move(), *allocator);
    }

    // setVariableResult
    if (!data.setVariableResult.empty())
    {
        rapidjson::Value                                      setVariableResult_json(rapidjson::kArrayType);
        ocpp::types::ocpp20::SetVariableResultType20Converter setVariableResult_converter;
        setVariableResult_converter.setAllocator(allocator);
        for (const ocpp::types::ocpp20::SetVariableResultType20& item : data.setVariableResult)
        {
            rapidjson::Document item_doc;
            item_doc.Parse("{}");
            ret = ret && setVariableResult_converter.toJson(item, item_doc);
            setVariableResult_json.PushBack(item_doc.Move(), *allocator);
        }
        json.AddMember(rapidjson::StringRef("setVariableResult"), setVariableResult_json.Move(), *allocator);
    }

    return ret;
}

} // namespace ocpp20
} // namespace messages
} // namespace ocpp