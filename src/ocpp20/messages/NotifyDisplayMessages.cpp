/*
Copyright (c) 2020 Cedric Jimenez
This file is part of OpenOCPP.

OpenOCPP is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 2.1 of the License, or
(at your option) any later version.

OpenOCPP is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OpenOCPP. If not, see <http://www.gnu.org/licenses/>.
*/

/*
    Generated by json2cpp from : urn:OCPP:Cp:2:2020:3:NotifyDisplayMessagesRequest
                                 OCPP 2.0.1 FINAL
*/

#include "NotifyDisplayMessages.h"

#include "IRpc.h"

namespace ocpp
{
namespace messages
{
namespace ocpp20
{

/** @brief Convert a NotifyDisplayMessagesReq from a JSON representation */
bool NotifyDisplayMessagesReqConverter::fromJson(const rapidjson::Value&       json,
                                     NotifyDisplayMessagesReq&                 data,
                                     std::string&                  error_code,
                                     std::string&                  error_message)
{
    bool ret = true;

    // customData
    if (json.HasMember("customData"))
    {
    ocpp::types::ocpp20::CustomDataTypeConverter customData_converter;
    ret = ret && customData_converter.fromJson(json["customData"], data.customData, error_code, error_message);
    }

    // messageInfo
    const rapidjson::Value& messageInfo_json = json["messageInfo"];
    ocpp::types::ocpp20::MessageInfoTypeConverter messageInfo_converter;
    for (auto it = messageInfo_json.Begin(); ret && (it != messageInfo_json.End()); ++it)
    {
        ocpp::types::ocpp20::MessageInfoType& item = data.messageInfo.emplace_back();
        ret = ret && messageInfo_converter.fromJson(*it, item, error_code, error_message);
    }

    // requestId
    extract(json, "requestId", data.requestId);

    // tbc
    extract(json, "tbc", data.tbc);

    if (!ret)
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_TYPE_CONSTRAINT_VIOLATION;
    }

    return ret;
}

/** @brief Convert a NotifyDisplayMessagesReq to a JSON representation */
bool NotifyDisplayMessagesReqConverter::toJson(const NotifyDisplayMessagesReq& data, rapidjson::Document& json) 
{
    bool ret = true;

    // customData
    if (data.customData.isSet())
    {
    ocpp::types::ocpp20::CustomDataTypeConverter customData_converter;
    customData_converter.setAllocator(allocator);
    rapidjson::Document customData_doc;
    customData_doc.Parse("{}");
    ret = ret && customData_converter.toJson(data.customData, customData_doc);
    json.AddMember(rapidjson::StringRef("customData"), customData_doc.Move(), *allocator);
    }

    // messageInfo
    if (!data.messageInfo.empty())
    {
        rapidjson::Value messageInfo_json(rapidjson::kArrayType);
        ocpp::types::ocpp20::MessageInfoTypeConverter messageInfo_converter;
        messageInfo_converter.setAllocator(allocator);
        for (const ocpp::types::ocpp20::MessageInfoType& item : data.messageInfo)
        {
            rapidjson::Document item_doc;
            item_doc.Parse("{}");
            ret = ret && messageInfo_converter.toJson(item, item_doc);
            messageInfo_json.PushBack(item_doc.Move(), *allocator);
        }
        json.AddMember(rapidjson::StringRef("messageInfo"), messageInfo_json.Move(), *allocator);
    }

    // requestId
    fill(json, "requestId", data.requestId);

    // tbc
    fill(json, "tbc", data.tbc);

    return ret;
}

/** @brief Convert a NotifyDisplayMessagesConf from a JSON representation */
bool NotifyDisplayMessagesConfConverter::fromJson(const rapidjson::Value&       json,
                                     NotifyDisplayMessagesConf&                 data,
                                     std::string&                  error_code,
                                     std::string&                  error_message)
{
    bool ret = true;

    // customData
    if (json.HasMember("customData"))
    {
    ocpp::types::ocpp20::CustomDataTypeConverter customData_converter;
    ret = ret && customData_converter.fromJson(json["customData"], data.customData, error_code, error_message);
    }

    if (!ret)
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_TYPE_CONSTRAINT_VIOLATION;
    }

    return ret;
}

/** @brief Convert a NotifyDisplayMessagesConf to a JSON representation */
bool NotifyDisplayMessagesConfConverter::toJson(const NotifyDisplayMessagesConf& data, rapidjson::Document& json) 
{
    bool ret = true;

    // customData
    if (data.customData.isSet())
    {
    ocpp::types::ocpp20::CustomDataTypeConverter customData_converter;
    customData_converter.setAllocator(allocator);
    rapidjson::Document customData_doc;
    customData_doc.Parse("{}");
    ret = ret && customData_converter.toJson(data.customData, customData_doc);
    json.AddMember(rapidjson::StringRef("customData"), customData_doc.Move(), *allocator);
    }

    return ret;
}

} // namespace ocpp20
} // namespace messages
} // namespace ocpp