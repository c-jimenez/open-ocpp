/*
Copyright (c) 2020 Cedric Jimenez
This file is part of OpenOCPP.

OpenOCPP is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 2.1 of the License, or
(at your option) any later version.

OpenOCPP is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OpenOCPP. If not, see <http://www.gnu.org/licenses/>.
*/

/*
    Generated by json2cpp from : urn:OCPP:Cp:2:2020:3:CustomerInformationRequest
                                 OCPP 2.0.1 FINAL
*/

#ifndef OPENOCPP_OCPP20_CUSTOMERINFORMATION_H
#define OPENOCPP_OCPP20_CUSTOMERINFORMATION_H

#include "IMessageConverter.h"

#include "CertificateHashDataType20.h"
#include "CustomDataType20.h"
#include "CustomerInformationStatusEnumType20.h"
#include "IdTokenType20.h"
#include "StatusInfoType20.h"

namespace ocpp
{
namespace messages
{
namespace ocpp20
{

/** @brief Action corresponding to the CustomerInformation messages */
static const std::string CUSTOMERINFORMATION_ACTION = "CustomerInformation";

/** @brief CustomerInformationReq message */
struct CustomerInformationReq
{
    /** @brief  */
    ocpp::types::Optional<ocpp::types::ocpp20::CustomDataType> customData;
    /** @brief  */
    ocpp::types::Optional<ocpp::types::ocpp20::CertificateHashDataType> customerCertificate;
    /** @brief  */
    ocpp::types::Optional<ocpp::types::ocpp20::IdTokenType> idToken;
    /** @brief The Id of the request. */
    int requestId;
    /** @brief Flag indicating whether the Charging Station should return NotifyCustomerInformationRequest messages containing information about the customer referred to. */
    bool report;
    /** @brief Flag indicating whether the Charging Station should clear all information about the customer referred to. */
    bool clear;
    /** @brief A (e.g. vendor specific) identifier of the customer this request refers to. This field contains a custom identifier other than IdToken and Certificate.
One of the possible identifiers (customerIdentifier, customerIdToken or customerCertificate) should be in the request message. */
    ocpp::types::Optional<ocpp::types::CiStringType<64u>> customerIdentifier;
};

/** @brief CustomerInformationConf message */
struct CustomerInformationConf
{
    /** @brief  */
    ocpp::types::Optional<ocpp::types::ocpp20::CustomDataType> customData;
    /** @brief  */
    ocpp::types::ocpp20::CustomerInformationStatusEnumType status;
    /** @brief  */
    ocpp::types::Optional<ocpp::types::ocpp20::StatusInfoType> statusInfo;
};

// Message converters
MESSAGE_CONVERTERS(CustomerInformation)

} // namespace ocpp20
} // namespace messages
} // namespace ocpp

#endif // OPENOCPP_OCPP20_CUSTOMERINFORMATION_H