/*
Copyright (c) 2020 Cedric Jimenez
This file is part of OpenOCPP.

OpenOCPP is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 2.1 of the License, or
(at your option) any later version.

OpenOCPP is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OpenOCPP. If not, see <http://www.gnu.org/licenses/>.
*/

/*
    Generated by json2cpp from : urn:OCPP:Cp:2:2020:3:NotifyReportRequest
                                 OCPP 2.0.1 FINAL
*/

#include "NotifyReport20.h"

#include "IRpc.h"

namespace ocpp
{
namespace messages
{
namespace ocpp20
{

/** @brief Convert a NotifyReport20Req from a JSON representation */
bool NotifyReport20ReqConverter::fromJson(const rapidjson::Value& json,
                                          NotifyReport20Req&      data,
                                          std::string&            error_code,
                                          std::string&            error_message)
{
    bool ret = true;

    // customData
    if (json.HasMember("customData"))
    {
        ocpp::types::ocpp20::CustomDataType20Converter customData_converter;
        ret = ret && customData_converter.fromJson(json["customData"], data.customData, error_code, error_message);
    }

    // requestId
    extract(json, "requestId", data.requestId);

    // generatedAt
    ret = ret && extract(json, "generatedAt", data.generatedAt, error_message);

    // reportData
    const rapidjson::Value&                        reportData_json = json["reportData"];
    ocpp::types::ocpp20::ReportDataType20Converter reportData_converter;
    for (auto it = reportData_json.Begin(); ret && (it != reportData_json.End()); ++it)
    {
        ocpp::types::ocpp20::ReportDataType20& item = data.reportData.emplace_back();
        ret                                         = ret && reportData_converter.fromJson(*it, item, error_code, error_message);
    }

    // tbc
    extract(json, "tbc", data.tbc);

    // seqNo
    extract(json, "seqNo", data.seqNo);

    if (!ret)
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_TYPE_CONSTRAINT_VIOLATION;
    }

    return ret;
}

/** @brief Convert a NotifyReport20Req to a JSON representation */
bool NotifyReport20ReqConverter::toJson(const NotifyReport20Req& data, rapidjson::Document& json)
{
    bool ret = true;

    // customData
    if (data.customData.isSet())
    {
        ocpp::types::ocpp20::CustomDataType20Converter customData_converter;
        customData_converter.setAllocator(allocator);
        rapidjson::Document customData_doc;
        customData_doc.Parse("{}");
        ret = ret && customData_converter.toJson(data.customData, customData_doc);
        json.AddMember(rapidjson::StringRef("customData"), customData_doc.Move(), *allocator);
    }

    // requestId
    fill(json, "requestId", data.requestId);

    // generatedAt
    fill(json, "generatedAt", data.generatedAt);

    // reportData
    if (!data.reportData.empty())
    {
        rapidjson::Value                               reportData_json(rapidjson::kArrayType);
        ocpp::types::ocpp20::ReportDataType20Converter reportData_converter;
        reportData_converter.setAllocator(allocator);
        for (const ocpp::types::ocpp20::ReportDataType20& item : data.reportData)
        {
            rapidjson::Document item_doc;
            item_doc.Parse("{}");
            ret = ret && reportData_converter.toJson(item, item_doc);
            reportData_json.PushBack(item_doc.Move(), *allocator);
        }
        json.AddMember(rapidjson::StringRef("reportData"), reportData_json.Move(), *allocator);
    }

    // tbc
    fill(json, "tbc", data.tbc);

    // seqNo
    fill(json, "seqNo", data.seqNo);

    return ret;
}

/** @brief Convert a NotifyReport20Conf from a JSON representation */
bool NotifyReport20ConfConverter::fromJson(const rapidjson::Value& json,
                                           NotifyReport20Conf&     data,
                                           std::string&            error_code,
                                           std::string&            error_message)
{
    bool ret = true;

    // customData
    if (json.HasMember("customData"))
    {
        ocpp::types::ocpp20::CustomDataType20Converter customData_converter;
        ret = ret && customData_converter.fromJson(json["customData"], data.customData, error_code, error_message);
    }

    if (!ret)
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_TYPE_CONSTRAINT_VIOLATION;
    }

    return ret;
}

/** @brief Convert a NotifyReport20Conf to a JSON representation */
bool NotifyReport20ConfConverter::toJson(const NotifyReport20Conf& data, rapidjson::Document& json)
{
    bool ret = true;

    // customData
    if (data.customData.isSet())
    {
        ocpp::types::ocpp20::CustomDataType20Converter customData_converter;
        customData_converter.setAllocator(allocator);
        rapidjson::Document customData_doc;
        customData_doc.Parse("{}");
        ret = ret && customData_converter.toJson(data.customData, customData_doc);
        json.AddMember(rapidjson::StringRef("customData"), customData_doc.Move(), *allocator);
    }

    return ret;
}

} // namespace ocpp20
} // namespace messages
} // namespace ocpp