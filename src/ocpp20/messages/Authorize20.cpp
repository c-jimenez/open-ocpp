/*
Copyright (c) 2020 Cedric Jimenez
This file is part of OpenOCPP.

OpenOCPP is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 2.1 of the License, or
(at your option) any later version.

OpenOCPP is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OpenOCPP. If not, see <http://www.gnu.org/licenses/>.
*/

/*
    Generated by json2cpp from : urn:OCPP:Cp:2:2020:3:AuthorizeRequest
                                 OCPP 2.0.1 FINAL
*/

#include "Authorize20.h"

#include "IRpc.h"

namespace ocpp
{
namespace messages
{
namespace ocpp20
{

/** @brief Convert a Authorize20Req from a JSON representation */
bool Authorize20ReqConverter::fromJson(const rapidjson::Value& json,
                                       Authorize20Req&         data,
                                       std::string&            error_code,
                                       std::string&            error_message)
{
    bool ret = true;

    // customData
    if (json.HasMember("customData"))
    {
        ocpp::types::ocpp20::CustomDataType20Converter customData_converter;
        ret = ret && customData_converter.fromJson(json["customData"], data.customData, error_code, error_message);
    }

    // idToken
    ocpp::types::ocpp20::IdTokenType20Converter idToken_converter;
    ret = ret && idToken_converter.fromJson(json["idToken"], data.idToken, error_code, error_message);

    // certificate
    extract(json, "certificate", data.certificate);

    // iso15118CertificateHashData
    const rapidjson::Value&                             iso15118CertificateHashData_json = json["iso15118CertificateHashData"];
    ocpp::types::ocpp20::OCSPRequestDataType20Converter iso15118CertificateHashData_converter;
    for (auto it = iso15118CertificateHashData_json.Begin(); ret && (it != iso15118CertificateHashData_json.End()); ++it)
    {
        ocpp::types::ocpp20::OCSPRequestDataType20& item = data.iso15118CertificateHashData.emplace_back();
        ret = ret && iso15118CertificateHashData_converter.fromJson(*it, item, error_code, error_message);
    }

    if (!ret)
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_TYPE_CONSTRAINT_VIOLATION;
    }

    return ret;
}

/** @brief Convert a Authorize20Req to a JSON representation */
bool Authorize20ReqConverter::toJson(const Authorize20Req& data, rapidjson::Document& json)
{
    bool ret = true;

    // customData
    if (data.customData.isSet())
    {
        ocpp::types::ocpp20::CustomDataType20Converter customData_converter;
        customData_converter.setAllocator(allocator);
        rapidjson::Document customData_doc;
        customData_doc.Parse("{}");
        ret = ret && customData_converter.toJson(data.customData, customData_doc);
        json.AddMember(rapidjson::StringRef("customData"), customData_doc.Move(), *allocator);
    }

    // idToken
    ocpp::types::ocpp20::IdTokenType20Converter idToken_converter;
    idToken_converter.setAllocator(allocator);
    rapidjson::Document idToken_doc;
    idToken_doc.Parse("{}");
    ret = ret && idToken_converter.toJson(data.idToken, idToken_doc);
    json.AddMember(rapidjson::StringRef("idToken"), idToken_doc.Move(), *allocator);

    // certificate
    fill(json, "certificate", data.certificate);

    // iso15118CertificateHashData
    if (!data.iso15118CertificateHashData.empty())
    {
        rapidjson::Value                                    iso15118CertificateHashData_json(rapidjson::kArrayType);
        ocpp::types::ocpp20::OCSPRequestDataType20Converter iso15118CertificateHashData_converter;
        iso15118CertificateHashData_converter.setAllocator(allocator);
        for (const ocpp::types::ocpp20::OCSPRequestDataType20& item : data.iso15118CertificateHashData)
        {
            rapidjson::Document item_doc;
            item_doc.Parse("{}");
            ret = ret && iso15118CertificateHashData_converter.toJson(item, item_doc);
            iso15118CertificateHashData_json.PushBack(item_doc.Move(), *allocator);
        }
        json.AddMember(rapidjson::StringRef("iso15118CertificateHashData"), iso15118CertificateHashData_json.Move(), *allocator);
    }

    return ret;
}

/** @brief Convert a Authorize20Conf from a JSON representation */
bool Authorize20ConfConverter::fromJson(const rapidjson::Value& json,
                                        Authorize20Conf&        data,
                                        std::string&            error_code,
                                        std::string&            error_message)
{
    bool ret = true;

    // customData
    if (json.HasMember("customData"))
    {
        ocpp::types::ocpp20::CustomDataType20Converter customData_converter;
        ret = ret && customData_converter.fromJson(json["customData"], data.customData, error_code, error_message);
    }

    // idTokenInfo
    ocpp::types::ocpp20::IdTokenInfoType20Converter idTokenInfo_converter;
    ret = ret && idTokenInfo_converter.fromJson(json["idTokenInfo"], data.idTokenInfo, error_code, error_message);

    // certificateStatus
    if (json.HasMember("certificateStatus"))
    {
        data.certificateStatus =
            ocpp::types::ocpp20::AuthorizeCertificateStatusEnumType20Helper.fromString(json["certificateStatus"].GetString());
    }

    if (!ret)
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_TYPE_CONSTRAINT_VIOLATION;
    }

    return ret;
}

/** @brief Convert a Authorize20Conf to a JSON representation */
bool Authorize20ConfConverter::toJson(const Authorize20Conf& data, rapidjson::Document& json)
{
    bool ret = true;

    // customData
    if (data.customData.isSet())
    {
        ocpp::types::ocpp20::CustomDataType20Converter customData_converter;
        customData_converter.setAllocator(allocator);
        rapidjson::Document customData_doc;
        customData_doc.Parse("{}");
        ret = ret && customData_converter.toJson(data.customData, customData_doc);
        json.AddMember(rapidjson::StringRef("customData"), customData_doc.Move(), *allocator);
    }

    // idTokenInfo
    ocpp::types::ocpp20::IdTokenInfoType20Converter idTokenInfo_converter;
    idTokenInfo_converter.setAllocator(allocator);
    rapidjson::Document idTokenInfo_doc;
    idTokenInfo_doc.Parse("{}");
    ret = ret && idTokenInfo_converter.toJson(data.idTokenInfo, idTokenInfo_doc);
    json.AddMember(rapidjson::StringRef("idTokenInfo"), idTokenInfo_doc.Move(), *allocator);

    // certificateStatus
    if (data.certificateStatus.isSet())
    {
        fill(json, "certificateStatus", ocpp::types::ocpp20::AuthorizeCertificateStatusEnumType20Helper.toString(data.certificateStatus));
    }

    return ret;
}

} // namespace ocpp20
} // namespace messages
} // namespace ocpp