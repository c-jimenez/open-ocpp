/*
Copyright (c) 2020 Cedric Jimenez
This file is part of OpenOCPP.

OpenOCPP is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 2.1 of the License, or
(at your option) any later version.

OpenOCPP is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OpenOCPP. If not, see <http://www.gnu.org/licenses/>.
*/

/*
    Generated by json2cpp from : urn:OCPP:Cp:2:2020:3:BootNotificationRequest
                                 OCPP 2.0.1 FINAL
*/

#ifndef OPENOCPP_BOOTNOTIFICATION20_H
#define OPENOCPP_BOOTNOTIFICATION20_H

#include "IMessageConverter.h"

#include "BootReasonEnumType20.h"
#include "ChargingStationType20.h"
#include "CustomDataType20.h"
#include "RegistrationStatusEnumType20.h"
#include "StatusInfoType20.h"

namespace ocpp
{
namespace messages
{
namespace ocpp20
{

/** @brief Action corresponding to the BootNotification20 messages */
static const std::string BOOTNOTIFICATION20_ACTION = "BootNotification";

/** @brief BootNotification20Req message */
struct BootNotification20Req
{
    /** @brief  */
    ocpp::types::Optional<ocpp::types::ocpp20::CustomDataType20> customData;
    /** @brief  */
    ocpp::types::ocpp20::ChargingStationType20 chargingStation;
    /** @brief  */
    ocpp::types::ocpp20::BootReasonEnumType20 reason;
};

/** @brief BootNotification20Conf message */
struct BootNotification20Conf
{
    /** @brief  */
    ocpp::types::Optional<ocpp::types::ocpp20::CustomDataType20> customData;
    /** @brief This contains the CSMSâ€™s current time. */
    ocpp::types::DateTime currentTime;
    /** @brief When &lt;&lt;cmn_registrationstatusenumtype,Status&gt;&gt; is Accepted, this contains the heartbeat interval in seconds. If the CSMS returns something other than Accepted, the value of the interval field indicates the minimum wait time before sending a next BootNotification request. */
    int interval;
    /** @brief  */
    ocpp::types::ocpp20::RegistrationStatusEnumType20 status;
    /** @brief  */
    ocpp::types::Optional<ocpp::types::ocpp20::StatusInfoType20> statusInfo;
};

// Message converters
MESSAGE_CONVERTERS(BootNotification20)

} // namespace ocpp20
} // namespace messages
} // namespace ocpp

#endif // OPENOCPP_BOOTNOTIFICATION20_H