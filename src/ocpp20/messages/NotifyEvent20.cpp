/*
Copyright (c) 2020 Cedric Jimenez
This file is part of OpenOCPP.

OpenOCPP is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 2.1 of the License, or
(at your option) any later version.

OpenOCPP is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OpenOCPP. If not, see <http://www.gnu.org/licenses/>.
*/

/*
    Generated by json2cpp from : urn:OCPP:Cp:2:2020:3:NotifyEventRequest
                                 OCPP 2.0.1 FINAL
*/

#include "NotifyEvent20.h"

#include "IRpc.h"

namespace ocpp
{
namespace messages
{
namespace ocpp20
{

/** @brief Convert a NotifyEventReq from a JSON representation */
bool NotifyEventReqConverter::fromJson(const rapidjson::Value& json,
                                       NotifyEventReq&         data,
                                       std::string&            error_code,
                                       std::string&            error_message)
{
    bool ret = true;

    // customData
    if (json.HasMember("customData"))
    {
        ocpp::types::ocpp20::CustomDataTypeConverter customData_converter;
        ret = ret && customData_converter.fromJson(json["customData"], data.customData, error_code, error_message);
    }

    // generatedAt
    ret = ret && extract(json, "generatedAt", data.generatedAt, error_message);

    // tbc
    extract(json, "tbc", data.tbc);

    // seqNo
    extract(json, "seqNo", data.seqNo);

    // eventData
    if (json.HasMember("eventData"))
    {
        const rapidjson::Value&                     eventData_json = json["eventData"];
        ocpp::types::ocpp20::EventDataTypeConverter eventData_converter;
        for (auto it = eventData_json.Begin(); ret && (it != eventData_json.End()); ++it)
        {
            ocpp::types::ocpp20::EventDataType& item = data.eventData.emplace_back();
            ret                                      = ret && eventData_converter.fromJson(*it, item, error_code, error_message);
        }
    }

    if (!ret)
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_TYPE_CONSTRAINT_VIOLATION;
    }

    return ret;
}

/** @brief Convert a NotifyEventReq to a JSON representation */
bool NotifyEventReqConverter::toJson(const NotifyEventReq& data, rapidjson::Document& json)
{
    bool ret = true;

    // customData
    if (data.customData.isSet())
    {
        ocpp::types::ocpp20::CustomDataTypeConverter customData_converter;
        customData_converter.setAllocator(allocator);
        rapidjson::Document customData_doc(rapidjson::kObjectType);
        ret = ret && customData_converter.toJson(data.customData, customData_doc);
        json.AddMember(rapidjson::StringRef("customData"), customData_doc.Move(), *allocator);
    }

    // generatedAt
    fill(json, "generatedAt", data.generatedAt);

    // tbc
    fill(json, "tbc", data.tbc);

    // seqNo
    fill(json, "seqNo", data.seqNo);

    // eventData

    rapidjson::Value                            eventData_json(rapidjson::kArrayType);
    ocpp::types::ocpp20::EventDataTypeConverter eventData_converter;
    eventData_converter.setAllocator(allocator);
    for (const ocpp::types::ocpp20::EventDataType& item : data.eventData)
    {
        rapidjson::Document item_doc(rapidjson::kObjectType);
        ret = ret && eventData_converter.toJson(item, item_doc);
        eventData_json.PushBack(item_doc.Move(), *allocator);
    }
    json.AddMember(rapidjson::StringRef("eventData"), eventData_json.Move(), *allocator);

    return ret;
}

/** @brief Convert a NotifyEventConf from a JSON representation */
bool NotifyEventConfConverter::fromJson(const rapidjson::Value& json,
                                        NotifyEventConf&        data,
                                        std::string&            error_code,
                                        std::string&            error_message)
{
    bool ret = true;

    // customData
    if (json.HasMember("customData"))
    {
        ocpp::types::ocpp20::CustomDataTypeConverter customData_converter;
        ret = ret && customData_converter.fromJson(json["customData"], data.customData, error_code, error_message);
    }

    if (!ret)
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_TYPE_CONSTRAINT_VIOLATION;
    }

    return ret;
}

/** @brief Convert a NotifyEventConf to a JSON representation */
bool NotifyEventConfConverter::toJson(const NotifyEventConf& data, rapidjson::Document& json)
{
    bool ret = true;

    // customData
    if (data.customData.isSet())
    {
        ocpp::types::ocpp20::CustomDataTypeConverter customData_converter;
        customData_converter.setAllocator(allocator);
        rapidjson::Document customData_doc(rapidjson::kObjectType);
        ret = ret && customData_converter.toJson(data.customData, customData_doc);
        json.AddMember(rapidjson::StringRef("customData"), customData_doc.Move(), *allocator);
    }

    return ret;
}

} // namespace ocpp20
} // namespace messages
} // namespace ocpp