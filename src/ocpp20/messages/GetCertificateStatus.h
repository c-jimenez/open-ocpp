/*
Copyright (c) 2020 Cedric Jimenez
This file is part of OpenOCPP.

OpenOCPP is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 2.1 of the License, or
(at your option) any later version.

OpenOCPP is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OpenOCPP. If not, see <http://www.gnu.org/licenses/>.
*/

/*
    Generated by json2cpp from : urn:OCPP:Cp:2:2020:3:GetCertificateStatusRequest
                                 OCPP 2.0.1 FINAL
*/

#ifndef OPENOCPP_GETCERTIFICATESTATUS_H
#define OPENOCPP_GETCERTIFICATESTATUS_H

#include "IMessageConverter.h"

#include "CustomDataType.h"
#include "GetCertificateStatusEnumType.h"
#include "OCSPRequestDataType.h"
#include "StatusInfoType.h"

namespace ocpp
{
namespace messages
{
namespace ocpp20
{

/** @brief Action corresponding to the GetCertificateStatus messages */
static const std::string GETCERTIFICATESTATUS_ACTION = "GetCertificateStatus";

/** @brief GetCertificateStatusReq message */
struct GetCertificateStatusReq
{
    /** @brief  */
    ocpp::types::Optional<ocpp::types::ocpp20::CustomDataType> customData;
    /** @brief  */
    ocpp::types::ocpp20::OCSPRequestDataType ocspRequestData;
};

/** @brief GetCertificateStatusConf message */
struct GetCertificateStatusConf
{
    /** @brief  */
    ocpp::types::Optional<ocpp::types::ocpp20::CustomDataType> customData;
    /** @brief  */
    ocpp::types::ocpp20::GetCertificateStatusEnumType status;
    /** @brief  */
    ocpp::types::Optional<ocpp::types::ocpp20::StatusInfoType> statusInfo;
    /** @brief OCSPResponse class as defined in &lt;&lt;ref-ocpp_security_24, IETF RFC 6960&gt;&gt;. DER encoded (as defined in &lt;&lt;ref-ocpp_security_24, IETF RFC 6960&gt;&gt;), and then base64 encoded. MAY only be omitted when status is not Accepted. */
    ocpp::types::Optional<ocpp::types::CiStringType<5500u>> ocspResult;
};

// Message converters
MESSAGE_CONVERTERS(GetCertificateStatus)

} // namespace ocpp20
} // namespace messages
} // namespace ocpp

#endif // OPENOCPP_GETCERTIFICATESTATUS_H