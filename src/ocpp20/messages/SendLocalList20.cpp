/*
Copyright (c) 2020 Cedric Jimenez
This file is part of OpenOCPP.

OpenOCPP is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 2.1 of the License, or
(at your option) any later version.

OpenOCPP is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OpenOCPP. If not, see <http://www.gnu.org/licenses/>.
*/

/*
    Generated by json2cpp from : urn:OCPP:Cp:2:2020:3:SendLocalListRequest
                                 OCPP 2.0.1 FINAL
*/

#include "SendLocalList20.h"

#include "IRpc.h"

namespace ocpp
{
namespace messages
{
namespace ocpp20
{

/** @brief Convert a SendLocalListReq from a JSON representation */
bool SendLocalListReqConverter::fromJson(const rapidjson::Value& json,
                                         SendLocalListReq&       data,
                                         std::string&            error_code,
                                         std::string&            error_message)
{
    bool ret = true;

    // customData
    if (json.HasMember("customData"))
    {
        ocpp::types::ocpp20::CustomDataTypeConverter customData_converter;
        ret = ret && customData_converter.fromJson(json["customData"], data.customData, error_code, error_message);
    }

    // localAuthorizationList
    if (json.HasMember("localAuthorizationList"))
    {
        const rapidjson::Value&                         localAuthorizationList_json = json["localAuthorizationList"];
        ocpp::types::ocpp20::AuthorizationDataConverter localAuthorizationList_converter;
        for (auto it = localAuthorizationList_json.Begin(); ret && (it != localAuthorizationList_json.End()); ++it)
        {
            ocpp::types::ocpp20::AuthorizationData& item = data.localAuthorizationList.emplace_back();
            ret = ret && localAuthorizationList_converter.fromJson(*it, item, error_code, error_message);
        }
    }

    // versionNumber
    extract(json, "versionNumber", data.versionNumber);

    // updateType
    data.updateType = ocpp::types::ocpp20::UpdateEnumTypeHelper.fromString(json["updateType"].GetString());

    if (!ret)
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_TYPE_CONSTRAINT_VIOLATION;
    }

    return ret;
}

/** @brief Convert a SendLocalListReq to a JSON representation */
bool SendLocalListReqConverter::toJson(const SendLocalListReq& data, rapidjson::Document& json)
{
    bool ret = true;

    // customData
    if (data.customData.isSet())
    {
        ocpp::types::ocpp20::CustomDataTypeConverter customData_converter;
        customData_converter.setAllocator(allocator);
        rapidjson::Document customData_doc;
        customData_doc.Parse("{}");
        ret = ret && customData_converter.toJson(data.customData, customData_doc);
        json.AddMember(rapidjson::StringRef("customData"), customData_doc.Move(), *allocator);
    }

    // localAuthorizationList
    if (!data.localAuthorizationList.empty())
    {

        rapidjson::Value                                localAuthorizationList_json(rapidjson::kArrayType);
        ocpp::types::ocpp20::AuthorizationDataConverter localAuthorizationList_converter;
        localAuthorizationList_converter.setAllocator(allocator);
        for (const ocpp::types::ocpp20::AuthorizationData& item : data.localAuthorizationList)
        {
            rapidjson::Document item_doc;
            item_doc.Parse("{}");
            ret = ret && localAuthorizationList_converter.toJson(item, item_doc);
            localAuthorizationList_json.PushBack(item_doc.Move(), *allocator);
        }
        json.AddMember(rapidjson::StringRef("localAuthorizationList"), localAuthorizationList_json.Move(), *allocator);
    }

    // versionNumber
    fill(json, "versionNumber", data.versionNumber);

    // updateType
    fill(json, "updateType", ocpp::types::ocpp20::UpdateEnumTypeHelper.toString(data.updateType));

    return ret;
}

/** @brief Convert a SendLocalListConf from a JSON representation */
bool SendLocalListConfConverter::fromJson(const rapidjson::Value& json,
                                          SendLocalListConf&      data,
                                          std::string&            error_code,
                                          std::string&            error_message)
{
    bool ret = true;

    // customData
    if (json.HasMember("customData"))
    {
        ocpp::types::ocpp20::CustomDataTypeConverter customData_converter;
        ret = ret && customData_converter.fromJson(json["customData"], data.customData, error_code, error_message);
    }

    // status
    data.status = ocpp::types::ocpp20::SendLocalListStatusEnumTypeHelper.fromString(json["status"].GetString());

    // statusInfo
    if (json.HasMember("statusInfo"))
    {
        ocpp::types::ocpp20::StatusInfoTypeConverter statusInfo_converter;
        ret = ret && statusInfo_converter.fromJson(json["statusInfo"], data.statusInfo, error_code, error_message);
    }

    if (!ret)
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_TYPE_CONSTRAINT_VIOLATION;
    }

    return ret;
}

/** @brief Convert a SendLocalListConf to a JSON representation */
bool SendLocalListConfConverter::toJson(const SendLocalListConf& data, rapidjson::Document& json)
{
    bool ret = true;

    // customData
    if (data.customData.isSet())
    {
        ocpp::types::ocpp20::CustomDataTypeConverter customData_converter;
        customData_converter.setAllocator(allocator);
        rapidjson::Document customData_doc;
        customData_doc.Parse("{}");
        ret = ret && customData_converter.toJson(data.customData, customData_doc);
        json.AddMember(rapidjson::StringRef("customData"), customData_doc.Move(), *allocator);
    }

    // status
    fill(json, "status", ocpp::types::ocpp20::SendLocalListStatusEnumTypeHelper.toString(data.status));

    // statusInfo
    if (data.statusInfo.isSet())
    {
        ocpp::types::ocpp20::StatusInfoTypeConverter statusInfo_converter;
        statusInfo_converter.setAllocator(allocator);
        rapidjson::Document statusInfo_doc;
        statusInfo_doc.Parse("{}");
        ret = ret && statusInfo_converter.toJson(data.statusInfo, statusInfo_doc);
        json.AddMember(rapidjson::StringRef("statusInfo"), statusInfo_doc.Move(), *allocator);
    }

    return ret;
}

} // namespace ocpp20
} // namespace messages
} // namespace ocpp