/*
Copyright (c) 2020 Cedric Jimenez
This file is part of OpenOCPP.

OpenOCPP is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 2.1 of the License, or
(at your option) any later version.

OpenOCPP is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OpenOCPP. If not, see <http://www.gnu.org/licenses/>.
*/

/*
    Generated by json2cpp from : urn:OCPP:Cp:2:2020:3:GetTransactionStatusRequest
                                 OCPP 2.0.1 FINAL
*/

#include "GetTransactionStatus20.h"

#include "IRpc.h"

namespace ocpp
{
namespace messages
{
namespace ocpp20
{

/** @brief Convert a GetTransactionStatusReq from a JSON representation */
bool GetTransactionStatusReqConverter::fromJson(const rapidjson::Value&  json,
                                                GetTransactionStatusReq& data,
                                                std::string&             error_code,
                                                std::string&             error_message)
{
    bool ret = true;

    // customData
    if (json.HasMember("customData"))
    {
        ocpp::types::ocpp20::CustomDataTypeConverter customData_converter;
        ret = ret && customData_converter.fromJson(json["customData"], data.customData, error_code, error_message);
    }

    // transactionId
    extract(json, "transactionId", data.transactionId);

    if (!ret)
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_TYPE_CONSTRAINT_VIOLATION;
    }

    return ret;
}

/** @brief Convert a GetTransactionStatusReq to a JSON representation */
bool GetTransactionStatusReqConverter::toJson(const GetTransactionStatusReq& data, rapidjson::Document& json)
{
    bool ret = true;

    // customData
    if (data.customData.isSet())
    {
        ocpp::types::ocpp20::CustomDataTypeConverter customData_converter;
        customData_converter.setAllocator(allocator);
        rapidjson::Document customData_doc(rapidjson::kObjectType);
        ret = ret && customData_converter.toJson(data.customData, customData_doc);
        json.AddMember(rapidjson::StringRef("customData"), customData_doc.Move(), *allocator);
    }

    // transactionId
    fill(json, "transactionId", data.transactionId);

    return ret;
}

/** @brief Convert a GetTransactionStatusConf from a JSON representation */
bool GetTransactionStatusConfConverter::fromJson(const rapidjson::Value&   json,
                                                 GetTransactionStatusConf& data,
                                                 std::string&              error_code,
                                                 std::string&              error_message)
{
    bool ret = true;

    // customData
    if (json.HasMember("customData"))
    {
        ocpp::types::ocpp20::CustomDataTypeConverter customData_converter;
        ret = ret && customData_converter.fromJson(json["customData"], data.customData, error_code, error_message);
    }

    // ongoingIndicator
    extract(json, "ongoingIndicator", data.ongoingIndicator);

    // messagesInQueue
    extract(json, "messagesInQueue", data.messagesInQueue);

    if (!ret)
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_TYPE_CONSTRAINT_VIOLATION;
    }

    return ret;
}

/** @brief Convert a GetTransactionStatusConf to a JSON representation */
bool GetTransactionStatusConfConverter::toJson(const GetTransactionStatusConf& data, rapidjson::Document& json)
{
    bool ret = true;

    // customData
    if (data.customData.isSet())
    {
        ocpp::types::ocpp20::CustomDataTypeConverter customData_converter;
        customData_converter.setAllocator(allocator);
        rapidjson::Document customData_doc(rapidjson::kObjectType);
        ret = ret && customData_converter.toJson(data.customData, customData_doc);
        json.AddMember(rapidjson::StringRef("customData"), customData_doc.Move(), *allocator);
    }

    // ongoingIndicator
    fill(json, "ongoingIndicator", data.ongoingIndicator);

    // messagesInQueue
    fill(json, "messagesInQueue", data.messagesInQueue);

    return ret;
}

} // namespace ocpp20
} // namespace messages
} // namespace ocpp