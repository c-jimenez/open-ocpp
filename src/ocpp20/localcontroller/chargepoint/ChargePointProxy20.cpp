/*
Copyright (c) 2020 Cedric Jimenez
This file is part of OpenOCPP.

OpenOCPP is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 2.1 of the License, or
(at your option) any later version.

OpenOCPP is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OpenOCPP. If not, see <http://www.gnu.org/licenses/>.
*/

/* Generated by json2cpp */

#include "ChargePointProxy20.h"
#include "../centralsystem/chargepoint/ChargePointProxy20.h"
#include "CentralSystemProxy20.h"
#include "ILocalControllerConfig20.h"
#include "ILocalControllerProxyEventsHandler20.h"
#include "MessagesConverter20.h"

using namespace ocpp::messages;
using namespace ocpp::messages::ocpp20;
using namespace ocpp::types;
using namespace ocpp::types::ocpp20;

namespace ocpp
{
namespace localcontroller
{
namespace ocpp20
{

/** @brief Instanciate local controller's charge point proxy from a central system's charge point proxy */
std::shared_ptr<IChargePointProxy20> IChargePointProxy20::createFrom(
    std::shared_ptr<ocpp::centralsystem::ocpp20::ICentralSystem20::IChargePoint20>& central_system_proxy,
    const ocpp::config::ILocalControllerConfig20&                                   stack_config,
    ocpp::rpc::RpcPool&                                                             rpc_pool)
{
    std::shared_ptr<IChargePointProxy20> proxy;

    // Instanciation can only be done from centralsytem::ChargePointProxy instance
    ocpp::centralsystem::ocpp20::ChargePointProxy20* cs_proxy =
        dynamic_cast<ocpp::centralsystem::ocpp20::ChargePointProxy20*>(central_system_proxy.get());
    if (cs_proxy)
    {
        // Create associated Central System proxy
        CentralSystemProxy20* centralsystem = new CentralSystemProxy20(
            cs_proxy->identifier(), cs_proxy->messagesValidator(), cs_proxy->messagesConverter(), stack_config, rpc_pool);

        // Create the proxy
        proxy = std::shared_ptr<IChargePointProxy20>(new ChargePointProxy20(cs_proxy->identifier(),
                                                                            cs_proxy->rpcClient(),
                                                                            cs_proxy->messagesValidator(),
                                                                            cs_proxy->messagesConverter(),
                                                                            stack_config,
                                                                            std::shared_ptr<ICentralSystemProxy20>(centralsystem)));

        // Associate both
        centralsystem->setChargePointProxy(proxy);

        // Unregister old proxy from RPC spy events
        cs_proxy->unregisterFromRpcSpy();
    }

    return proxy;
}

/** @brief Constructor */
ChargePointProxy20::ChargePointProxy20(const std::string&                                 identifier,
                                       std::shared_ptr<ocpp::rpc::RpcServer::Client>      rpc,
                                       const ocpp::messages::ocpp20::MessagesValidator20& messages_validator,
                                       ocpp::messages::ocpp20::MessagesConverter20&       messages_converter,
                                       const ocpp::config::ILocalControllerConfig20&      stack_config,
                                       std::shared_ptr<ICentralSystemProxy20>             central_system)
    : m_identifier(identifier),
      m_rpc(rpc),
      m_messages_converter(messages_converter),
      m_msg_dispatcher(messages_validator),
      m_msg_sender(*m_rpc, messages_converter, messages_validator, stack_config.callRequestTimeout()),
      m_central_system(central_system),
      m_handler(m_identifier, messages_converter, m_msg_dispatcher, *central_system.get()),
      m_listener(nullptr),
      m_user_handlers()
{
    m_rpc->registerSpy(*this);
    m_rpc->registerListener(*this);
}

/** @brief Destructor */
ChargePointProxy20::~ChargePointProxy20()
{
    // Disconnect from the charge point
    m_rpc->disconnect(false);

    // Disconnect from the central system
    m_central_system->disconnect();
}

// IChargePointProxy interface

/** @copydoc const std::string& IChargePointProxy::ipAddress() const */
const std::string& ChargePointProxy20::ipAddress() const
{
    return m_rpc->ipAddress();
}

/** @copydoc void IChargePointProxy::setTimeout(std::chrono::milliseconds) */
void ChargePointProxy20::setTimeout(std::chrono::milliseconds timeout)
{
    m_msg_sender.setTimeout(timeout);
}

/** @copydoc void IChargePointProxy::disconnect() */
void ChargePointProxy20::disconnect()
{
    // Disconnect from the charge point
    m_rpc->disconnect(true);

    // Disconnect from the central system
    m_central_system->disconnect();
}

// OCPP operations
/** @copydoc bool IChargePointProxy20::call(const ocpp::messages::ocpp20::CancelReservationReq&,
 *                                          ocpp::messages::ocpp20::CancelReservationConf&,
 *                                          std::string&,
 *                                          std::string&) */
bool ChargePointProxy20::call(const ocpp::messages::ocpp20::CancelReservationReq& request,
                              ocpp::messages::ocpp20::CancelReservationConf&      response,
                              std::string&                                        error,
                              std::string&                                        message)
{
    return call(CANCELRESERVATION_ACTION, request, response, error, message);
}
/** @copydoc bool IChargePointProxy20::call(const ocpp::messages::ocpp20::CertificateSignedReq&,
 *                                          ocpp::messages::ocpp20::CertificateSignedConf&,
 *                                          std::string&,
 *                                          std::string&) */
bool ChargePointProxy20::call(const ocpp::messages::ocpp20::CertificateSignedReq& request,
                              ocpp::messages::ocpp20::CertificateSignedConf&      response,
                              std::string&                                        error,
                              std::string&                                        message)
{
    return call(CERTIFICATESIGNED_ACTION, request, response, error, message);
}
/** @copydoc bool IChargePointProxy20::call(const ocpp::messages::ocpp20::ChangeAvailabilityReq&,
 *                                          ocpp::messages::ocpp20::ChangeAvailabilityConf&,
 *                                          std::string&,
 *                                          std::string&) */
bool ChargePointProxy20::call(const ocpp::messages::ocpp20::ChangeAvailabilityReq& request,
                              ocpp::messages::ocpp20::ChangeAvailabilityConf&      response,
                              std::string&                                         error,
                              std::string&                                         message)
{
    return call(CHANGEAVAILABILITY_ACTION, request, response, error, message);
}
/** @copydoc bool IChargePointProxy20::call(const ocpp::messages::ocpp20::ClearCacheReq&,
 *                                          ocpp::messages::ocpp20::ClearCacheConf&,
 *                                          std::string&,
 *                                          std::string&) */
bool ChargePointProxy20::call(const ocpp::messages::ocpp20::ClearCacheReq& request,
                              ocpp::messages::ocpp20::ClearCacheConf&      response,
                              std::string&                                 error,
                              std::string&                                 message)
{
    return call(CLEARCACHE_ACTION, request, response, error, message);
}
/** @copydoc bool IChargePointProxy20::call(const ocpp::messages::ocpp20::ClearChargingProfileReq&,
 *                                          ocpp::messages::ocpp20::ClearChargingProfileConf&,
 *                                          std::string&,
 *                                          std::string&) */
bool ChargePointProxy20::call(const ocpp::messages::ocpp20::ClearChargingProfileReq& request,
                              ocpp::messages::ocpp20::ClearChargingProfileConf&      response,
                              std::string&                                           error,
                              std::string&                                           message)
{
    return call(CLEARCHARGINGPROFILE_ACTION, request, response, error, message);
}
/** @copydoc bool IChargePointProxy20::call(const ocpp::messages::ocpp20::ClearDisplayMessageReq&,
 *                                          ocpp::messages::ocpp20::ClearDisplayMessageConf&,
 *                                          std::string&,
 *                                          std::string&) */
bool ChargePointProxy20::call(const ocpp::messages::ocpp20::ClearDisplayMessageReq& request,
                              ocpp::messages::ocpp20::ClearDisplayMessageConf&      response,
                              std::string&                                          error,
                              std::string&                                          message)
{
    return call(CLEARDISPLAYMESSAGE_ACTION, request, response, error, message);
}
/** @copydoc bool IChargePointProxy20::call(const ocpp::messages::ocpp20::ClearVariableMonitoringReq&,
 *                                          ocpp::messages::ocpp20::ClearVariableMonitoringConf&,
 *                                          std::string&,
 *                                          std::string&) */
bool ChargePointProxy20::call(const ocpp::messages::ocpp20::ClearVariableMonitoringReq& request,
                              ocpp::messages::ocpp20::ClearVariableMonitoringConf&      response,
                              std::string&                                              error,
                              std::string&                                              message)
{
    return call(CLEARVARIABLEMONITORING_ACTION, request, response, error, message);
}
/** @copydoc bool IChargePointProxy20::call(const ocpp::messages::ocpp20::CustomerInformationReq&,
 *                                          ocpp::messages::ocpp20::CustomerInformationConf&,
 *                                          std::string&,
 *                                          std::string&) */
bool ChargePointProxy20::call(const ocpp::messages::ocpp20::CustomerInformationReq& request,
                              ocpp::messages::ocpp20::CustomerInformationConf&      response,
                              std::string&                                          error,
                              std::string&                                          message)
{
    return call(CUSTOMERINFORMATION_ACTION, request, response, error, message);
}
/** @copydoc bool IChargePointProxy20::call(const ocpp::messages::ocpp20::DataTransferReq&,
 *                                          ocpp::messages::ocpp20::DataTransferConf&,
 *                                          std::string&,
 *                                          std::string&) */
bool ChargePointProxy20::call(const ocpp::messages::ocpp20::DataTransferReq& request,
                              ocpp::messages::ocpp20::DataTransferConf&      response,
                              std::string&                                   error,
                              std::string&                                   message)
{
    return call(DATATRANSFER_ACTION, request, response, error, message);
}
/** @copydoc bool IChargePointProxy20::call(const ocpp::messages::ocpp20::DeleteCertificateReq&,
 *                                          ocpp::messages::ocpp20::DeleteCertificateConf&,
 *                                          std::string&,
 *                                          std::string&) */
bool ChargePointProxy20::call(const ocpp::messages::ocpp20::DeleteCertificateReq& request,
                              ocpp::messages::ocpp20::DeleteCertificateConf&      response,
                              std::string&                                        error,
                              std::string&                                        message)
{
    return call(DELETECERTIFICATE_ACTION, request, response, error, message);
}
/** @copydoc bool IChargePointProxy20::call(const ocpp::messages::ocpp20::Get15118EVCertificateReq&,
 *                                          ocpp::messages::ocpp20::Get15118EVCertificateConf&,
 *                                          std::string&,
 *                                          std::string&) */
bool ChargePointProxy20::call(const ocpp::messages::ocpp20::Get15118EVCertificateReq& request,
                              ocpp::messages::ocpp20::Get15118EVCertificateConf&      response,
                              std::string&                                            error,
                              std::string&                                            message)
{
    return call(GET15118EVCERTIFICATE_ACTION, request, response, error, message);
}
/** @copydoc bool IChargePointProxy20::call(const ocpp::messages::ocpp20::GetBaseReportReq&,
 *                                          ocpp::messages::ocpp20::GetBaseReportConf&,
 *                                          std::string&,
 *                                          std::string&) */
bool ChargePointProxy20::call(const ocpp::messages::ocpp20::GetBaseReportReq& request,
                              ocpp::messages::ocpp20::GetBaseReportConf&      response,
                              std::string&                                    error,
                              std::string&                                    message)
{
    return call(GETBASEREPORT_ACTION, request, response, error, message);
}
/** @copydoc bool IChargePointProxy20::call(const ocpp::messages::ocpp20::GetCertificateStatusReq&,
 *                                          ocpp::messages::ocpp20::GetCertificateStatusConf&,
 *                                          std::string&,
 *                                          std::string&) */
bool ChargePointProxy20::call(const ocpp::messages::ocpp20::GetCertificateStatusReq& request,
                              ocpp::messages::ocpp20::GetCertificateStatusConf&      response,
                              std::string&                                           error,
                              std::string&                                           message)
{
    return call(GETCERTIFICATESTATUS_ACTION, request, response, error, message);
}
/** @copydoc bool IChargePointProxy20::call(const ocpp::messages::ocpp20::GetChargingProfilesReq&,
 *                                          ocpp::messages::ocpp20::GetChargingProfilesConf&,
 *                                          std::string&,
 *                                          std::string&) */
bool ChargePointProxy20::call(const ocpp::messages::ocpp20::GetChargingProfilesReq& request,
                              ocpp::messages::ocpp20::GetChargingProfilesConf&      response,
                              std::string&                                          error,
                              std::string&                                          message)
{
    return call(GETCHARGINGPROFILES_ACTION, request, response, error, message);
}
/** @copydoc bool IChargePointProxy20::call(const ocpp::messages::ocpp20::GetCompositeScheduleReq&,
 *                                          ocpp::messages::ocpp20::GetCompositeScheduleConf&,
 *                                          std::string&,
 *                                          std::string&) */
bool ChargePointProxy20::call(const ocpp::messages::ocpp20::GetCompositeScheduleReq& request,
                              ocpp::messages::ocpp20::GetCompositeScheduleConf&      response,
                              std::string&                                           error,
                              std::string&                                           message)
{
    return call(GETCOMPOSITESCHEDULE_ACTION, request, response, error, message);
}
/** @copydoc bool IChargePointProxy20::call(const ocpp::messages::ocpp20::GetDisplayMessagesReq&,
 *                                          ocpp::messages::ocpp20::GetDisplayMessagesConf&,
 *                                          std::string&,
 *                                          std::string&) */
bool ChargePointProxy20::call(const ocpp::messages::ocpp20::GetDisplayMessagesReq& request,
                              ocpp::messages::ocpp20::GetDisplayMessagesConf&      response,
                              std::string&                                         error,
                              std::string&                                         message)
{
    return call(GETDISPLAYMESSAGES_ACTION, request, response, error, message);
}
/** @copydoc bool IChargePointProxy20::call(const ocpp::messages::ocpp20::GetInstalledCertificateIdsReq&,
 *                                          ocpp::messages::ocpp20::GetInstalledCertificateIdsConf&,
 *                                          std::string&,
 *                                          std::string&) */
bool ChargePointProxy20::call(const ocpp::messages::ocpp20::GetInstalledCertificateIdsReq& request,
                              ocpp::messages::ocpp20::GetInstalledCertificateIdsConf&      response,
                              std::string&                                                 error,
                              std::string&                                                 message)
{
    return call(GETINSTALLEDCERTIFICATEIDS_ACTION, request, response, error, message);
}
/** @copydoc bool IChargePointProxy20::call(const ocpp::messages::ocpp20::GetLocalListVersionReq&,
 *                                          ocpp::messages::ocpp20::GetLocalListVersionConf&,
 *                                          std::string&,
 *                                          std::string&) */
bool ChargePointProxy20::call(const ocpp::messages::ocpp20::GetLocalListVersionReq& request,
                              ocpp::messages::ocpp20::GetLocalListVersionConf&      response,
                              std::string&                                          error,
                              std::string&                                          message)
{
    return call(GETLOCALLISTVERSION_ACTION, request, response, error, message);
}
/** @copydoc bool IChargePointProxy20::call(const ocpp::messages::ocpp20::GetLogReq&,
 *                                          ocpp::messages::ocpp20::GetLogConf&,
 *                                          std::string&,
 *                                          std::string&) */
bool ChargePointProxy20::call(const ocpp::messages::ocpp20::GetLogReq& request,
                              ocpp::messages::ocpp20::GetLogConf&      response,
                              std::string&                             error,
                              std::string&                             message)
{
    return call(GETLOG_ACTION, request, response, error, message);
}
/** @copydoc bool IChargePointProxy20::call(const ocpp::messages::ocpp20::GetMonitoringReportReq&,
 *                                          ocpp::messages::ocpp20::GetMonitoringReportConf&,
 *                                          std::string&,
 *                                          std::string&) */
bool ChargePointProxy20::call(const ocpp::messages::ocpp20::GetMonitoringReportReq& request,
                              ocpp::messages::ocpp20::GetMonitoringReportConf&      response,
                              std::string&                                          error,
                              std::string&                                          message)
{
    return call(GETMONITORINGREPORT_ACTION, request, response, error, message);
}
/** @copydoc bool IChargePointProxy20::call(const ocpp::messages::ocpp20::GetReportReq&,
 *                                          ocpp::messages::ocpp20::GetReportConf&,
 *                                          std::string&,
 *                                          std::string&) */
bool ChargePointProxy20::call(const ocpp::messages::ocpp20::GetReportReq& request,
                              ocpp::messages::ocpp20::GetReportConf&      response,
                              std::string&                                error,
                              std::string&                                message)
{
    return call(GETREPORT_ACTION, request, response, error, message);
}
/** @copydoc bool IChargePointProxy20::call(const ocpp::messages::ocpp20::GetTransactionStatusReq&,
 *                                          ocpp::messages::ocpp20::GetTransactionStatusConf&,
 *                                          std::string&,
 *                                          std::string&) */
bool ChargePointProxy20::call(const ocpp::messages::ocpp20::GetTransactionStatusReq& request,
                              ocpp::messages::ocpp20::GetTransactionStatusConf&      response,
                              std::string&                                           error,
                              std::string&                                           message)
{
    return call(GETTRANSACTIONSTATUS_ACTION, request, response, error, message);
}
/** @copydoc bool IChargePointProxy20::call(const ocpp::messages::ocpp20::GetVariablesReq&,
 *                                          ocpp::messages::ocpp20::GetVariablesConf&,
 *                                          std::string&,
 *                                          std::string&) */
bool ChargePointProxy20::call(const ocpp::messages::ocpp20::GetVariablesReq& request,
                              ocpp::messages::ocpp20::GetVariablesConf&      response,
                              std::string&                                   error,
                              std::string&                                   message)
{
    return call(GETVARIABLES_ACTION, request, response, error, message);
}
/** @copydoc bool IChargePointProxy20::call(const ocpp::messages::ocpp20::InstallCertificateReq&,
 *                                          ocpp::messages::ocpp20::InstallCertificateConf&,
 *                                          std::string&,
 *                                          std::string&) */
bool ChargePointProxy20::call(const ocpp::messages::ocpp20::InstallCertificateReq& request,
                              ocpp::messages::ocpp20::InstallCertificateConf&      response,
                              std::string&                                         error,
                              std::string&                                         message)
{
    return call(INSTALLCERTIFICATE_ACTION, request, response, error, message);
}
/** @copydoc bool IChargePointProxy20::call(const ocpp::messages::ocpp20::PublishFirmwareReq&,
 *                                          ocpp::messages::ocpp20::PublishFirmwareConf&,
 *                                          std::string&,
 *                                          std::string&) */
bool ChargePointProxy20::call(const ocpp::messages::ocpp20::PublishFirmwareReq& request,
                              ocpp::messages::ocpp20::PublishFirmwareConf&      response,
                              std::string&                                      error,
                              std::string&                                      message)
{
    return call(PUBLISHFIRMWARE_ACTION, request, response, error, message);
}
/** @copydoc bool IChargePointProxy20::call(const ocpp::messages::ocpp20::RequestStartTransactionReq&,
 *                                          ocpp::messages::ocpp20::RequestStartTransactionConf&,
 *                                          std::string&,
 *                                          std::string&) */
bool ChargePointProxy20::call(const ocpp::messages::ocpp20::RequestStartTransactionReq& request,
                              ocpp::messages::ocpp20::RequestStartTransactionConf&      response,
                              std::string&                                              error,
                              std::string&                                              message)
{
    return call(REQUESTSTARTTRANSACTION_ACTION, request, response, error, message);
}
/** @copydoc bool IChargePointProxy20::call(const ocpp::messages::ocpp20::RequestStopTransactionReq&,
 *                                          ocpp::messages::ocpp20::RequestStopTransactionConf&,
 *                                          std::string&,
 *                                          std::string&) */
bool ChargePointProxy20::call(const ocpp::messages::ocpp20::RequestStopTransactionReq& request,
                              ocpp::messages::ocpp20::RequestStopTransactionConf&      response,
                              std::string&                                             error,
                              std::string&                                             message)
{
    return call(REQUESTSTOPTRANSACTION_ACTION, request, response, error, message);
}
/** @copydoc bool IChargePointProxy20::call(const ocpp::messages::ocpp20::ReserveNowReq&,
 *                                          ocpp::messages::ocpp20::ReserveNowConf&,
 *                                          std::string&,
 *                                          std::string&) */
bool ChargePointProxy20::call(const ocpp::messages::ocpp20::ReserveNowReq& request,
                              ocpp::messages::ocpp20::ReserveNowConf&      response,
                              std::string&                                 error,
                              std::string&                                 message)
{
    return call(RESERVENOW_ACTION, request, response, error, message);
}
/** @copydoc bool IChargePointProxy20::call(const ocpp::messages::ocpp20::ResetReq&,
 *                                          ocpp::messages::ocpp20::ResetConf&,
 *                                          std::string&,
 *                                          std::string&) */
bool ChargePointProxy20::call(const ocpp::messages::ocpp20::ResetReq& request,
                              ocpp::messages::ocpp20::ResetConf&      response,
                              std::string&                            error,
                              std::string&                            message)
{
    return call(RESET_ACTION, request, response, error, message);
}
/** @copydoc bool IChargePointProxy20::call(const ocpp::messages::ocpp20::SendLocalListReq&,
 *                                          ocpp::messages::ocpp20::SendLocalListConf&,
 *                                          std::string&,
 *                                          std::string&) */
bool ChargePointProxy20::call(const ocpp::messages::ocpp20::SendLocalListReq& request,
                              ocpp::messages::ocpp20::SendLocalListConf&      response,
                              std::string&                                    error,
                              std::string&                                    message)
{
    return call(SENDLOCALLIST_ACTION, request, response, error, message);
}
/** @copydoc bool IChargePointProxy20::call(const ocpp::messages::ocpp20::SetChargingProfileReq&,
 *                                          ocpp::messages::ocpp20::SetChargingProfileConf&,
 *                                          std::string&,
 *                                          std::string&) */
bool ChargePointProxy20::call(const ocpp::messages::ocpp20::SetChargingProfileReq& request,
                              ocpp::messages::ocpp20::SetChargingProfileConf&      response,
                              std::string&                                         error,
                              std::string&                                         message)
{
    return call(SETCHARGINGPROFILE_ACTION, request, response, error, message);
}
/** @copydoc bool IChargePointProxy20::call(const ocpp::messages::ocpp20::SetDisplayMessageReq&,
 *                                          ocpp::messages::ocpp20::SetDisplayMessageConf&,
 *                                          std::string&,
 *                                          std::string&) */
bool ChargePointProxy20::call(const ocpp::messages::ocpp20::SetDisplayMessageReq& request,
                              ocpp::messages::ocpp20::SetDisplayMessageConf&      response,
                              std::string&                                        error,
                              std::string&                                        message)
{
    return call(SETDISPLAYMESSAGE_ACTION, request, response, error, message);
}
/** @copydoc bool IChargePointProxy20::call(const ocpp::messages::ocpp20::SetMonitoringBaseReq&,
 *                                          ocpp::messages::ocpp20::SetMonitoringBaseConf&,
 *                                          std::string&,
 *                                          std::string&) */
bool ChargePointProxy20::call(const ocpp::messages::ocpp20::SetMonitoringBaseReq& request,
                              ocpp::messages::ocpp20::SetMonitoringBaseConf&      response,
                              std::string&                                        error,
                              std::string&                                        message)
{
    return call(SETMONITORINGBASE_ACTION, request, response, error, message);
}
/** @copydoc bool IChargePointProxy20::call(const ocpp::messages::ocpp20::SetMonitoringLevelReq&,
 *                                          ocpp::messages::ocpp20::SetMonitoringLevelConf&,
 *                                          std::string&,
 *                                          std::string&) */
bool ChargePointProxy20::call(const ocpp::messages::ocpp20::SetMonitoringLevelReq& request,
                              ocpp::messages::ocpp20::SetMonitoringLevelConf&      response,
                              std::string&                                         error,
                              std::string&                                         message)
{
    return call(SETMONITORINGLEVEL_ACTION, request, response, error, message);
}
/** @copydoc bool IChargePointProxy20::call(const ocpp::messages::ocpp20::SetNetworkProfileReq&,
 *                                          ocpp::messages::ocpp20::SetNetworkProfileConf&,
 *                                          std::string&,
 *                                          std::string&) */
bool ChargePointProxy20::call(const ocpp::messages::ocpp20::SetNetworkProfileReq& request,
                              ocpp::messages::ocpp20::SetNetworkProfileConf&      response,
                              std::string&                                        error,
                              std::string&                                        message)
{
    return call(SETNETWORKPROFILE_ACTION, request, response, error, message);
}
/** @copydoc bool IChargePointProxy20::call(const ocpp::messages::ocpp20::SetVariableMonitoringReq&,
 *                                          ocpp::messages::ocpp20::SetVariableMonitoringConf&,
 *                                          std::string&,
 *                                          std::string&) */
bool ChargePointProxy20::call(const ocpp::messages::ocpp20::SetVariableMonitoringReq& request,
                              ocpp::messages::ocpp20::SetVariableMonitoringConf&      response,
                              std::string&                                            error,
                              std::string&                                            message)
{
    return call(SETVARIABLEMONITORING_ACTION, request, response, error, message);
}
/** @copydoc bool IChargePointProxy20::call(const ocpp::messages::ocpp20::SetVariablesReq&,
 *                                          ocpp::messages::ocpp20::SetVariablesConf&,
 *                                          std::string&,
 *                                          std::string&) */
bool ChargePointProxy20::call(const ocpp::messages::ocpp20::SetVariablesReq& request,
                              ocpp::messages::ocpp20::SetVariablesConf&      response,
                              std::string&                                   error,
                              std::string&                                   message)
{
    return call(SETVARIABLES_ACTION, request, response, error, message);
}
/** @copydoc bool IChargePointProxy20::call(const ocpp::messages::ocpp20::TriggerMessageReq&,
 *                                          ocpp::messages::ocpp20::TriggerMessageConf&,
 *                                          std::string&,
 *                                          std::string&) */
bool ChargePointProxy20::call(const ocpp::messages::ocpp20::TriggerMessageReq& request,
                              ocpp::messages::ocpp20::TriggerMessageConf&      response,
                              std::string&                                     error,
                              std::string&                                     message)
{
    return call(TRIGGERMESSAGE_ACTION, request, response, error, message);
}
/** @copydoc bool IChargePointProxy20::call(const ocpp::messages::ocpp20::UnlockConnectorReq&,
 *                                          ocpp::messages::ocpp20::UnlockConnectorConf&,
 *                                          std::string&,
 *                                          std::string&) */
bool ChargePointProxy20::call(const ocpp::messages::ocpp20::UnlockConnectorReq& request,
                              ocpp::messages::ocpp20::UnlockConnectorConf&      response,
                              std::string&                                      error,
                              std::string&                                      message)
{
    return call(UNLOCKCONNECTOR_ACTION, request, response, error, message);
}
/** @copydoc bool IChargePointProxy20::call(const ocpp::messages::ocpp20::UnpublishFirmwareReq&,
 *                                          ocpp::messages::ocpp20::UnpublishFirmwareConf&,
 *                                          std::string&,
 *                                          std::string&) */
bool ChargePointProxy20::call(const ocpp::messages::ocpp20::UnpublishFirmwareReq& request,
                              ocpp::messages::ocpp20::UnpublishFirmwareConf&      response,
                              std::string&                                        error,
                              std::string&                                        message)
{
    return call(UNPUBLISHFIRMWARE_ACTION, request, response, error, message);
}
/** @copydoc bool IChargePointProxy20::call(const ocpp::messages::ocpp20::UpdateFirmwareReq&,
 *                                          ocpp::messages::ocpp20::UpdateFirmwareConf&,
 *                                          std::string&,
 *                                          std::string&) */
bool ChargePointProxy20::call(const ocpp::messages::ocpp20::UpdateFirmwareReq& request,
                              ocpp::messages::ocpp20::UpdateFirmwareConf&      response,
                              std::string&                                     error,
                              std::string&                                     message)
{
    return call(UPDATEFIRMWARE_ACTION, request, response, error, message);
}
/** @copydoc bool IChargePointProxy20::registerHandler(
                      std::function<bool(const ocpp::messages::ocpp20::BootNotificationReq&, ocpp::messages::ocpp20::BootNotificationConf&, std::string&, std::string&)>) */
bool ChargePointProxy20::registerHandler(
    std::function<
        bool(const ocpp::messages::ocpp20::BootNotificationReq&, ocpp::messages::ocpp20::BootNotificationConf&, std::string&, std::string&)>
        handler)
{
    return registerHandler(BOOTNOTIFICATION_ACTION, handler);
}
/** @copydoc bool IChargePointProxy20::registerHandler(
                      std::function<bool(const ocpp::messages::ocpp20::AuthorizeReq&, ocpp::messages::ocpp20::AuthorizeConf&, std::string&, std::string&)>) */
bool ChargePointProxy20::registerHandler(
    std::function<bool(const ocpp::messages::ocpp20::AuthorizeReq&, ocpp::messages::ocpp20::AuthorizeConf&, std::string&, std::string&)>
        handler)
{
    return registerHandler(AUTHORIZE_ACTION, handler);
}
/** @copydoc bool IChargePointProxy20::registerHandler(
                      std::function<bool(const ocpp::messages::ocpp20::ClearedChargingLimitReq&, ocpp::messages::ocpp20::ClearedChargingLimitConf&, std::string&, std::string&)>) */
bool ChargePointProxy20::registerHandler(std::function<bool(const ocpp::messages::ocpp20::ClearedChargingLimitReq&,
                                                            ocpp::messages::ocpp20::ClearedChargingLimitConf&,
                                                            std::string&,
                                                            std::string&)> handler)
{
    return registerHandler(CLEAREDCHARGINGLIMIT_ACTION, handler);
}
/** @copydoc bool IChargePointProxy20::registerHandler(
                      std::function<bool(const ocpp::messages::ocpp20::CostUpdatedReq&, ocpp::messages::ocpp20::CostUpdatedConf&, std::string&, std::string&)>) */
bool ChargePointProxy20::registerHandler(
    std::function<bool(const ocpp::messages::ocpp20::CostUpdatedReq&, ocpp::messages::ocpp20::CostUpdatedConf&, std::string&, std::string&)>
        handler)
{
    return registerHandler(COSTUPDATED_ACTION, handler);
}
/** @copydoc bool IChargePointProxy20::registerHandler(
                      std::function<bool(const ocpp::messages::ocpp20::DataTransferReq&, ocpp::messages::ocpp20::DataTransferConf&, std::string&, std::string&)>) */
bool ChargePointProxy20::registerHandler(
    std::function<bool(
        const ocpp::messages::ocpp20::DataTransferReq&, ocpp::messages::ocpp20::DataTransferConf&, std::string&, std::string&)> handler)
{
    return registerHandler(DATATRANSFER_ACTION, handler);
}
/** @copydoc bool IChargePointProxy20::registerHandler(
                      std::function<bool(const ocpp::messages::ocpp20::FirmwareStatusNotificationReq&, ocpp::messages::ocpp20::FirmwareStatusNotificationConf&, std::string&, std::string&)>) */
bool ChargePointProxy20::registerHandler(std::function<bool(const ocpp::messages::ocpp20::FirmwareStatusNotificationReq&,
                                                            ocpp::messages::ocpp20::FirmwareStatusNotificationConf&,
                                                            std::string&,
                                                            std::string&)> handler)
{
    return registerHandler(FIRMWARESTATUSNOTIFICATION_ACTION, handler);
}
/** @copydoc bool IChargePointProxy20::registerHandler(
                      std::function<bool(const ocpp::messages::ocpp20::HeartbeatReq&, ocpp::messages::ocpp20::HeartbeatConf&, std::string&, std::string&)>) */
bool ChargePointProxy20::registerHandler(
    std::function<bool(const ocpp::messages::ocpp20::HeartbeatReq&, ocpp::messages::ocpp20::HeartbeatConf&, std::string&, std::string&)>
        handler)
{
    return registerHandler(HEARTBEAT_ACTION, handler);
}
/** @copydoc bool IChargePointProxy20::registerHandler(
                      std::function<bool(const ocpp::messages::ocpp20::LogStatusNotificationReq&, ocpp::messages::ocpp20::LogStatusNotificationConf&, std::string&, std::string&)>) */
bool ChargePointProxy20::registerHandler(std::function<bool(const ocpp::messages::ocpp20::LogStatusNotificationReq&,
                                                            ocpp::messages::ocpp20::LogStatusNotificationConf&,
                                                            std::string&,
                                                            std::string&)> handler)
{
    return registerHandler(LOGSTATUSNOTIFICATION_ACTION, handler);
}
/** @copydoc bool IChargePointProxy20::registerHandler(
                      std::function<bool(const ocpp::messages::ocpp20::MeterValuesReq&, ocpp::messages::ocpp20::MeterValuesConf&, std::string&, std::string&)>) */
bool ChargePointProxy20::registerHandler(
    std::function<bool(const ocpp::messages::ocpp20::MeterValuesReq&, ocpp::messages::ocpp20::MeterValuesConf&, std::string&, std::string&)>
        handler)
{
    return registerHandler(METERVALUES_ACTION, handler);
}
/** @copydoc bool IChargePointProxy20::registerHandler(
                      std::function<bool(const ocpp::messages::ocpp20::NotifyChargingLimitReq&, ocpp::messages::ocpp20::NotifyChargingLimitConf&, std::string&, std::string&)>) */
bool ChargePointProxy20::registerHandler(std::function<bool(const ocpp::messages::ocpp20::NotifyChargingLimitReq&,
                                                            ocpp::messages::ocpp20::NotifyChargingLimitConf&,
                                                            std::string&,
                                                            std::string&)> handler)
{
    return registerHandler(NOTIFYCHARGINGLIMIT_ACTION, handler);
}
/** @copydoc bool IChargePointProxy20::registerHandler(
                      std::function<bool(const ocpp::messages::ocpp20::NotifyCustomerInformationReq&, ocpp::messages::ocpp20::NotifyCustomerInformationConf&, std::string&, std::string&)>) */
bool ChargePointProxy20::registerHandler(std::function<bool(const ocpp::messages::ocpp20::NotifyCustomerInformationReq&,
                                                            ocpp::messages::ocpp20::NotifyCustomerInformationConf&,
                                                            std::string&,
                                                            std::string&)> handler)
{
    return registerHandler(NOTIFYCUSTOMERINFORMATION_ACTION, handler);
}
/** @copydoc bool IChargePointProxy20::registerHandler(
                      std::function<bool(const ocpp::messages::ocpp20::NotifyDisplayMessagesReq&, ocpp::messages::ocpp20::NotifyDisplayMessagesConf&, std::string&, std::string&)>) */
bool ChargePointProxy20::registerHandler(std::function<bool(const ocpp::messages::ocpp20::NotifyDisplayMessagesReq&,
                                                            ocpp::messages::ocpp20::NotifyDisplayMessagesConf&,
                                                            std::string&,
                                                            std::string&)> handler)
{
    return registerHandler(NOTIFYDISPLAYMESSAGES_ACTION, handler);
}
/** @copydoc bool IChargePointProxy20::registerHandler(
                      std::function<bool(const ocpp::messages::ocpp20::NotifyEVChargingNeedsReq&, ocpp::messages::ocpp20::NotifyEVChargingNeedsConf&, std::string&, std::string&)>) */
bool ChargePointProxy20::registerHandler(std::function<bool(const ocpp::messages::ocpp20::NotifyEVChargingNeedsReq&,
                                                            ocpp::messages::ocpp20::NotifyEVChargingNeedsConf&,
                                                            std::string&,
                                                            std::string&)> handler)
{
    return registerHandler(NOTIFYEVCHARGINGNEEDS_ACTION, handler);
}
/** @copydoc bool IChargePointProxy20::registerHandler(
                      std::function<bool(const ocpp::messages::ocpp20::NotifyEVChargingScheduleReq&, ocpp::messages::ocpp20::NotifyEVChargingScheduleConf&, std::string&, std::string&)>) */
bool ChargePointProxy20::registerHandler(std::function<bool(const ocpp::messages::ocpp20::NotifyEVChargingScheduleReq&,
                                                            ocpp::messages::ocpp20::NotifyEVChargingScheduleConf&,
                                                            std::string&,
                                                            std::string&)> handler)
{
    return registerHandler(NOTIFYEVCHARGINGSCHEDULE_ACTION, handler);
}
/** @copydoc bool IChargePointProxy20::registerHandler(
                      std::function<bool(const ocpp::messages::ocpp20::NotifyEventReq&, ocpp::messages::ocpp20::NotifyEventConf&, std::string&, std::string&)>) */
bool ChargePointProxy20::registerHandler(
    std::function<bool(const ocpp::messages::ocpp20::NotifyEventReq&, ocpp::messages::ocpp20::NotifyEventConf&, std::string&, std::string&)>
        handler)
{
    return registerHandler(NOTIFYEVENT_ACTION, handler);
}
/** @copydoc bool IChargePointProxy20::registerHandler(
                      std::function<bool(const ocpp::messages::ocpp20::NotifyMonitoringReportReq&, ocpp::messages::ocpp20::NotifyMonitoringReportConf&, std::string&, std::string&)>) */
bool ChargePointProxy20::registerHandler(std::function<bool(const ocpp::messages::ocpp20::NotifyMonitoringReportReq&,
                                                            ocpp::messages::ocpp20::NotifyMonitoringReportConf&,
                                                            std::string&,
                                                            std::string&)> handler)
{
    return registerHandler(NOTIFYMONITORINGREPORT_ACTION, handler);
}
/** @copydoc bool IChargePointProxy20::registerHandler(
                      std::function<bool(const ocpp::messages::ocpp20::NotifyReportReq&, ocpp::messages::ocpp20::NotifyReportConf&, std::string&, std::string&)>) */
bool ChargePointProxy20::registerHandler(
    std::function<bool(
        const ocpp::messages::ocpp20::NotifyReportReq&, ocpp::messages::ocpp20::NotifyReportConf&, std::string&, std::string&)> handler)
{
    return registerHandler(NOTIFYREPORT_ACTION, handler);
}
/** @copydoc bool IChargePointProxy20::registerHandler(
                      std::function<bool(const ocpp::messages::ocpp20::PublishFirmwareStatusNotificationReq&, ocpp::messages::ocpp20::PublishFirmwareStatusNotificationConf&, std::string&, std::string&)>) */
bool ChargePointProxy20::registerHandler(std::function<bool(const ocpp::messages::ocpp20::PublishFirmwareStatusNotificationReq&,
                                                            ocpp::messages::ocpp20::PublishFirmwareStatusNotificationConf&,
                                                            std::string&,
                                                            std::string&)> handler)
{
    return registerHandler(PUBLISHFIRMWARESTATUSNOTIFICATION_ACTION, handler);
}
/** @copydoc bool IChargePointProxy20::registerHandler(
                      std::function<bool(const ocpp::messages::ocpp20::ReportChargingProfilesReq&, ocpp::messages::ocpp20::ReportChargingProfilesConf&, std::string&, std::string&)>) */
bool ChargePointProxy20::registerHandler(std::function<bool(const ocpp::messages::ocpp20::ReportChargingProfilesReq&,
                                                            ocpp::messages::ocpp20::ReportChargingProfilesConf&,
                                                            std::string&,
                                                            std::string&)> handler)
{
    return registerHandler(REPORTCHARGINGPROFILES_ACTION, handler);
}
/** @copydoc bool IChargePointProxy20::registerHandler(
                      std::function<bool(const ocpp::messages::ocpp20::ReservationStatusUpdateReq&, ocpp::messages::ocpp20::ReservationStatusUpdateConf&, std::string&, std::string&)>) */
bool ChargePointProxy20::registerHandler(std::function<bool(const ocpp::messages::ocpp20::ReservationStatusUpdateReq&,
                                                            ocpp::messages::ocpp20::ReservationStatusUpdateConf&,
                                                            std::string&,
                                                            std::string&)> handler)
{
    return registerHandler(RESERVATIONSTATUSUPDATE_ACTION, handler);
}
/** @copydoc bool IChargePointProxy20::registerHandler(
                      std::function<bool(const ocpp::messages::ocpp20::SecurityEventNotificationReq&, ocpp::messages::ocpp20::SecurityEventNotificationConf&, std::string&, std::string&)>) */
bool ChargePointProxy20::registerHandler(std::function<bool(const ocpp::messages::ocpp20::SecurityEventNotificationReq&,
                                                            ocpp::messages::ocpp20::SecurityEventNotificationConf&,
                                                            std::string&,
                                                            std::string&)> handler)
{
    return registerHandler(SECURITYEVENTNOTIFICATION_ACTION, handler);
}
/** @copydoc bool IChargePointProxy20::registerHandler(
                      std::function<bool(const ocpp::messages::ocpp20::SignCertificateReq&, ocpp::messages::ocpp20::SignCertificateConf&, std::string&, std::string&)>) */
bool ChargePointProxy20::registerHandler(
    std::function<
        bool(const ocpp::messages::ocpp20::SignCertificateReq&, ocpp::messages::ocpp20::SignCertificateConf&, std::string&, std::string&)>
        handler)
{
    return registerHandler(SIGNCERTIFICATE_ACTION, handler);
}
/** @copydoc bool IChargePointProxy20::registerHandler(
                      std::function<bool(const ocpp::messages::ocpp20::StatusNotificationReq&, ocpp::messages::ocpp20::StatusNotificationConf&, std::string&, std::string&)>) */
bool ChargePointProxy20::registerHandler(
    std::function<bool(
        const ocpp::messages::ocpp20::StatusNotificationReq&, ocpp::messages::ocpp20::StatusNotificationConf&, std::string&, std::string&)>
        handler)
{
    return registerHandler(STATUSNOTIFICATION_ACTION, handler);
}
/** @copydoc bool IChargePointProxy20::registerHandler(
                      std::function<bool(const ocpp::messages::ocpp20::TransactionEventReq&, ocpp::messages::ocpp20::TransactionEventConf&, std::string&, std::string&)>) */
bool ChargePointProxy20::registerHandler(
    std::function<
        bool(const ocpp::messages::ocpp20::TransactionEventReq&, ocpp::messages::ocpp20::TransactionEventConf&, std::string&, std::string&)>
        handler)
{
    return registerHandler(TRANSACTIONEVENT_ACTION, handler);
}

// IRpc::IListener interface

/** @copydoc void IRpc::IListener::rpcDisconnected() */
void ChargePointProxy20::rpcDisconnected()
{
    LOG_WARNING << "[" << m_identifier << "] - Disconnected from Charge Point";

    // Disconnect from the central system
    m_central_system->disconnect();

    // Notify listener
    if (m_listener)
    {
        m_listener->disconnectedFromChargePoint();
    }
}

/** @copydoc void IRpc::IListener::rpcError() */
void ChargePointProxy20::rpcError()
{
    LOG_ERROR << "[" << m_identifier << "] - Connection error";
}

/** @copydoc bool IRpc::IListener::rpcCallReceived(const std::string&,
                                                   const rapidjson::Value&,
                                                   rapidjson::Document&,
                                                   std::string&,
                                                   std::string&) */
bool ChargePointProxy20::rpcCallReceived(const std::string&      action,
                                         const rapidjson::Value& payload,
                                         rapidjson::Document&    response,
                                         std::string&            error_code,
                                         std::string&            error_message)
{
    return m_msg_dispatcher.dispatchMessage(action, payload, response, error_code, error_message);
}

// IRpc::ISpy interface

/** @copydoc void IRpc::ISpy::rcpMessageReceived(const std::string& msg) */
void ChargePointProxy20::rcpMessageReceived(const std::string& msg)
{
    LOG_COM << "[" << m_identifier << "] - RX : " << msg;
}

void ChargePointProxy20::rcpMessageSent(const std::string& msg)
{
    LOG_COM << "[" << m_identifier << "] - TX : " << msg;
}

} // namespace ocpp20
} // namespace localcontroller
} // namespace ocpp