/*
Copyright (c) 2020 Cedric Jimenez
This file is part of OpenOCPP.

OpenOCPP is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 2.1 of the License, or
(at your option) any later version.

OpenOCPP is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OpenOCPP. If not, see <http://www.gnu.org/licenses/>.
*/

/* Generated by json2cpp */

#include "CentralSystemHandler20.h"
#include "ILocalControllerConfig20.h"
#include "MessageDispatcher.h"
#include "MessagesConverter20.h"

using namespace ocpp::messages;
using namespace ocpp::messages::ocpp20;
using namespace ocpp::types;
using namespace ocpp::types::ocpp20;

namespace ocpp
{
namespace localcontroller
{
namespace ocpp20
{

/** @brief Constructor */
CentralSystemHandler20::CentralSystemHandler20(const std::string&                                 identifier,
                                               const ocpp::messages::ocpp20::MessagesConverter20& messages_converter,
                                               ocpp::messages::MessageDispatcher&                 msg_dispatcher)
    : GenericMessageHandler<CancelReservationReq, CancelReservationConf>(CANCELRESERVATION_ACTION, messages_converter),
      GenericMessageHandler<CertificateSignedReq, CertificateSignedConf>(CERTIFICATESIGNED_ACTION, messages_converter),
      GenericMessageHandler<ChangeAvailabilityReq, ChangeAvailabilityConf>(CHANGEAVAILABILITY_ACTION, messages_converter),
      GenericMessageHandler<ClearCacheReq, ClearCacheConf>(CLEARCACHE_ACTION, messages_converter),
      GenericMessageHandler<ClearChargingProfileReq, ClearChargingProfileConf>(CLEARCHARGINGPROFILE_ACTION, messages_converter),
      GenericMessageHandler<ClearDisplayMessageReq, ClearDisplayMessageConf>(CLEARDISPLAYMESSAGE_ACTION, messages_converter),
      GenericMessageHandler<ClearVariableMonitoringReq, ClearVariableMonitoringConf>(CLEARVARIABLEMONITORING_ACTION, messages_converter),
      GenericMessageHandler<CustomerInformationReq, CustomerInformationConf>(CUSTOMERINFORMATION_ACTION, messages_converter),
      GenericMessageHandler<DataTransferReq, DataTransferConf>(DATATRANSFER_ACTION, messages_converter),
      GenericMessageHandler<DeleteCertificateReq, DeleteCertificateConf>(DELETECERTIFICATE_ACTION, messages_converter),
      GenericMessageHandler<Get15118EVCertificateReq, Get15118EVCertificateConf>(GET15118EVCERTIFICATE_ACTION, messages_converter),
      GenericMessageHandler<GetBaseReportReq, GetBaseReportConf>(GETBASEREPORT_ACTION, messages_converter),
      GenericMessageHandler<GetCertificateStatusReq, GetCertificateStatusConf>(GETCERTIFICATESTATUS_ACTION, messages_converter),
      GenericMessageHandler<GetChargingProfilesReq, GetChargingProfilesConf>(GETCHARGINGPROFILES_ACTION, messages_converter),
      GenericMessageHandler<GetCompositeScheduleReq, GetCompositeScheduleConf>(GETCOMPOSITESCHEDULE_ACTION, messages_converter),
      GenericMessageHandler<GetDisplayMessagesReq, GetDisplayMessagesConf>(GETDISPLAYMESSAGES_ACTION, messages_converter),
      GenericMessageHandler<GetInstalledCertificateIdsReq, GetInstalledCertificateIdsConf>(GETINSTALLEDCERTIFICATEIDS_ACTION,
                                                                                           messages_converter),
      GenericMessageHandler<GetLocalListVersionReq, GetLocalListVersionConf>(GETLOCALLISTVERSION_ACTION, messages_converter),
      GenericMessageHandler<GetLogReq, GetLogConf>(GETLOG_ACTION, messages_converter),
      GenericMessageHandler<GetMonitoringReportReq, GetMonitoringReportConf>(GETMONITORINGREPORT_ACTION, messages_converter),
      GenericMessageHandler<GetReportReq, GetReportConf>(GETREPORT_ACTION, messages_converter),
      GenericMessageHandler<GetTransactionStatusReq, GetTransactionStatusConf>(GETTRANSACTIONSTATUS_ACTION, messages_converter),
      GenericMessageHandler<GetVariablesReq, GetVariablesConf>(GETVARIABLES_ACTION, messages_converter),
      GenericMessageHandler<InstallCertificateReq, InstallCertificateConf>(INSTALLCERTIFICATE_ACTION, messages_converter),
      GenericMessageHandler<PublishFirmwareReq, PublishFirmwareConf>(PUBLISHFIRMWARE_ACTION, messages_converter),
      GenericMessageHandler<RequestStartTransactionReq, RequestStartTransactionConf>(REQUESTSTARTTRANSACTION_ACTION, messages_converter),
      GenericMessageHandler<RequestStopTransactionReq, RequestStopTransactionConf>(REQUESTSTOPTRANSACTION_ACTION, messages_converter),
      GenericMessageHandler<ReserveNowReq, ReserveNowConf>(RESERVENOW_ACTION, messages_converter),
      GenericMessageHandler<ResetReq, ResetConf>(RESET_ACTION, messages_converter),
      GenericMessageHandler<SendLocalListReq, SendLocalListConf>(SENDLOCALLIST_ACTION, messages_converter),
      GenericMessageHandler<SetChargingProfileReq, SetChargingProfileConf>(SETCHARGINGPROFILE_ACTION, messages_converter),
      GenericMessageHandler<SetDisplayMessageReq, SetDisplayMessageConf>(SETDISPLAYMESSAGE_ACTION, messages_converter),
      GenericMessageHandler<SetMonitoringBaseReq, SetMonitoringBaseConf>(SETMONITORINGBASE_ACTION, messages_converter),
      GenericMessageHandler<SetMonitoringLevelReq, SetMonitoringLevelConf>(SETMONITORINGLEVEL_ACTION, messages_converter),
      GenericMessageHandler<SetNetworkProfileReq, SetNetworkProfileConf>(SETNETWORKPROFILE_ACTION, messages_converter),
      GenericMessageHandler<SetVariableMonitoringReq, SetVariableMonitoringConf>(SETVARIABLEMONITORING_ACTION, messages_converter),
      GenericMessageHandler<SetVariablesReq, SetVariablesConf>(SETVARIABLES_ACTION, messages_converter),
      GenericMessageHandler<TriggerMessageReq, TriggerMessageConf>(TRIGGERMESSAGE_ACTION, messages_converter),
      GenericMessageHandler<UnlockConnectorReq, UnlockConnectorConf>(UNLOCKCONNECTOR_ACTION, messages_converter),
      GenericMessageHandler<UnpublishFirmwareReq, UnpublishFirmwareConf>(UNPUBLISHFIRMWARE_ACTION, messages_converter),
      GenericMessageHandler<UpdateFirmwareReq, UpdateFirmwareConf>(UPDATEFIRMWARE_ACTION, messages_converter),

      m_identifier(identifier),
      m_charge_point()
{
    msg_dispatcher.registerHandler(CANCELRESERVATION_ACTION,
                                   *dynamic_cast<GenericMessageHandler<CancelReservationReq, CancelReservationConf>*>(this));
    msg_dispatcher.registerHandler(CERTIFICATESIGNED_ACTION,
                                   *dynamic_cast<GenericMessageHandler<CertificateSignedReq, CertificateSignedConf>*>(this));
    msg_dispatcher.registerHandler(CHANGEAVAILABILITY_ACTION,
                                   *dynamic_cast<GenericMessageHandler<ChangeAvailabilityReq, ChangeAvailabilityConf>*>(this));
    msg_dispatcher.registerHandler(CLEARCACHE_ACTION, *dynamic_cast<GenericMessageHandler<ClearCacheReq, ClearCacheConf>*>(this));
    msg_dispatcher.registerHandler(CLEARCHARGINGPROFILE_ACTION,
                                   *dynamic_cast<GenericMessageHandler<ClearChargingProfileReq, ClearChargingProfileConf>*>(this));
    msg_dispatcher.registerHandler(CLEARDISPLAYMESSAGE_ACTION,
                                   *dynamic_cast<GenericMessageHandler<ClearDisplayMessageReq, ClearDisplayMessageConf>*>(this));
    msg_dispatcher.registerHandler(CLEARVARIABLEMONITORING_ACTION,
                                   *dynamic_cast<GenericMessageHandler<ClearVariableMonitoringReq, ClearVariableMonitoringConf>*>(this));
    msg_dispatcher.registerHandler(CUSTOMERINFORMATION_ACTION,
                                   *dynamic_cast<GenericMessageHandler<CustomerInformationReq, CustomerInformationConf>*>(this));
    msg_dispatcher.registerHandler(DATATRANSFER_ACTION, *dynamic_cast<GenericMessageHandler<DataTransferReq, DataTransferConf>*>(this));
    msg_dispatcher.registerHandler(DELETECERTIFICATE_ACTION,
                                   *dynamic_cast<GenericMessageHandler<DeleteCertificateReq, DeleteCertificateConf>*>(this));
    msg_dispatcher.registerHandler(GET15118EVCERTIFICATE_ACTION,
                                   *dynamic_cast<GenericMessageHandler<Get15118EVCertificateReq, Get15118EVCertificateConf>*>(this));
    msg_dispatcher.registerHandler(GETBASEREPORT_ACTION, *dynamic_cast<GenericMessageHandler<GetBaseReportReq, GetBaseReportConf>*>(this));
    msg_dispatcher.registerHandler(GETCERTIFICATESTATUS_ACTION,
                                   *dynamic_cast<GenericMessageHandler<GetCertificateStatusReq, GetCertificateStatusConf>*>(this));
    msg_dispatcher.registerHandler(GETCHARGINGPROFILES_ACTION,
                                   *dynamic_cast<GenericMessageHandler<GetChargingProfilesReq, GetChargingProfilesConf>*>(this));
    msg_dispatcher.registerHandler(GETCOMPOSITESCHEDULE_ACTION,
                                   *dynamic_cast<GenericMessageHandler<GetCompositeScheduleReq, GetCompositeScheduleConf>*>(this));
    msg_dispatcher.registerHandler(GETDISPLAYMESSAGES_ACTION,
                                   *dynamic_cast<GenericMessageHandler<GetDisplayMessagesReq, GetDisplayMessagesConf>*>(this));
    msg_dispatcher.registerHandler(
        GETINSTALLEDCERTIFICATEIDS_ACTION,
        *dynamic_cast<GenericMessageHandler<GetInstalledCertificateIdsReq, GetInstalledCertificateIdsConf>*>(this));
    msg_dispatcher.registerHandler(GETLOCALLISTVERSION_ACTION,
                                   *dynamic_cast<GenericMessageHandler<GetLocalListVersionReq, GetLocalListVersionConf>*>(this));
    msg_dispatcher.registerHandler(GETLOG_ACTION, *dynamic_cast<GenericMessageHandler<GetLogReq, GetLogConf>*>(this));
    msg_dispatcher.registerHandler(GETMONITORINGREPORT_ACTION,
                                   *dynamic_cast<GenericMessageHandler<GetMonitoringReportReq, GetMonitoringReportConf>*>(this));
    msg_dispatcher.registerHandler(GETREPORT_ACTION, *dynamic_cast<GenericMessageHandler<GetReportReq, GetReportConf>*>(this));
    msg_dispatcher.registerHandler(GETTRANSACTIONSTATUS_ACTION,
                                   *dynamic_cast<GenericMessageHandler<GetTransactionStatusReq, GetTransactionStatusConf>*>(this));
    msg_dispatcher.registerHandler(GETVARIABLES_ACTION, *dynamic_cast<GenericMessageHandler<GetVariablesReq, GetVariablesConf>*>(this));
    msg_dispatcher.registerHandler(INSTALLCERTIFICATE_ACTION,
                                   *dynamic_cast<GenericMessageHandler<InstallCertificateReq, InstallCertificateConf>*>(this));
    msg_dispatcher.registerHandler(PUBLISHFIRMWARE_ACTION,
                                   *dynamic_cast<GenericMessageHandler<PublishFirmwareReq, PublishFirmwareConf>*>(this));
    msg_dispatcher.registerHandler(REQUESTSTARTTRANSACTION_ACTION,
                                   *dynamic_cast<GenericMessageHandler<RequestStartTransactionReq, RequestStartTransactionConf>*>(this));
    msg_dispatcher.registerHandler(REQUESTSTOPTRANSACTION_ACTION,
                                   *dynamic_cast<GenericMessageHandler<RequestStopTransactionReq, RequestStopTransactionConf>*>(this));
    msg_dispatcher.registerHandler(RESERVENOW_ACTION, *dynamic_cast<GenericMessageHandler<ReserveNowReq, ReserveNowConf>*>(this));
    msg_dispatcher.registerHandler(RESET_ACTION, *dynamic_cast<GenericMessageHandler<ResetReq, ResetConf>*>(this));
    msg_dispatcher.registerHandler(SENDLOCALLIST_ACTION, *dynamic_cast<GenericMessageHandler<SendLocalListReq, SendLocalListConf>*>(this));
    msg_dispatcher.registerHandler(SETCHARGINGPROFILE_ACTION,
                                   *dynamic_cast<GenericMessageHandler<SetChargingProfileReq, SetChargingProfileConf>*>(this));
    msg_dispatcher.registerHandler(SETDISPLAYMESSAGE_ACTION,
                                   *dynamic_cast<GenericMessageHandler<SetDisplayMessageReq, SetDisplayMessageConf>*>(this));
    msg_dispatcher.registerHandler(SETMONITORINGBASE_ACTION,
                                   *dynamic_cast<GenericMessageHandler<SetMonitoringBaseReq, SetMonitoringBaseConf>*>(this));
    msg_dispatcher.registerHandler(SETMONITORINGLEVEL_ACTION,
                                   *dynamic_cast<GenericMessageHandler<SetMonitoringLevelReq, SetMonitoringLevelConf>*>(this));
    msg_dispatcher.registerHandler(SETNETWORKPROFILE_ACTION,
                                   *dynamic_cast<GenericMessageHandler<SetNetworkProfileReq, SetNetworkProfileConf>*>(this));
    msg_dispatcher.registerHandler(SETVARIABLEMONITORING_ACTION,
                                   *dynamic_cast<GenericMessageHandler<SetVariableMonitoringReq, SetVariableMonitoringConf>*>(this));
    msg_dispatcher.registerHandler(SETVARIABLES_ACTION, *dynamic_cast<GenericMessageHandler<SetVariablesReq, SetVariablesConf>*>(this));
    msg_dispatcher.registerHandler(TRIGGERMESSAGE_ACTION,
                                   *dynamic_cast<GenericMessageHandler<TriggerMessageReq, TriggerMessageConf>*>(this));
    msg_dispatcher.registerHandler(UNLOCKCONNECTOR_ACTION,
                                   *dynamic_cast<GenericMessageHandler<UnlockConnectorReq, UnlockConnectorConf>*>(this));
    msg_dispatcher.registerHandler(UNPUBLISHFIRMWARE_ACTION,
                                   *dynamic_cast<GenericMessageHandler<UnpublishFirmwareReq, UnpublishFirmwareConf>*>(this));
    msg_dispatcher.registerHandler(UPDATEFIRMWARE_ACTION,
                                   *dynamic_cast<GenericMessageHandler<UpdateFirmwareReq, UpdateFirmwareConf>*>(this));
}

/** @brief Destructor */
CentralSystemHandler20::~CentralSystemHandler20() { }

// OCPP handlers
/** @copydoc bool GenericMessageHandler<RequestType, ResponseType>::handleMessage(const RequestType& request,
     *                                                                                ResponseType& response,
     *                                                                                std::string& error_code,
     *                                                                                std::string& error_message)
     */
bool CentralSystemHandler20::handleMessage(const ocpp::messages::ocpp20::CancelReservationReq& request,
                                           ocpp::messages::ocpp20::CancelReservationConf&      response,
                                           std::string&                                        error_code,
                                           std::string&                                        error_message)
{
    return forward(CANCELRESERVATION_ACTION, request, response, error_code, error_message);
}
/** @copydoc bool GenericMessageHandler<RequestType, ResponseType>::handleMessage(const RequestType& request,
     *                                                                                ResponseType& response,
     *                                                                                std::string& error_code,
     *                                                                                std::string& error_message)
     */
bool CentralSystemHandler20::handleMessage(const ocpp::messages::ocpp20::CertificateSignedReq& request,
                                           ocpp::messages::ocpp20::CertificateSignedConf&      response,
                                           std::string&                                        error_code,
                                           std::string&                                        error_message)
{
    return forward(CERTIFICATESIGNED_ACTION, request, response, error_code, error_message);
}
/** @copydoc bool GenericMessageHandler<RequestType, ResponseType>::handleMessage(const RequestType& request,
     *                                                                                ResponseType& response,
     *                                                                                std::string& error_code,
     *                                                                                std::string& error_message)
     */
bool CentralSystemHandler20::handleMessage(const ocpp::messages::ocpp20::ChangeAvailabilityReq& request,
                                           ocpp::messages::ocpp20::ChangeAvailabilityConf&      response,
                                           std::string&                                         error_code,
                                           std::string&                                         error_message)
{
    return forward(CHANGEAVAILABILITY_ACTION, request, response, error_code, error_message);
}
/** @copydoc bool GenericMessageHandler<RequestType, ResponseType>::handleMessage(const RequestType& request,
     *                                                                                ResponseType& response,
     *                                                                                std::string& error_code,
     *                                                                                std::string& error_message)
     */
bool CentralSystemHandler20::handleMessage(const ocpp::messages::ocpp20::ClearCacheReq& request,
                                           ocpp::messages::ocpp20::ClearCacheConf&      response,
                                           std::string&                                 error_code,
                                           std::string&                                 error_message)
{
    return forward(CLEARCACHE_ACTION, request, response, error_code, error_message);
}
/** @copydoc bool GenericMessageHandler<RequestType, ResponseType>::handleMessage(const RequestType& request,
     *                                                                                ResponseType& response,
     *                                                                                std::string& error_code,
     *                                                                                std::string& error_message)
     */
bool CentralSystemHandler20::handleMessage(const ocpp::messages::ocpp20::ClearChargingProfileReq& request,
                                           ocpp::messages::ocpp20::ClearChargingProfileConf&      response,
                                           std::string&                                           error_code,
                                           std::string&                                           error_message)
{
    return forward(CLEARCHARGINGPROFILE_ACTION, request, response, error_code, error_message);
}
/** @copydoc bool GenericMessageHandler<RequestType, ResponseType>::handleMessage(const RequestType& request,
     *                                                                                ResponseType& response,
     *                                                                                std::string& error_code,
     *                                                                                std::string& error_message)
     */
bool CentralSystemHandler20::handleMessage(const ocpp::messages::ocpp20::ClearDisplayMessageReq& request,
                                           ocpp::messages::ocpp20::ClearDisplayMessageConf&      response,
                                           std::string&                                          error_code,
                                           std::string&                                          error_message)
{
    return forward(CLEARDISPLAYMESSAGE_ACTION, request, response, error_code, error_message);
}
/** @copydoc bool GenericMessageHandler<RequestType, ResponseType>::handleMessage(const RequestType& request,
     *                                                                                ResponseType& response,
     *                                                                                std::string& error_code,
     *                                                                                std::string& error_message)
     */
bool CentralSystemHandler20::handleMessage(const ocpp::messages::ocpp20::ClearVariableMonitoringReq& request,
                                           ocpp::messages::ocpp20::ClearVariableMonitoringConf&      response,
                                           std::string&                                              error_code,
                                           std::string&                                              error_message)
{
    return forward(CLEARVARIABLEMONITORING_ACTION, request, response, error_code, error_message);
}
/** @copydoc bool GenericMessageHandler<RequestType, ResponseType>::handleMessage(const RequestType& request,
     *                                                                                ResponseType& response,
     *                                                                                std::string& error_code,
     *                                                                                std::string& error_message)
     */
bool CentralSystemHandler20::handleMessage(const ocpp::messages::ocpp20::CustomerInformationReq& request,
                                           ocpp::messages::ocpp20::CustomerInformationConf&      response,
                                           std::string&                                          error_code,
                                           std::string&                                          error_message)
{
    return forward(CUSTOMERINFORMATION_ACTION, request, response, error_code, error_message);
}
/** @copydoc bool GenericMessageHandler<RequestType, ResponseType>::handleMessage(const RequestType& request,
     *                                                                                ResponseType& response,
     *                                                                                std::string& error_code,
     *                                                                                std::string& error_message)
     */
bool CentralSystemHandler20::handleMessage(const ocpp::messages::ocpp20::DataTransferReq& request,
                                           ocpp::messages::ocpp20::DataTransferConf&      response,
                                           std::string&                                   error_code,
                                           std::string&                                   error_message)
{
    return forward(DATATRANSFER_ACTION, request, response, error_code, error_message);
}
/** @copydoc bool GenericMessageHandler<RequestType, ResponseType>::handleMessage(const RequestType& request,
     *                                                                                ResponseType& response,
     *                                                                                std::string& error_code,
     *                                                                                std::string& error_message)
     */
bool CentralSystemHandler20::handleMessage(const ocpp::messages::ocpp20::DeleteCertificateReq& request,
                                           ocpp::messages::ocpp20::DeleteCertificateConf&      response,
                                           std::string&                                        error_code,
                                           std::string&                                        error_message)
{
    return forward(DELETECERTIFICATE_ACTION, request, response, error_code, error_message);
}
/** @copydoc bool GenericMessageHandler<RequestType, ResponseType>::handleMessage(const RequestType& request,
     *                                                                                ResponseType& response,
     *                                                                                std::string& error_code,
     *                                                                                std::string& error_message)
     */
bool CentralSystemHandler20::handleMessage(const ocpp::messages::ocpp20::Get15118EVCertificateReq& request,
                                           ocpp::messages::ocpp20::Get15118EVCertificateConf&      response,
                                           std::string&                                            error_code,
                                           std::string&                                            error_message)
{
    return forward(GET15118EVCERTIFICATE_ACTION, request, response, error_code, error_message);
}
/** @copydoc bool GenericMessageHandler<RequestType, ResponseType>::handleMessage(const RequestType& request,
     *                                                                                ResponseType& response,
     *                                                                                std::string& error_code,
     *                                                                                std::string& error_message)
     */
bool CentralSystemHandler20::handleMessage(const ocpp::messages::ocpp20::GetBaseReportReq& request,
                                           ocpp::messages::ocpp20::GetBaseReportConf&      response,
                                           std::string&                                    error_code,
                                           std::string&                                    error_message)
{
    return forward(GETBASEREPORT_ACTION, request, response, error_code, error_message);
}
/** @copydoc bool GenericMessageHandler<RequestType, ResponseType>::handleMessage(const RequestType& request,
     *                                                                                ResponseType& response,
     *                                                                                std::string& error_code,
     *                                                                                std::string& error_message)
     */
bool CentralSystemHandler20::handleMessage(const ocpp::messages::ocpp20::GetCertificateStatusReq& request,
                                           ocpp::messages::ocpp20::GetCertificateStatusConf&      response,
                                           std::string&                                           error_code,
                                           std::string&                                           error_message)
{
    return forward(GETCERTIFICATESTATUS_ACTION, request, response, error_code, error_message);
}
/** @copydoc bool GenericMessageHandler<RequestType, ResponseType>::handleMessage(const RequestType& request,
     *                                                                                ResponseType& response,
     *                                                                                std::string& error_code,
     *                                                                                std::string& error_message)
     */
bool CentralSystemHandler20::handleMessage(const ocpp::messages::ocpp20::GetChargingProfilesReq& request,
                                           ocpp::messages::ocpp20::GetChargingProfilesConf&      response,
                                           std::string&                                          error_code,
                                           std::string&                                          error_message)
{
    return forward(GETCHARGINGPROFILES_ACTION, request, response, error_code, error_message);
}
/** @copydoc bool GenericMessageHandler<RequestType, ResponseType>::handleMessage(const RequestType& request,
     *                                                                                ResponseType& response,
     *                                                                                std::string& error_code,
     *                                                                                std::string& error_message)
     */
bool CentralSystemHandler20::handleMessage(const ocpp::messages::ocpp20::GetCompositeScheduleReq& request,
                                           ocpp::messages::ocpp20::GetCompositeScheduleConf&      response,
                                           std::string&                                           error_code,
                                           std::string&                                           error_message)
{
    return forward(GETCOMPOSITESCHEDULE_ACTION, request, response, error_code, error_message);
}
/** @copydoc bool GenericMessageHandler<RequestType, ResponseType>::handleMessage(const RequestType& request,
     *                                                                                ResponseType& response,
     *                                                                                std::string& error_code,
     *                                                                                std::string& error_message)
     */
bool CentralSystemHandler20::handleMessage(const ocpp::messages::ocpp20::GetDisplayMessagesReq& request,
                                           ocpp::messages::ocpp20::GetDisplayMessagesConf&      response,
                                           std::string&                                         error_code,
                                           std::string&                                         error_message)
{
    return forward(GETDISPLAYMESSAGES_ACTION, request, response, error_code, error_message);
}
/** @copydoc bool GenericMessageHandler<RequestType, ResponseType>::handleMessage(const RequestType& request,
     *                                                                                ResponseType& response,
     *                                                                                std::string& error_code,
     *                                                                                std::string& error_message)
     */
bool CentralSystemHandler20::handleMessage(const ocpp::messages::ocpp20::GetInstalledCertificateIdsReq& request,
                                           ocpp::messages::ocpp20::GetInstalledCertificateIdsConf&      response,
                                           std::string&                                                 error_code,
                                           std::string&                                                 error_message)
{
    return forward(GETINSTALLEDCERTIFICATEIDS_ACTION, request, response, error_code, error_message);
}
/** @copydoc bool GenericMessageHandler<RequestType, ResponseType>::handleMessage(const RequestType& request,
     *                                                                                ResponseType& response,
     *                                                                                std::string& error_code,
     *                                                                                std::string& error_message)
     */
bool CentralSystemHandler20::handleMessage(const ocpp::messages::ocpp20::GetLocalListVersionReq& request,
                                           ocpp::messages::ocpp20::GetLocalListVersionConf&      response,
                                           std::string&                                          error_code,
                                           std::string&                                          error_message)
{
    return forward(GETLOCALLISTVERSION_ACTION, request, response, error_code, error_message);
}
/** @copydoc bool GenericMessageHandler<RequestType, ResponseType>::handleMessage(const RequestType& request,
     *                                                                                ResponseType& response,
     *                                                                                std::string& error_code,
     *                                                                                std::string& error_message)
     */
bool CentralSystemHandler20::handleMessage(const ocpp::messages::ocpp20::GetLogReq& request,
                                           ocpp::messages::ocpp20::GetLogConf&      response,
                                           std::string&                             error_code,
                                           std::string&                             error_message)
{
    return forward(GETLOG_ACTION, request, response, error_code, error_message);
}
/** @copydoc bool GenericMessageHandler<RequestType, ResponseType>::handleMessage(const RequestType& request,
     *                                                                                ResponseType& response,
     *                                                                                std::string& error_code,
     *                                                                                std::string& error_message)
     */
bool CentralSystemHandler20::handleMessage(const ocpp::messages::ocpp20::GetMonitoringReportReq& request,
                                           ocpp::messages::ocpp20::GetMonitoringReportConf&      response,
                                           std::string&                                          error_code,
                                           std::string&                                          error_message)
{
    return forward(GETMONITORINGREPORT_ACTION, request, response, error_code, error_message);
}
/** @copydoc bool GenericMessageHandler<RequestType, ResponseType>::handleMessage(const RequestType& request,
     *                                                                                ResponseType& response,
     *                                                                                std::string& error_code,
     *                                                                                std::string& error_message)
     */
bool CentralSystemHandler20::handleMessage(const ocpp::messages::ocpp20::GetReportReq& request,
                                           ocpp::messages::ocpp20::GetReportConf&      response,
                                           std::string&                                error_code,
                                           std::string&                                error_message)
{
    return forward(GETREPORT_ACTION, request, response, error_code, error_message);
}
/** @copydoc bool GenericMessageHandler<RequestType, ResponseType>::handleMessage(const RequestType& request,
     *                                                                                ResponseType& response,
     *                                                                                std::string& error_code,
     *                                                                                std::string& error_message)
     */
bool CentralSystemHandler20::handleMessage(const ocpp::messages::ocpp20::GetTransactionStatusReq& request,
                                           ocpp::messages::ocpp20::GetTransactionStatusConf&      response,
                                           std::string&                                           error_code,
                                           std::string&                                           error_message)
{
    return forward(GETTRANSACTIONSTATUS_ACTION, request, response, error_code, error_message);
}
/** @copydoc bool GenericMessageHandler<RequestType, ResponseType>::handleMessage(const RequestType& request,
     *                                                                                ResponseType& response,
     *                                                                                std::string& error_code,
     *                                                                                std::string& error_message)
     */
bool CentralSystemHandler20::handleMessage(const ocpp::messages::ocpp20::GetVariablesReq& request,
                                           ocpp::messages::ocpp20::GetVariablesConf&      response,
                                           std::string&                                   error_code,
                                           std::string&                                   error_message)
{
    return forward(GETVARIABLES_ACTION, request, response, error_code, error_message);
}
/** @copydoc bool GenericMessageHandler<RequestType, ResponseType>::handleMessage(const RequestType& request,
     *                                                                                ResponseType& response,
     *                                                                                std::string& error_code,
     *                                                                                std::string& error_message)
     */
bool CentralSystemHandler20::handleMessage(const ocpp::messages::ocpp20::InstallCertificateReq& request,
                                           ocpp::messages::ocpp20::InstallCertificateConf&      response,
                                           std::string&                                         error_code,
                                           std::string&                                         error_message)
{
    return forward(INSTALLCERTIFICATE_ACTION, request, response, error_code, error_message);
}
/** @copydoc bool GenericMessageHandler<RequestType, ResponseType>::handleMessage(const RequestType& request,
     *                                                                                ResponseType& response,
     *                                                                                std::string& error_code,
     *                                                                                std::string& error_message)
     */
bool CentralSystemHandler20::handleMessage(const ocpp::messages::ocpp20::PublishFirmwareReq& request,
                                           ocpp::messages::ocpp20::PublishFirmwareConf&      response,
                                           std::string&                                      error_code,
                                           std::string&                                      error_message)
{
    return forward(PUBLISHFIRMWARE_ACTION, request, response, error_code, error_message);
}
/** @copydoc bool GenericMessageHandler<RequestType, ResponseType>::handleMessage(const RequestType& request,
     *                                                                                ResponseType& response,
     *                                                                                std::string& error_code,
     *                                                                                std::string& error_message)
     */
bool CentralSystemHandler20::handleMessage(const ocpp::messages::ocpp20::RequestStartTransactionReq& request,
                                           ocpp::messages::ocpp20::RequestStartTransactionConf&      response,
                                           std::string&                                              error_code,
                                           std::string&                                              error_message)
{
    return forward(REQUESTSTARTTRANSACTION_ACTION, request, response, error_code, error_message);
}
/** @copydoc bool GenericMessageHandler<RequestType, ResponseType>::handleMessage(const RequestType& request,
     *                                                                                ResponseType& response,
     *                                                                                std::string& error_code,
     *                                                                                std::string& error_message)
     */
bool CentralSystemHandler20::handleMessage(const ocpp::messages::ocpp20::RequestStopTransactionReq& request,
                                           ocpp::messages::ocpp20::RequestStopTransactionConf&      response,
                                           std::string&                                             error_code,
                                           std::string&                                             error_message)
{
    return forward(REQUESTSTOPTRANSACTION_ACTION, request, response, error_code, error_message);
}
/** @copydoc bool GenericMessageHandler<RequestType, ResponseType>::handleMessage(const RequestType& request,
     *                                                                                ResponseType& response,
     *                                                                                std::string& error_code,
     *                                                                                std::string& error_message)
     */
bool CentralSystemHandler20::handleMessage(const ocpp::messages::ocpp20::ReserveNowReq& request,
                                           ocpp::messages::ocpp20::ReserveNowConf&      response,
                                           std::string&                                 error_code,
                                           std::string&                                 error_message)
{
    return forward(RESERVENOW_ACTION, request, response, error_code, error_message);
}
/** @copydoc bool GenericMessageHandler<RequestType, ResponseType>::handleMessage(const RequestType& request,
     *                                                                                ResponseType& response,
     *                                                                                std::string& error_code,
     *                                                                                std::string& error_message)
     */
bool CentralSystemHandler20::handleMessage(const ocpp::messages::ocpp20::ResetReq& request,
                                           ocpp::messages::ocpp20::ResetConf&      response,
                                           std::string&                            error_code,
                                           std::string&                            error_message)
{
    return forward(RESET_ACTION, request, response, error_code, error_message);
}
/** @copydoc bool GenericMessageHandler<RequestType, ResponseType>::handleMessage(const RequestType& request,
     *                                                                                ResponseType& response,
     *                                                                                std::string& error_code,
     *                                                                                std::string& error_message)
     */
bool CentralSystemHandler20::handleMessage(const ocpp::messages::ocpp20::SendLocalListReq& request,
                                           ocpp::messages::ocpp20::SendLocalListConf&      response,
                                           std::string&                                    error_code,
                                           std::string&                                    error_message)
{
    return forward(SENDLOCALLIST_ACTION, request, response, error_code, error_message);
}
/** @copydoc bool GenericMessageHandler<RequestType, ResponseType>::handleMessage(const RequestType& request,
     *                                                                                ResponseType& response,
     *                                                                                std::string& error_code,
     *                                                                                std::string& error_message)
     */
bool CentralSystemHandler20::handleMessage(const ocpp::messages::ocpp20::SetChargingProfileReq& request,
                                           ocpp::messages::ocpp20::SetChargingProfileConf&      response,
                                           std::string&                                         error_code,
                                           std::string&                                         error_message)
{
    return forward(SETCHARGINGPROFILE_ACTION, request, response, error_code, error_message);
}
/** @copydoc bool GenericMessageHandler<RequestType, ResponseType>::handleMessage(const RequestType& request,
     *                                                                                ResponseType& response,
     *                                                                                std::string& error_code,
     *                                                                                std::string& error_message)
     */
bool CentralSystemHandler20::handleMessage(const ocpp::messages::ocpp20::SetDisplayMessageReq& request,
                                           ocpp::messages::ocpp20::SetDisplayMessageConf&      response,
                                           std::string&                                        error_code,
                                           std::string&                                        error_message)
{
    return forward(SETDISPLAYMESSAGE_ACTION, request, response, error_code, error_message);
}
/** @copydoc bool GenericMessageHandler<RequestType, ResponseType>::handleMessage(const RequestType& request,
     *                                                                                ResponseType& response,
     *                                                                                std::string& error_code,
     *                                                                                std::string& error_message)
     */
bool CentralSystemHandler20::handleMessage(const ocpp::messages::ocpp20::SetMonitoringBaseReq& request,
                                           ocpp::messages::ocpp20::SetMonitoringBaseConf&      response,
                                           std::string&                                        error_code,
                                           std::string&                                        error_message)
{
    return forward(SETMONITORINGBASE_ACTION, request, response, error_code, error_message);
}
/** @copydoc bool GenericMessageHandler<RequestType, ResponseType>::handleMessage(const RequestType& request,
     *                                                                                ResponseType& response,
     *                                                                                std::string& error_code,
     *                                                                                std::string& error_message)
     */
bool CentralSystemHandler20::handleMessage(const ocpp::messages::ocpp20::SetMonitoringLevelReq& request,
                                           ocpp::messages::ocpp20::SetMonitoringLevelConf&      response,
                                           std::string&                                         error_code,
                                           std::string&                                         error_message)
{
    return forward(SETMONITORINGLEVEL_ACTION, request, response, error_code, error_message);
}
/** @copydoc bool GenericMessageHandler<RequestType, ResponseType>::handleMessage(const RequestType& request,
     *                                                                                ResponseType& response,
     *                                                                                std::string& error_code,
     *                                                                                std::string& error_message)
     */
bool CentralSystemHandler20::handleMessage(const ocpp::messages::ocpp20::SetNetworkProfileReq& request,
                                           ocpp::messages::ocpp20::SetNetworkProfileConf&      response,
                                           std::string&                                        error_code,
                                           std::string&                                        error_message)
{
    return forward(SETNETWORKPROFILE_ACTION, request, response, error_code, error_message);
}
/** @copydoc bool GenericMessageHandler<RequestType, ResponseType>::handleMessage(const RequestType& request,
     *                                                                                ResponseType& response,
     *                                                                                std::string& error_code,
     *                                                                                std::string& error_message)
     */
bool CentralSystemHandler20::handleMessage(const ocpp::messages::ocpp20::SetVariableMonitoringReq& request,
                                           ocpp::messages::ocpp20::SetVariableMonitoringConf&      response,
                                           std::string&                                            error_code,
                                           std::string&                                            error_message)
{
    return forward(SETVARIABLEMONITORING_ACTION, request, response, error_code, error_message);
}
/** @copydoc bool GenericMessageHandler<RequestType, ResponseType>::handleMessage(const RequestType& request,
     *                                                                                ResponseType& response,
     *                                                                                std::string& error_code,
     *                                                                                std::string& error_message)
     */
bool CentralSystemHandler20::handleMessage(const ocpp::messages::ocpp20::SetVariablesReq& request,
                                           ocpp::messages::ocpp20::SetVariablesConf&      response,
                                           std::string&                                   error_code,
                                           std::string&                                   error_message)
{
    return forward(SETVARIABLES_ACTION, request, response, error_code, error_message);
}
/** @copydoc bool GenericMessageHandler<RequestType, ResponseType>::handleMessage(const RequestType& request,
     *                                                                                ResponseType& response,
     *                                                                                std::string& error_code,
     *                                                                                std::string& error_message)
     */
bool CentralSystemHandler20::handleMessage(const ocpp::messages::ocpp20::TriggerMessageReq& request,
                                           ocpp::messages::ocpp20::TriggerMessageConf&      response,
                                           std::string&                                     error_code,
                                           std::string&                                     error_message)
{
    return forward(TRIGGERMESSAGE_ACTION, request, response, error_code, error_message);
}
/** @copydoc bool GenericMessageHandler<RequestType, ResponseType>::handleMessage(const RequestType& request,
     *                                                                                ResponseType& response,
     *                                                                                std::string& error_code,
     *                                                                                std::string& error_message)
     */
bool CentralSystemHandler20::handleMessage(const ocpp::messages::ocpp20::UnlockConnectorReq& request,
                                           ocpp::messages::ocpp20::UnlockConnectorConf&      response,
                                           std::string&                                      error_code,
                                           std::string&                                      error_message)
{
    return forward(UNLOCKCONNECTOR_ACTION, request, response, error_code, error_message);
}
/** @copydoc bool GenericMessageHandler<RequestType, ResponseType>::handleMessage(const RequestType& request,
     *                                                                                ResponseType& response,
     *                                                                                std::string& error_code,
     *                                                                                std::string& error_message)
     */
bool CentralSystemHandler20::handleMessage(const ocpp::messages::ocpp20::UnpublishFirmwareReq& request,
                                           ocpp::messages::ocpp20::UnpublishFirmwareConf&      response,
                                           std::string&                                        error_code,
                                           std::string&                                        error_message)
{
    return forward(UNPUBLISHFIRMWARE_ACTION, request, response, error_code, error_message);
}
/** @copydoc bool GenericMessageHandler<RequestType, ResponseType>::handleMessage(const RequestType& request,
     *                                                                                ResponseType& response,
     *                                                                                std::string& error_code,
     *                                                                                std::string& error_message)
     */
bool CentralSystemHandler20::handleMessage(const ocpp::messages::ocpp20::UpdateFirmwareReq& request,
                                           ocpp::messages::ocpp20::UpdateFirmwareConf&      response,
                                           std::string&                                     error_code,
                                           std::string&                                     error_message)
{
    return forward(UPDATEFIRMWARE_ACTION, request, response, error_code, error_message);
}

} // namespace ocpp20
} // namespace localcontroller
} // namespace ocpp