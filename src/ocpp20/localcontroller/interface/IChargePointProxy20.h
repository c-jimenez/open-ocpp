/*
Copyright (c) 2020 Cedric Jimenez
This file is part of OpenOCPP.

OpenOCPP is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 2.1 of the License, or
(at your option) any later version.

OpenOCPP is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OpenOCPP. If not, see <http://www.gnu.org/licenses/>.
*/

/* Generated by json2cpp */

#ifndef OPENOCPP_OCPP20_ICHARGEPOINTPROXY20_H
#define OPENOCPP_OCPP20_ICHARGEPOINTPROXY20_H

#include "CancelReservation20.h"
#include "CertificateSigned20.h"
#include "ChangeAvailability20.h"
#include "ClearCache20.h"
#include "ClearChargingProfile20.h"
#include "ClearDisplayMessage20.h"
#include "ClearVariableMonitoring20.h"
#include "CustomerInformation20.h"
#include "DataTransfer20.h"
#include "DeleteCertificate20.h"
#include "Get15118EVCertificate20.h"
#include "GetBaseReport20.h"
#include "GetCertificateStatus20.h"
#include "GetChargingProfiles20.h"
#include "GetCompositeSchedule20.h"
#include "GetDisplayMessages20.h"
#include "GetInstalledCertificateIds20.h"
#include "GetLocalListVersion20.h"
#include "GetLog20.h"
#include "GetMonitoringReport20.h"
#include "GetReport20.h"
#include "GetTransactionStatus20.h"
#include "GetVariables20.h"
#include "ICentralSystem20.h"
#include "ICentralSystemProxy20.h"
#include "ILocalControllerConfig20.h"
#include "InstallCertificate20.h"
#include "PublishFirmware20.h"
#include "RequestStartTransaction20.h"
#include "RequestStopTransaction20.h"
#include "ReserveNow20.h"
#include "Reset20.h"
#include "RpcPool.h"
#include "SendLocalList20.h"
#include "SetChargingProfile20.h"
#include "SetDisplayMessage20.h"
#include "SetMonitoringBase20.h"
#include "SetMonitoringLevel20.h"
#include "SetNetworkProfile20.h"
#include "SetVariableMonitoring20.h"
#include "SetVariables20.h"
#include "TriggerMessage20.h"
#include "UnlockConnector20.h"
#include "UnpublishFirmware20.h"
#include "UpdateFirmware20.h"

#include <functional>
#include <memory>

namespace ocpp
{
namespace localcontroller
{
namespace ocpp20
{

/** @brief Interface for the charge point proxy implementations */
class IChargePointProxy20
{
  public:
    /** @brief Destructor */
    virtual ~IChargePointProxy20() { }

    /**
     * @brief Instanciate local controller's charge point proxy from a central system's charge point proxy
     * @param central_system_proxy Central system's charge point proxy
     * @param stack_config Stack configuration for local controller
     * @param rpc_pool RPC pool
     */
    static std::shared_ptr<IChargePointProxy20> createFrom(
        std::shared_ptr<ocpp::centralsystem::ocpp20::ICentralSystem20::IChargePoint20>& central_system_proxy,
        const ocpp::config::ILocalControllerConfig20&                                   stack_config,
        ocpp::rpc::RpcPool&                                                             rpc_pool);

    /**
     * @brief Get the IP address of the charge point
     * @return IP address of the charge point
     */
    virtual const std::string& ipAddress() const = 0;

    /**
     * @brief Get the charge point identifier
     * @return charge point identifier
     */
    virtual const std::string& identifier() const = 0;

    /**
     * @brief Set the call request timeout
     * @param timeout New timeout value
     */
    virtual void setTimeout(std::chrono::milliseconds timeout) = 0;

    /** @brief Disconnect the charge point */
    virtual void disconnect() = 0;

    /**
     * @brief Get the associated central system proxy
     * @return Associated central system proxy
     */
    virtual std::shared_ptr<ICentralSystemProxy20> centralSystemProxy() = 0;

    /**
     * @brief Register a listener to the proxy events
     * @param listener Listener to the proxy events
     */
    virtual void registerListener(ILocalControllerProxyEventsHandler20& listener) = 0;

    // OCPP operations
    /**
     * @brief Send a CancelReservation20 message to the charge point
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::CancelReservation20Req& request,
                      ocpp::messages::ocpp20::CancelReservation20Conf&      response,
                      std::string&                                          error,
                      std::string&                                          message) = 0;
    /**
     * @brief Send a CertificateSigned20 message to the charge point
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::CertificateSigned20Req& request,
                      ocpp::messages::ocpp20::CertificateSigned20Conf&      response,
                      std::string&                                          error,
                      std::string&                                          message) = 0;
    /**
     * @brief Send a ChangeAvailability20 message to the charge point
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::ChangeAvailability20Req& request,
                      ocpp::messages::ocpp20::ChangeAvailability20Conf&      response,
                      std::string&                                           error,
                      std::string&                                           message) = 0;
    /**
     * @brief Send a ClearCache20 message to the charge point
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::ClearCache20Req& request,
                      ocpp::messages::ocpp20::ClearCache20Conf&      response,
                      std::string&                                   error,
                      std::string&                                   message) = 0;
    /**
     * @brief Send a ClearChargingProfile20 message to the charge point
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::ClearChargingProfile20Req& request,
                      ocpp::messages::ocpp20::ClearChargingProfile20Conf&      response,
                      std::string&                                             error,
                      std::string&                                             message) = 0;
    /**
     * @brief Send a ClearDisplayMessage20 message to the charge point
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::ClearDisplayMessage20Req& request,
                      ocpp::messages::ocpp20::ClearDisplayMessage20Conf&      response,
                      std::string&                                            error,
                      std::string&                                            message) = 0;
    /**
     * @brief Send a ClearVariableMonitoring20 message to the charge point
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::ClearVariableMonitoring20Req& request,
                      ocpp::messages::ocpp20::ClearVariableMonitoring20Conf&      response,
                      std::string&                                                error,
                      std::string&                                                message) = 0;
    /**
     * @brief Send a CustomerInformation20 message to the charge point
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::CustomerInformation20Req& request,
                      ocpp::messages::ocpp20::CustomerInformation20Conf&      response,
                      std::string&                                            error,
                      std::string&                                            message) = 0;
    /**
     * @brief Send a DataTransfer20 message to the charge point
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::DataTransfer20Req& request,
                      ocpp::messages::ocpp20::DataTransfer20Conf&      response,
                      std::string&                                     error,
                      std::string&                                     message) = 0;
    /**
     * @brief Send a DeleteCertificate20 message to the charge point
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::DeleteCertificate20Req& request,
                      ocpp::messages::ocpp20::DeleteCertificate20Conf&      response,
                      std::string&                                          error,
                      std::string&                                          message) = 0;
    /**
     * @brief Send a Get15118EVCertificate20 message to the charge point
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::Get15118EVCertificate20Req& request,
                      ocpp::messages::ocpp20::Get15118EVCertificate20Conf&      response,
                      std::string&                                              error,
                      std::string&                                              message) = 0;
    /**
     * @brief Send a GetBaseReport20 message to the charge point
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::GetBaseReport20Req& request,
                      ocpp::messages::ocpp20::GetBaseReport20Conf&      response,
                      std::string&                                      error,
                      std::string&                                      message) = 0;
    /**
     * @brief Send a GetCertificateStatus20 message to the charge point
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::GetCertificateStatus20Req& request,
                      ocpp::messages::ocpp20::GetCertificateStatus20Conf&      response,
                      std::string&                                             error,
                      std::string&                                             message) = 0;
    /**
     * @brief Send a GetChargingProfiles20 message to the charge point
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::GetChargingProfiles20Req& request,
                      ocpp::messages::ocpp20::GetChargingProfiles20Conf&      response,
                      std::string&                                            error,
                      std::string&                                            message) = 0;
    /**
     * @brief Send a GetCompositeSchedule20 message to the charge point
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::GetCompositeSchedule20Req& request,
                      ocpp::messages::ocpp20::GetCompositeSchedule20Conf&      response,
                      std::string&                                             error,
                      std::string&                                             message) = 0;
    /**
     * @brief Send a GetDisplayMessages20 message to the charge point
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::GetDisplayMessages20Req& request,
                      ocpp::messages::ocpp20::GetDisplayMessages20Conf&      response,
                      std::string&                                           error,
                      std::string&                                           message) = 0;
    /**
     * @brief Send a GetInstalledCertificateIds20 message to the charge point
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::GetInstalledCertificateIds20Req& request,
                      ocpp::messages::ocpp20::GetInstalledCertificateIds20Conf&      response,
                      std::string&                                                   error,
                      std::string&                                                   message) = 0;
    /**
     * @brief Send a GetLocalListVersion20 message to the charge point
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::GetLocalListVersion20Req& request,
                      ocpp::messages::ocpp20::GetLocalListVersion20Conf&      response,
                      std::string&                                            error,
                      std::string&                                            message) = 0;
    /**
     * @brief Send a GetLog20 message to the charge point
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::GetLog20Req& request,
                      ocpp::messages::ocpp20::GetLog20Conf&      response,
                      std::string&                               error,
                      std::string&                               message) = 0;
    /**
     * @brief Send a GetMonitoringReport20 message to the charge point
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::GetMonitoringReport20Req& request,
                      ocpp::messages::ocpp20::GetMonitoringReport20Conf&      response,
                      std::string&                                            error,
                      std::string&                                            message) = 0;
    /**
     * @brief Send a GetReport20 message to the charge point
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::GetReport20Req& request,
                      ocpp::messages::ocpp20::GetReport20Conf&      response,
                      std::string&                                  error,
                      std::string&                                  message) = 0;
    /**
     * @brief Send a GetTransactionStatus20 message to the charge point
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::GetTransactionStatus20Req& request,
                      ocpp::messages::ocpp20::GetTransactionStatus20Conf&      response,
                      std::string&                                             error,
                      std::string&                                             message) = 0;
    /**
     * @brief Send a GetVariables20 message to the charge point
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::GetVariables20Req& request,
                      ocpp::messages::ocpp20::GetVariables20Conf&      response,
                      std::string&                                     error,
                      std::string&                                     message) = 0;
    /**
     * @brief Send a InstallCertificate20 message to the charge point
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::InstallCertificate20Req& request,
                      ocpp::messages::ocpp20::InstallCertificate20Conf&      response,
                      std::string&                                           error,
                      std::string&                                           message) = 0;
    /**
     * @brief Send a PublishFirmware20 message to the charge point
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::PublishFirmware20Req& request,
                      ocpp::messages::ocpp20::PublishFirmware20Conf&      response,
                      std::string&                                        error,
                      std::string&                                        message) = 0;
    /**
     * @brief Send a RequestStartTransaction20 message to the charge point
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::RequestStartTransaction20Req& request,
                      ocpp::messages::ocpp20::RequestStartTransaction20Conf&      response,
                      std::string&                                                error,
                      std::string&                                                message) = 0;
    /**
     * @brief Send a RequestStopTransaction20 message to the charge point
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::RequestStopTransaction20Req& request,
                      ocpp::messages::ocpp20::RequestStopTransaction20Conf&      response,
                      std::string&                                               error,
                      std::string&                                               message) = 0;
    /**
     * @brief Send a ReserveNow20 message to the charge point
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::ReserveNow20Req& request,
                      ocpp::messages::ocpp20::ReserveNow20Conf&      response,
                      std::string&                                   error,
                      std::string&                                   message) = 0;
    /**
     * @brief Send a Reset20 message to the charge point
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::Reset20Req& request,
                      ocpp::messages::ocpp20::Reset20Conf&      response,
                      std::string&                              error,
                      std::string&                              message) = 0;
    /**
     * @brief Send a SendLocalList20 message to the charge point
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::SendLocalList20Req& request,
                      ocpp::messages::ocpp20::SendLocalList20Conf&      response,
                      std::string&                                      error,
                      std::string&                                      message) = 0;
    /**
     * @brief Send a SetChargingProfile20 message to the charge point
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::SetChargingProfile20Req& request,
                      ocpp::messages::ocpp20::SetChargingProfile20Conf&      response,
                      std::string&                                           error,
                      std::string&                                           message) = 0;
    /**
     * @brief Send a SetDisplayMessage20 message to the charge point
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::SetDisplayMessage20Req& request,
                      ocpp::messages::ocpp20::SetDisplayMessage20Conf&      response,
                      std::string&                                          error,
                      std::string&                                          message) = 0;
    /**
     * @brief Send a SetMonitoringBase20 message to the charge point
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::SetMonitoringBase20Req& request,
                      ocpp::messages::ocpp20::SetMonitoringBase20Conf&      response,
                      std::string&                                          error,
                      std::string&                                          message) = 0;
    /**
     * @brief Send a SetMonitoringLevel20 message to the charge point
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::SetMonitoringLevel20Req& request,
                      ocpp::messages::ocpp20::SetMonitoringLevel20Conf&      response,
                      std::string&                                           error,
                      std::string&                                           message) = 0;
    /**
     * @brief Send a SetNetworkProfile20 message to the charge point
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::SetNetworkProfile20Req& request,
                      ocpp::messages::ocpp20::SetNetworkProfile20Conf&      response,
                      std::string&                                          error,
                      std::string&                                          message) = 0;
    /**
     * @brief Send a SetVariableMonitoring20 message to the charge point
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::SetVariableMonitoring20Req& request,
                      ocpp::messages::ocpp20::SetVariableMonitoring20Conf&      response,
                      std::string&                                              error,
                      std::string&                                              message) = 0;
    /**
     * @brief Send a SetVariables20 message to the charge point
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::SetVariables20Req& request,
                      ocpp::messages::ocpp20::SetVariables20Conf&      response,
                      std::string&                                     error,
                      std::string&                                     message) = 0;
    /**
     * @brief Send a TriggerMessage20 message to the charge point
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::TriggerMessage20Req& request,
                      ocpp::messages::ocpp20::TriggerMessage20Conf&      response,
                      std::string&                                       error,
                      std::string&                                       message) = 0;
    /**
     * @brief Send a UnlockConnector20 message to the charge point
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::UnlockConnector20Req& request,
                      ocpp::messages::ocpp20::UnlockConnector20Conf&      response,
                      std::string&                                        error,
                      std::string&                                        message) = 0;
    /**
     * @brief Send a UnpublishFirmware20 message to the charge point
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::UnpublishFirmware20Req& request,
                      ocpp::messages::ocpp20::UnpublishFirmware20Conf&      response,
                      std::string&                                          error,
                      std::string&                                          message) = 0;
    /**
     * @brief Send a UpdateFirmware20 message to the charge point
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::UpdateFirmware20Req& request,
                      ocpp::messages::ocpp20::UpdateFirmware20Conf&      response,
                      std::string&                                       error,
                      std::string&                                       message) = 0;
    /**
     * @brief Register a handler for the BootNotification20 request from the charge point
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(std::function<bool(const ocpp::messages::ocpp20::BootNotification20Req&,
                                                    ocpp::messages::ocpp20::BootNotification20Conf&,
                                                    std::string&,
                                                    std::string&)> handler) = 0;
    /**
     * @brief Register a handler for the Authorize20 request from the charge point
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(
        std::function<
            bool(const ocpp::messages::ocpp20::Authorize20Req&, ocpp::messages::ocpp20::Authorize20Conf&, std::string&, std::string&)>
            handler) = 0;
    /**
     * @brief Register a handler for the ClearedChargingLimit20 request from the charge point
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(std::function<bool(const ocpp::messages::ocpp20::ClearedChargingLimit20Req&,
                                                    ocpp::messages::ocpp20::ClearedChargingLimit20Conf&,
                                                    std::string&,
                                                    std::string&)> handler) = 0;
    /**
     * @brief Register a handler for the CostUpdated20 request from the charge point
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(
        std::function<
            bool(const ocpp::messages::ocpp20::CostUpdated20Req&, ocpp::messages::ocpp20::CostUpdated20Conf&, std::string&, std::string&)>
            handler) = 0;
    /**
     * @brief Register a handler for the DataTransfer20 request from the charge point
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(
        std::function<
            bool(const ocpp::messages::ocpp20::DataTransfer20Req&, ocpp::messages::ocpp20::DataTransfer20Conf&, std::string&, std::string&)>
            handler) = 0;
    /**
     * @brief Register a handler for the FirmwareStatusNotification20 request from the charge point
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(std::function<bool(const ocpp::messages::ocpp20::FirmwareStatusNotification20Req&,
                                                    ocpp::messages::ocpp20::FirmwareStatusNotification20Conf&,
                                                    std::string&,
                                                    std::string&)> handler) = 0;
    /**
     * @brief Register a handler for the Heartbeat20 request from the charge point
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(
        std::function<
            bool(const ocpp::messages::ocpp20::Heartbeat20Req&, ocpp::messages::ocpp20::Heartbeat20Conf&, std::string&, std::string&)>
            handler) = 0;
    /**
     * @brief Register a handler for the LogStatusNotification20 request from the charge point
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(std::function<bool(const ocpp::messages::ocpp20::LogStatusNotification20Req&,
                                                    ocpp::messages::ocpp20::LogStatusNotification20Conf&,
                                                    std::string&,
                                                    std::string&)> handler) = 0;
    /**
     * @brief Register a handler for the MeterValues20 request from the charge point
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(
        std::function<
            bool(const ocpp::messages::ocpp20::MeterValues20Req&, ocpp::messages::ocpp20::MeterValues20Conf&, std::string&, std::string&)>
            handler) = 0;
    /**
     * @brief Register a handler for the NotifyChargingLimit20 request from the charge point
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(std::function<bool(const ocpp::messages::ocpp20::NotifyChargingLimit20Req&,
                                                    ocpp::messages::ocpp20::NotifyChargingLimit20Conf&,
                                                    std::string&,
                                                    std::string&)> handler) = 0;
    /**
     * @brief Register a handler for the NotifyCustomerInformation20 request from the charge point
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(std::function<bool(const ocpp::messages::ocpp20::NotifyCustomerInformation20Req&,
                                                    ocpp::messages::ocpp20::NotifyCustomerInformation20Conf&,
                                                    std::string&,
                                                    std::string&)> handler) = 0;
    /**
     * @brief Register a handler for the NotifyDisplayMessages20 request from the charge point
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(std::function<bool(const ocpp::messages::ocpp20::NotifyDisplayMessages20Req&,
                                                    ocpp::messages::ocpp20::NotifyDisplayMessages20Conf&,
                                                    std::string&,
                                                    std::string&)> handler) = 0;
    /**
     * @brief Register a handler for the NotifyEVChargingNeeds20 request from the charge point
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(std::function<bool(const ocpp::messages::ocpp20::NotifyEVChargingNeeds20Req&,
                                                    ocpp::messages::ocpp20::NotifyEVChargingNeeds20Conf&,
                                                    std::string&,
                                                    std::string&)> handler) = 0;
    /**
     * @brief Register a handler for the NotifyEVChargingSchedule20 request from the charge point
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(std::function<bool(const ocpp::messages::ocpp20::NotifyEVChargingSchedule20Req&,
                                                    ocpp::messages::ocpp20::NotifyEVChargingSchedule20Conf&,
                                                    std::string&,
                                                    std::string&)> handler) = 0;
    /**
     * @brief Register a handler for the NotifyEvent20 request from the charge point
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(
        std::function<
            bool(const ocpp::messages::ocpp20::NotifyEvent20Req&, ocpp::messages::ocpp20::NotifyEvent20Conf&, std::string&, std::string&)>
            handler) = 0;
    /**
     * @brief Register a handler for the NotifyMonitoringReport20 request from the charge point
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(std::function<bool(const ocpp::messages::ocpp20::NotifyMonitoringReport20Req&,
                                                    ocpp::messages::ocpp20::NotifyMonitoringReport20Conf&,
                                                    std::string&,
                                                    std::string&)> handler) = 0;
    /**
     * @brief Register a handler for the NotifyReport20 request from the charge point
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(
        std::function<
            bool(const ocpp::messages::ocpp20::NotifyReport20Req&, ocpp::messages::ocpp20::NotifyReport20Conf&, std::string&, std::string&)>
            handler) = 0;
    /**
     * @brief Register a handler for the PublishFirmwareStatusNotification20 request from the charge point
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(std::function<bool(const ocpp::messages::ocpp20::PublishFirmwareStatusNotification20Req&,
                                                    ocpp::messages::ocpp20::PublishFirmwareStatusNotification20Conf&,
                                                    std::string&,
                                                    std::string&)> handler) = 0;
    /**
     * @brief Register a handler for the ReportChargingProfiles20 request from the charge point
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(std::function<bool(const ocpp::messages::ocpp20::ReportChargingProfiles20Req&,
                                                    ocpp::messages::ocpp20::ReportChargingProfiles20Conf&,
                                                    std::string&,
                                                    std::string&)> handler) = 0;
    /**
     * @brief Register a handler for the ReservationStatusUpdate20 request from the charge point
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(std::function<bool(const ocpp::messages::ocpp20::ReservationStatusUpdate20Req&,
                                                    ocpp::messages::ocpp20::ReservationStatusUpdate20Conf&,
                                                    std::string&,
                                                    std::string&)> handler) = 0;
    /**
     * @brief Register a handler for the SecurityEventNotification20 request from the charge point
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(std::function<bool(const ocpp::messages::ocpp20::SecurityEventNotification20Req&,
                                                    ocpp::messages::ocpp20::SecurityEventNotification20Conf&,
                                                    std::string&,
                                                    std::string&)> handler) = 0;
    /**
     * @brief Register a handler for the SignCertificate20 request from the charge point
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(std::function<bool(const ocpp::messages::ocpp20::SignCertificate20Req&,
                                                    ocpp::messages::ocpp20::SignCertificate20Conf&,
                                                    std::string&,
                                                    std::string&)> handler) = 0;
    /**
     * @brief Register a handler for the StatusNotification20 request from the charge point
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(std::function<bool(const ocpp::messages::ocpp20::StatusNotification20Req&,
                                                    ocpp::messages::ocpp20::StatusNotification20Conf&,
                                                    std::string&,
                                                    std::string&)> handler) = 0;
    /**
     * @brief Register a handler for the TransactionEvent20 request from the charge point
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(std::function<bool(const ocpp::messages::ocpp20::TransactionEvent20Req&,
                                                    ocpp::messages::ocpp20::TransactionEvent20Conf&,
                                                    std::string&,
                                                    std::string&)> handler) = 0;
};

} // namespace ocpp20
} // namespace localcontroller
} // namespace ocpp

#endif // OPENOCPP_OCPP20_ICHARGEPOINTPROXY20_H