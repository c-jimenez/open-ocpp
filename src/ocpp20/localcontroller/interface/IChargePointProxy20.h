/*
Copyright (c) 2020 Cedric Jimenez
This file is part of OpenOCPP.

OpenOCPP is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 2.1 of the License, or
(at your option) any later version.

OpenOCPP is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OpenOCPP. If not, see <http://www.gnu.org/licenses/>.
*/

/* Generated by json2cpp */

#ifndef OPENOCPP_OCPP20_ICHARGEPOINTPROXY20_H
#define OPENOCPP_OCPP20_ICHARGEPOINTPROXY20_H

#include "CancelReservation.h"
#include "CertificateSigned.h"
#include "ChangeAvailability.h"
#include "ClearCache.h"
#include "ClearChargingProfile.h"
#include "ClearDisplayMessage.h"
#include "ClearVariableMonitoring.h"
#include "CustomerInformation.h"
#include "DataTransfer.h"
#include "DeleteCertificate.h"
#include "Get15118EVCertificate.h"
#include "GetBaseReport.h"
#include "GetCertificateStatus.h"
#include "GetChargingProfiles.h"
#include "GetCompositeSchedule.h"
#include "GetDisplayMessages.h"
#include "GetInstalledCertificateIds.h"
#include "GetLocalListVersion.h"
#include "GetLog.h"
#include "GetMonitoringReport.h"
#include "GetReport.h"
#include "GetTransactionStatus.h"
#include "GetVariables.h"
#include "ICentralSystem20.h"
#include "ICentralSystemProxy20.h"
#include "ILocalControllerConfig20.h"
#include "InstallCertificate.h"
#include "PublishFirmware.h"
#include "RequestStartTransaction.h"
#include "RequestStopTransaction.h"
#include "ReserveNow.h"
#include "Reset.h"
#include "RpcPool.h"
#include "SendLocalList.h"
#include "SetChargingProfile.h"
#include "SetDisplayMessage.h"
#include "SetMonitoringBase.h"
#include "SetMonitoringLevel.h"
#include "SetNetworkProfile.h"
#include "SetVariableMonitoring.h"
#include "SetVariables.h"
#include "TriggerMessage.h"
#include "UnlockConnector.h"
#include "UnpublishFirmware.h"
#include "UpdateFirmware.h"

#include <functional>
#include <memory>

namespace ocpp
{
namespace localcontroller
{
namespace ocpp20
{

/** @brief Interface for the charge point proxy implementations */
class IChargePointProxy20
{
  public:
    /** @brief Destructor */
    virtual ~IChargePointProxy20() { }

    /**
     * @brief Instanciate local controller's charge point proxy from a central system's charge point proxy
     * @param central_system_proxy Central system's charge point proxy
     * @param stack_config Stack configuration for local controller
     * @param rpc_pool RPC pool
     */
    static std::shared_ptr<IChargePointProxy20> createFrom(
        std::shared_ptr<ocpp::centralsystem::ocpp20::ICentralSystem20::IChargePoint20>& central_system_proxy,
        const ocpp::config::ILocalControllerConfig20&                                   stack_config,
        ocpp::rpc::RpcPool&                                                             rpc_pool);

    /**
     * @brief Get the IP address of the charge point
     * @return IP address of the charge point
     */
    virtual const std::string& ipAddress() const = 0;

    /**
     * @brief Get the charge point identifier
     * @return charge point identifier
     */
    virtual const std::string& identifier() const = 0;

    /**
     * @brief Set the call request timeout
     * @param timeout New timeout value
     */
    virtual void setTimeout(std::chrono::milliseconds timeout) = 0;

    /** @brief Disconnect the charge point */
    virtual void disconnect() = 0;

    /**
     * @brief Get the associated central system proxy
     * @return Associated central system proxy
     */
    virtual std::shared_ptr<ICentralSystemProxy20> centralSystemProxy() = 0;

    /**
     * @brief Register a listener to the proxy events
     * @param listener Listener to the proxy events
     */
    virtual void registerListener(ILocalControllerProxyEventsHandler20& listener) = 0;

    // OCPP operations
    /**
     * @brief Send a CancelReservation message to the charge point
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::CancelReservationReq& request,
                      ocpp::messages::ocpp20::CancelReservationConf&      response,
                      std::string&                                        error,
                      std::string&                                        message) = 0;
    /**
     * @brief Send a CertificateSigned message to the charge point
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::CertificateSignedReq& request,
                      ocpp::messages::ocpp20::CertificateSignedConf&      response,
                      std::string&                                        error,
                      std::string&                                        message) = 0;
    /**
     * @brief Send a ChangeAvailability message to the charge point
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::ChangeAvailabilityReq& request,
                      ocpp::messages::ocpp20::ChangeAvailabilityConf&      response,
                      std::string&                                         error,
                      std::string&                                         message) = 0;
    /**
     * @brief Send a ClearCache message to the charge point
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::ClearCacheReq& request,
                      ocpp::messages::ocpp20::ClearCacheConf&      response,
                      std::string&                                 error,
                      std::string&                                 message) = 0;
    /**
     * @brief Send a ClearChargingProfile message to the charge point
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::ClearChargingProfileReq& request,
                      ocpp::messages::ocpp20::ClearChargingProfileConf&      response,
                      std::string&                                           error,
                      std::string&                                           message) = 0;
    /**
     * @brief Send a ClearDisplayMessage message to the charge point
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::ClearDisplayMessageReq& request,
                      ocpp::messages::ocpp20::ClearDisplayMessageConf&      response,
                      std::string&                                          error,
                      std::string&                                          message) = 0;
    /**
     * @brief Send a ClearVariableMonitoring message to the charge point
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::ClearVariableMonitoringReq& request,
                      ocpp::messages::ocpp20::ClearVariableMonitoringConf&      response,
                      std::string&                                              error,
                      std::string&                                              message) = 0;
    /**
     * @brief Send a CustomerInformation message to the charge point
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::CustomerInformationReq& request,
                      ocpp::messages::ocpp20::CustomerInformationConf&      response,
                      std::string&                                          error,
                      std::string&                                          message) = 0;
    /**
     * @brief Send a DataTransfer message to the charge point
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::DataTransferReq& request,
                      ocpp::messages::ocpp20::DataTransferConf&      response,
                      std::string&                                   error,
                      std::string&                                   message) = 0;
    /**
     * @brief Send a DeleteCertificate message to the charge point
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::DeleteCertificateReq& request,
                      ocpp::messages::ocpp20::DeleteCertificateConf&      response,
                      std::string&                                        error,
                      std::string&                                        message) = 0;
    /**
     * @brief Send a Get15118EVCertificate message to the charge point
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::Get15118EVCertificateReq& request,
                      ocpp::messages::ocpp20::Get15118EVCertificateConf&      response,
                      std::string&                                            error,
                      std::string&                                            message) = 0;
    /**
     * @brief Send a GetBaseReport message to the charge point
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::GetBaseReportReq& request,
                      ocpp::messages::ocpp20::GetBaseReportConf&      response,
                      std::string&                                    error,
                      std::string&                                    message) = 0;
    /**
     * @brief Send a GetCertificateStatus message to the charge point
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::GetCertificateStatusReq& request,
                      ocpp::messages::ocpp20::GetCertificateStatusConf&      response,
                      std::string&                                           error,
                      std::string&                                           message) = 0;
    /**
     * @brief Send a GetChargingProfiles message to the charge point
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::GetChargingProfilesReq& request,
                      ocpp::messages::ocpp20::GetChargingProfilesConf&      response,
                      std::string&                                          error,
                      std::string&                                          message) = 0;
    /**
     * @brief Send a GetCompositeSchedule message to the charge point
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::GetCompositeScheduleReq& request,
                      ocpp::messages::ocpp20::GetCompositeScheduleConf&      response,
                      std::string&                                           error,
                      std::string&                                           message) = 0;
    /**
     * @brief Send a GetDisplayMessages message to the charge point
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::GetDisplayMessagesReq& request,
                      ocpp::messages::ocpp20::GetDisplayMessagesConf&      response,
                      std::string&                                         error,
                      std::string&                                         message) = 0;
    /**
     * @brief Send a GetInstalledCertificateIds message to the charge point
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::GetInstalledCertificateIdsReq& request,
                      ocpp::messages::ocpp20::GetInstalledCertificateIdsConf&      response,
                      std::string&                                                 error,
                      std::string&                                                 message) = 0;
    /**
     * @brief Send a GetLocalListVersion message to the charge point
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::GetLocalListVersionReq& request,
                      ocpp::messages::ocpp20::GetLocalListVersionConf&      response,
                      std::string&                                          error,
                      std::string&                                          message) = 0;
    /**
     * @brief Send a GetLog message to the charge point
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::GetLogReq& request,
                      ocpp::messages::ocpp20::GetLogConf&      response,
                      std::string&                             error,
                      std::string&                             message) = 0;
    /**
     * @brief Send a GetMonitoringReport message to the charge point
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::GetMonitoringReportReq& request,
                      ocpp::messages::ocpp20::GetMonitoringReportConf&      response,
                      std::string&                                          error,
                      std::string&                                          message) = 0;
    /**
     * @brief Send a GetReport message to the charge point
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::GetReportReq& request,
                      ocpp::messages::ocpp20::GetReportConf&      response,
                      std::string&                                error,
                      std::string&                                message) = 0;
    /**
     * @brief Send a GetTransactionStatus message to the charge point
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::GetTransactionStatusReq& request,
                      ocpp::messages::ocpp20::GetTransactionStatusConf&      response,
                      std::string&                                           error,
                      std::string&                                           message) = 0;
    /**
     * @brief Send a GetVariables message to the charge point
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::GetVariablesReq& request,
                      ocpp::messages::ocpp20::GetVariablesConf&      response,
                      std::string&                                   error,
                      std::string&                                   message) = 0;
    /**
     * @brief Send a InstallCertificate message to the charge point
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::InstallCertificateReq& request,
                      ocpp::messages::ocpp20::InstallCertificateConf&      response,
                      std::string&                                         error,
                      std::string&                                         message) = 0;
    /**
     * @brief Send a PublishFirmware message to the charge point
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::PublishFirmwareReq& request,
                      ocpp::messages::ocpp20::PublishFirmwareConf&      response,
                      std::string&                                      error,
                      std::string&                                      message) = 0;
    /**
     * @brief Send a RequestStartTransaction message to the charge point
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::RequestStartTransactionReq& request,
                      ocpp::messages::ocpp20::RequestStartTransactionConf&      response,
                      std::string&                                              error,
                      std::string&                                              message) = 0;
    /**
     * @brief Send a RequestStopTransaction message to the charge point
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::RequestStopTransactionReq& request,
                      ocpp::messages::ocpp20::RequestStopTransactionConf&      response,
                      std::string&                                             error,
                      std::string&                                             message) = 0;
    /**
     * @brief Send a ReserveNow message to the charge point
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::ReserveNowReq& request,
                      ocpp::messages::ocpp20::ReserveNowConf&      response,
                      std::string&                                 error,
                      std::string&                                 message) = 0;
    /**
     * @brief Send a Reset message to the charge point
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::ResetReq& request,
                      ocpp::messages::ocpp20::ResetConf&      response,
                      std::string&                            error,
                      std::string&                            message) = 0;
    /**
     * @brief Send a SendLocalList message to the charge point
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::SendLocalListReq& request,
                      ocpp::messages::ocpp20::SendLocalListConf&      response,
                      std::string&                                    error,
                      std::string&                                    message) = 0;
    /**
     * @brief Send a SetChargingProfile message to the charge point
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::SetChargingProfileReq& request,
                      ocpp::messages::ocpp20::SetChargingProfileConf&      response,
                      std::string&                                         error,
                      std::string&                                         message) = 0;
    /**
     * @brief Send a SetDisplayMessage message to the charge point
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::SetDisplayMessageReq& request,
                      ocpp::messages::ocpp20::SetDisplayMessageConf&      response,
                      std::string&                                        error,
                      std::string&                                        message) = 0;
    /**
     * @brief Send a SetMonitoringBase message to the charge point
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::SetMonitoringBaseReq& request,
                      ocpp::messages::ocpp20::SetMonitoringBaseConf&      response,
                      std::string&                                        error,
                      std::string&                                        message) = 0;
    /**
     * @brief Send a SetMonitoringLevel message to the charge point
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::SetMonitoringLevelReq& request,
                      ocpp::messages::ocpp20::SetMonitoringLevelConf&      response,
                      std::string&                                         error,
                      std::string&                                         message) = 0;
    /**
     * @brief Send a SetNetworkProfile message to the charge point
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::SetNetworkProfileReq& request,
                      ocpp::messages::ocpp20::SetNetworkProfileConf&      response,
                      std::string&                                        error,
                      std::string&                                        message) = 0;
    /**
     * @brief Send a SetVariableMonitoring message to the charge point
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::SetVariableMonitoringReq& request,
                      ocpp::messages::ocpp20::SetVariableMonitoringConf&      response,
                      std::string&                                            error,
                      std::string&                                            message) = 0;
    /**
     * @brief Send a SetVariables message to the charge point
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::SetVariablesReq& request,
                      ocpp::messages::ocpp20::SetVariablesConf&      response,
                      std::string&                                   error,
                      std::string&                                   message) = 0;
    /**
     * @brief Send a TriggerMessage message to the charge point
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::TriggerMessageReq& request,
                      ocpp::messages::ocpp20::TriggerMessageConf&      response,
                      std::string&                                     error,
                      std::string&                                     message) = 0;
    /**
     * @brief Send a UnlockConnector message to the charge point
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::UnlockConnectorReq& request,
                      ocpp::messages::ocpp20::UnlockConnectorConf&      response,
                      std::string&                                      error,
                      std::string&                                      message) = 0;
    /**
     * @brief Send a UnpublishFirmware message to the charge point
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::UnpublishFirmwareReq& request,
                      ocpp::messages::ocpp20::UnpublishFirmwareConf&      response,
                      std::string&                                        error,
                      std::string&                                        message) = 0;
    /**
     * @brief Send a UpdateFirmware message to the charge point
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::UpdateFirmwareReq& request,
                      ocpp::messages::ocpp20::UpdateFirmwareConf&      response,
                      std::string&                                     error,
                      std::string&                                     message) = 0;
    /**
     * @brief Register a handler for the BootNotification request from the charge point
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(
        std::function<bool(
            const ocpp::messages::ocpp20::BootNotificationReq&, ocpp::messages::ocpp20::BootNotificationConf&, std::string&, std::string&)>
            handler) = 0;
    /**
     * @brief Register a handler for the Authorize request from the charge point
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(
        std::function<bool(const ocpp::messages::ocpp20::AuthorizeReq&, ocpp::messages::ocpp20::AuthorizeConf&, std::string&, std::string&)>
            handler) = 0;
    /**
     * @brief Register a handler for the ClearedChargingLimit request from the charge point
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(std::function<bool(const ocpp::messages::ocpp20::ClearedChargingLimitReq&,
                                                    ocpp::messages::ocpp20::ClearedChargingLimitConf&,
                                                    std::string&,
                                                    std::string&)> handler) = 0;
    /**
     * @brief Register a handler for the CostUpdated request from the charge point
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(
        std::function<
            bool(const ocpp::messages::ocpp20::CostUpdatedReq&, ocpp::messages::ocpp20::CostUpdatedConf&, std::string&, std::string&)>
            handler) = 0;
    /**
     * @brief Register a handler for the DataTransfer request from the charge point
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(
        std::function<
            bool(const ocpp::messages::ocpp20::DataTransferReq&, ocpp::messages::ocpp20::DataTransferConf&, std::string&, std::string&)>
            handler) = 0;
    /**
     * @brief Register a handler for the FirmwareStatusNotification request from the charge point
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(std::function<bool(const ocpp::messages::ocpp20::FirmwareStatusNotificationReq&,
                                                    ocpp::messages::ocpp20::FirmwareStatusNotificationConf&,
                                                    std::string&,
                                                    std::string&)> handler) = 0;
    /**
     * @brief Register a handler for the Heartbeat request from the charge point
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(
        std::function<bool(const ocpp::messages::ocpp20::HeartbeatReq&, ocpp::messages::ocpp20::HeartbeatConf&, std::string&, std::string&)>
            handler) = 0;
    /**
     * @brief Register a handler for the LogStatusNotification request from the charge point
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(std::function<bool(const ocpp::messages::ocpp20::LogStatusNotificationReq&,
                                                    ocpp::messages::ocpp20::LogStatusNotificationConf&,
                                                    std::string&,
                                                    std::string&)> handler) = 0;
    /**
     * @brief Register a handler for the MeterValues request from the charge point
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(
        std::function<
            bool(const ocpp::messages::ocpp20::MeterValuesReq&, ocpp::messages::ocpp20::MeterValuesConf&, std::string&, std::string&)>
            handler) = 0;
    /**
     * @brief Register a handler for the NotifyChargingLimit request from the charge point
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(std::function<bool(const ocpp::messages::ocpp20::NotifyChargingLimitReq&,
                                                    ocpp::messages::ocpp20::NotifyChargingLimitConf&,
                                                    std::string&,
                                                    std::string&)> handler) = 0;
    /**
     * @brief Register a handler for the NotifyCustomerInformation request from the charge point
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(std::function<bool(const ocpp::messages::ocpp20::NotifyCustomerInformationReq&,
                                                    ocpp::messages::ocpp20::NotifyCustomerInformationConf&,
                                                    std::string&,
                                                    std::string&)> handler) = 0;
    /**
     * @brief Register a handler for the NotifyDisplayMessages request from the charge point
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(std::function<bool(const ocpp::messages::ocpp20::NotifyDisplayMessagesReq&,
                                                    ocpp::messages::ocpp20::NotifyDisplayMessagesConf&,
                                                    std::string&,
                                                    std::string&)> handler) = 0;
    /**
     * @brief Register a handler for the NotifyEVChargingNeeds request from the charge point
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(std::function<bool(const ocpp::messages::ocpp20::NotifyEVChargingNeedsReq&,
                                                    ocpp::messages::ocpp20::NotifyEVChargingNeedsConf&,
                                                    std::string&,
                                                    std::string&)> handler) = 0;
    /**
     * @brief Register a handler for the NotifyEVChargingSchedule request from the charge point
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(std::function<bool(const ocpp::messages::ocpp20::NotifyEVChargingScheduleReq&,
                                                    ocpp::messages::ocpp20::NotifyEVChargingScheduleConf&,
                                                    std::string&,
                                                    std::string&)> handler) = 0;
    /**
     * @brief Register a handler for the NotifyEvent request from the charge point
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(
        std::function<
            bool(const ocpp::messages::ocpp20::NotifyEventReq&, ocpp::messages::ocpp20::NotifyEventConf&, std::string&, std::string&)>
            handler) = 0;
    /**
     * @brief Register a handler for the NotifyMonitoringReport request from the charge point
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(std::function<bool(const ocpp::messages::ocpp20::NotifyMonitoringReportReq&,
                                                    ocpp::messages::ocpp20::NotifyMonitoringReportConf&,
                                                    std::string&,
                                                    std::string&)> handler) = 0;
    /**
     * @brief Register a handler for the NotifyReport request from the charge point
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(
        std::function<
            bool(const ocpp::messages::ocpp20::NotifyReportReq&, ocpp::messages::ocpp20::NotifyReportConf&, std::string&, std::string&)>
            handler) = 0;
    /**
     * @brief Register a handler for the PublishFirmwareStatusNotification request from the charge point
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(std::function<bool(const ocpp::messages::ocpp20::PublishFirmwareStatusNotificationReq&,
                                                    ocpp::messages::ocpp20::PublishFirmwareStatusNotificationConf&,
                                                    std::string&,
                                                    std::string&)> handler) = 0;
    /**
     * @brief Register a handler for the ReportChargingProfiles request from the charge point
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(std::function<bool(const ocpp::messages::ocpp20::ReportChargingProfilesReq&,
                                                    ocpp::messages::ocpp20::ReportChargingProfilesConf&,
                                                    std::string&,
                                                    std::string&)> handler) = 0;
    /**
     * @brief Register a handler for the ReservationStatusUpdate request from the charge point
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(std::function<bool(const ocpp::messages::ocpp20::ReservationStatusUpdateReq&,
                                                    ocpp::messages::ocpp20::ReservationStatusUpdateConf&,
                                                    std::string&,
                                                    std::string&)> handler) = 0;
    /**
     * @brief Register a handler for the SecurityEventNotification request from the charge point
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(std::function<bool(const ocpp::messages::ocpp20::SecurityEventNotificationReq&,
                                                    ocpp::messages::ocpp20::SecurityEventNotificationConf&,
                                                    std::string&,
                                                    std::string&)> handler) = 0;
    /**
     * @brief Register a handler for the SignCertificate request from the charge point
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(
        std::function<bool(
            const ocpp::messages::ocpp20::SignCertificateReq&, ocpp::messages::ocpp20::SignCertificateConf&, std::string&, std::string&)>
            handler) = 0;
    /**
     * @brief Register a handler for the StatusNotification request from the charge point
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(std::function<bool(const ocpp::messages::ocpp20::StatusNotificationReq&,
                                                    ocpp::messages::ocpp20::StatusNotificationConf&,
                                                    std::string&,
                                                    std::string&)> handler) = 0;
    /**
     * @brief Register a handler for the TransactionEvent request from the charge point
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(
        std::function<bool(
            const ocpp::messages::ocpp20::TransactionEventReq&, ocpp::messages::ocpp20::TransactionEventConf&, std::string&, std::string&)>
            handler) = 0;
};

} // namespace ocpp20
} // namespace localcontroller
} // namespace ocpp

#endif // OPENOCPP_OCPP20_ICHARGEPOINTPROXY20_H