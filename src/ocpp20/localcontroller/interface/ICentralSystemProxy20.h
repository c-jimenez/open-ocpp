/*
Copyright (c) 2020 Cedric Jimenez
This file is part of OpenOCPP.

OpenOCPP is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 2.1 of the License, or
(at your option) any later version.

OpenOCPP is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OpenOCPP. If not, see <http://www.gnu.org/licenses/>.
*/

/* Generated by json2cpp */

#ifndef OPENOCPP_OCPP20_ICENTRALSYSTEMPROXY20_H
#define OPENOCPP_OCPP20_ICENTRALSYSTEMPROXY20_H

#include "Authorize20.h"
#include "BootNotification20.h"
#include "CancelReservation20.h"
#include "CertificateSigned20.h"
#include "ChangeAvailability20.h"
#include "ClearCache20.h"
#include "ClearChargingProfile20.h"
#include "ClearDisplayMessage20.h"
#include "ClearVariableMonitoring20.h"
#include "ClearedChargingLimit20.h"
#include "CostUpdated20.h"
#include "CustomerInformation20.h"
#include "DataTransfer20.h"
#include "DeleteCertificate20.h"
#include "FirmwareStatusNotification20.h"
#include "Get15118EVCertificate20.h"
#include "GetBaseReport20.h"
#include "GetCertificateStatus20.h"
#include "GetChargingProfiles20.h"
#include "GetCompositeSchedule20.h"
#include "GetDisplayMessages20.h"
#include "GetInstalledCertificateIds20.h"
#include "GetLocalListVersion20.h"
#include "GetLog20.h"
#include "GetMonitoringReport20.h"
#include "GetReport20.h"
#include "GetTransactionStatus20.h"
#include "GetVariables20.h"
#include "Heartbeat20.h"
#include "IWebsocketClient.h"
#include "InstallCertificate20.h"
#include "LogStatusNotification20.h"
#include "MeterValues20.h"
#include "NotifyChargingLimit20.h"
#include "NotifyCustomerInformation20.h"
#include "NotifyDisplayMessages20.h"
#include "NotifyEVChargingNeeds20.h"
#include "NotifyEVChargingSchedule20.h"
#include "NotifyEvent20.h"
#include "NotifyMonitoringReport20.h"
#include "NotifyReport20.h"
#include "PublishFirmware20.h"
#include "PublishFirmwareStatusNotification20.h"
#include "ReportChargingProfiles20.h"
#include "RequestStartTransaction20.h"
#include "RequestStopTransaction20.h"
#include "ReservationStatusUpdate20.h"
#include "ReserveNow20.h"
#include "Reset20.h"
#include "SecurityEventNotification20.h"
#include "SendLocalList20.h"
#include "SetChargingProfile20.h"
#include "SetDisplayMessage20.h"
#include "SetMonitoringBase20.h"
#include "SetMonitoringLevel20.h"
#include "SetNetworkProfile20.h"
#include "SetVariableMonitoring20.h"
#include "SetVariables20.h"
#include "SignCertificate20.h"
#include "StatusNotification20.h"
#include "TransactionEvent20.h"
#include "TriggerMessage20.h"
#include "UnlockConnector20.h"
#include "UnpublishFirmware20.h"
#include "UpdateFirmware20.h"

#include <functional>

namespace ocpp
{
namespace localcontroller
{
namespace ocpp20
{

class ILocalControllerProxyEventsHandler20;

/** @brief Interface for central system proxy implementations */
class ICentralSystemProxy20
{
  public:
    /** @brief Destructor */
    virtual ~ICentralSystemProxy20() { }

    /**
     * @brief Get the charge point identifier
     * @return charge point identifier
     */
    virtual const std::string& identifier() const = 0;

    /**
     * @brief Set the call request timeout
     * @param timeout New timeout value
     */
    virtual void setTimeout(std::chrono::milliseconds timeout) = 0;

    /**
     * @brief Connect to the central system
     * @param url URL to connect to
     * @param credentials Credentials to use
     * @param connect_timeout Connection timeout in ms
     * @param retry_interval Retry interval in ms when connection cannot be established (0 = no retry)
     * @param ping_interval Interval between 2 websocket PING messages when the socket is idle
     * @return true if the client has been started, false otherwise
     */
    virtual bool connect(const std::string&                                     url,
                         const ocpp::websockets::IWebsocketClient::Credentials& credentials,
                         std::chrono::milliseconds                              connect_timeout = std::chrono::seconds(5),
                         std::chrono::milliseconds                              retry_interval  = std::chrono::seconds(5),
                         std::chrono::milliseconds                              ping_interval   = std::chrono::seconds(5)) = 0;

    /** @brief Disconnect from the central system */
    virtual void disconnect() = 0;

    /**
     * @brief Indicate if the connection with the central system is active
     * @return true if the connection is active, false otherwise
     */
    virtual bool isConnected() const = 0;

    /**
     * @brief Register a listener to the proxy events
     * @param listener Listener to the proxy events
     */
    virtual void registerListener(ILocalControllerProxyEventsHandler20& listener) = 0;

    // OCPP operations
    /**
     * @brief Send a BootNotification message to the central system
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::BootNotificationReq& request,
                      ocpp::messages::ocpp20::BootNotificationConf&      response,
                      std::string&                                       error,
                      std::string&                                       message) = 0;
    /**
     * @brief Send a Authorize message to the central system
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::AuthorizeReq& request,
                      ocpp::messages::ocpp20::AuthorizeConf&      response,
                      std::string&                                error,
                      std::string&                                message) = 0;
    /**
     * @brief Send a ClearedChargingLimit message to the central system
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::ClearedChargingLimitReq& request,
                      ocpp::messages::ocpp20::ClearedChargingLimitConf&      response,
                      std::string&                                           error,
                      std::string&                                           message) = 0;
    /**
     * @brief Send a CostUpdated message to the central system
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::CostUpdatedReq& request,
                      ocpp::messages::ocpp20::CostUpdatedConf&      response,
                      std::string&                                  error,
                      std::string&                                  message) = 0;
    /**
     * @brief Send a DataTransfer message to the central system
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::DataTransferReq& request,
                      ocpp::messages::ocpp20::DataTransferConf&      response,
                      std::string&                                   error,
                      std::string&                                   message) = 0;
    /**
     * @brief Send a FirmwareStatusNotification message to the central system
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::FirmwareStatusNotificationReq& request,
                      ocpp::messages::ocpp20::FirmwareStatusNotificationConf&      response,
                      std::string&                                                 error,
                      std::string&                                                 message) = 0;
    /**
     * @brief Send a Heartbeat message to the central system
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::HeartbeatReq& request,
                      ocpp::messages::ocpp20::HeartbeatConf&      response,
                      std::string&                                error,
                      std::string&                                message) = 0;
    /**
     * @brief Send a LogStatusNotification message to the central system
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::LogStatusNotificationReq& request,
                      ocpp::messages::ocpp20::LogStatusNotificationConf&      response,
                      std::string&                                            error,
                      std::string&                                            message) = 0;
    /**
     * @brief Send a MeterValues message to the central system
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::MeterValuesReq& request,
                      ocpp::messages::ocpp20::MeterValuesConf&      response,
                      std::string&                                  error,
                      std::string&                                  message) = 0;
    /**
     * @brief Send a NotifyChargingLimit message to the central system
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::NotifyChargingLimitReq& request,
                      ocpp::messages::ocpp20::NotifyChargingLimitConf&      response,
                      std::string&                                          error,
                      std::string&                                          message) = 0;
    /**
     * @brief Send a NotifyCustomerInformation message to the central system
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::NotifyCustomerInformationReq& request,
                      ocpp::messages::ocpp20::NotifyCustomerInformationConf&      response,
                      std::string&                                                error,
                      std::string&                                                message) = 0;
    /**
     * @brief Send a NotifyDisplayMessages message to the central system
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::NotifyDisplayMessagesReq& request,
                      ocpp::messages::ocpp20::NotifyDisplayMessagesConf&      response,
                      std::string&                                            error,
                      std::string&                                            message) = 0;
    /**
     * @brief Send a NotifyEVChargingNeeds message to the central system
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::NotifyEVChargingNeedsReq& request,
                      ocpp::messages::ocpp20::NotifyEVChargingNeedsConf&      response,
                      std::string&                                            error,
                      std::string&                                            message) = 0;
    /**
     * @brief Send a NotifyEVChargingSchedule message to the central system
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::NotifyEVChargingScheduleReq& request,
                      ocpp::messages::ocpp20::NotifyEVChargingScheduleConf&      response,
                      std::string&                                               error,
                      std::string&                                               message) = 0;
    /**
     * @brief Send a NotifyEvent message to the central system
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::NotifyEventReq& request,
                      ocpp::messages::ocpp20::NotifyEventConf&      response,
                      std::string&                                  error,
                      std::string&                                  message) = 0;
    /**
     * @brief Send a NotifyMonitoringReport message to the central system
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::NotifyMonitoringReportReq& request,
                      ocpp::messages::ocpp20::NotifyMonitoringReportConf&      response,
                      std::string&                                             error,
                      std::string&                                             message) = 0;
    /**
     * @brief Send a NotifyReport message to the central system
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::NotifyReportReq& request,
                      ocpp::messages::ocpp20::NotifyReportConf&      response,
                      std::string&                                   error,
                      std::string&                                   message) = 0;
    /**
     * @brief Send a PublishFirmwareStatusNotification message to the central system
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::PublishFirmwareStatusNotificationReq& request,
                      ocpp::messages::ocpp20::PublishFirmwareStatusNotificationConf&      response,
                      std::string&                                                        error,
                      std::string&                                                        message) = 0;
    /**
     * @brief Send a ReportChargingProfiles message to the central system
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::ReportChargingProfilesReq& request,
                      ocpp::messages::ocpp20::ReportChargingProfilesConf&      response,
                      std::string&                                             error,
                      std::string&                                             message) = 0;
    /**
     * @brief Send a ReservationStatusUpdate message to the central system
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::ReservationStatusUpdateReq& request,
                      ocpp::messages::ocpp20::ReservationStatusUpdateConf&      response,
                      std::string&                                              error,
                      std::string&                                              message) = 0;
    /**
     * @brief Send a SecurityEventNotification message to the central system
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::SecurityEventNotificationReq& request,
                      ocpp::messages::ocpp20::SecurityEventNotificationConf&      response,
                      std::string&                                                error,
                      std::string&                                                message) = 0;
    /**
     * @brief Send a SignCertificate message to the central system
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::SignCertificateReq& request,
                      ocpp::messages::ocpp20::SignCertificateConf&      response,
                      std::string&                                      error,
                      std::string&                                      message) = 0;
    /**
     * @brief Send a StatusNotification message to the central system
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::StatusNotificationReq& request,
                      ocpp::messages::ocpp20::StatusNotificationConf&      response,
                      std::string&                                         error,
                      std::string&                                         message) = 0;
    /**
     * @brief Send a TransactionEvent message to the central system
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::TransactionEventReq& request,
                      ocpp::messages::ocpp20::TransactionEventConf&      response,
                      std::string&                                       error,
                      std::string&                                       message) = 0;
    /**
     * @brief Register a handler for the CancelReservation request from the central system
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(std::function<bool(const ocpp::messages::ocpp20::CancelReservationReq&,
                                                    ocpp::messages::ocpp20::CancelReservationConf&,
                                                    std::string&,
                                                    std::string&)> handler) = 0;
    /**
     * @brief Register a handler for the CertificateSigned request from the central system
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(std::function<bool(const ocpp::messages::ocpp20::CertificateSignedReq&,
                                                    ocpp::messages::ocpp20::CertificateSignedConf&,
                                                    std::string&,
                                                    std::string&)> handler) = 0;
    /**
     * @brief Register a handler for the ChangeAvailability request from the central system
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(std::function<bool(const ocpp::messages::ocpp20::ChangeAvailabilityReq&,
                                                    ocpp::messages::ocpp20::ChangeAvailabilityConf&,
                                                    std::string&,
                                                    std::string&)> handler) = 0;
    /**
     * @brief Register a handler for the ClearCache request from the central system
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(
        std::function<
            bool(const ocpp::messages::ocpp20::ClearCacheReq&, ocpp::messages::ocpp20::ClearCacheConf&, std::string&, std::string&)>
            handler) = 0;
    /**
     * @brief Register a handler for the ClearChargingProfile request from the central system
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(std::function<bool(const ocpp::messages::ocpp20::ClearChargingProfileReq&,
                                                    ocpp::messages::ocpp20::ClearChargingProfileConf&,
                                                    std::string&,
                                                    std::string&)> handler) = 0;
    /**
     * @brief Register a handler for the ClearDisplayMessage request from the central system
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(std::function<bool(const ocpp::messages::ocpp20::ClearDisplayMessageReq&,
                                                    ocpp::messages::ocpp20::ClearDisplayMessageConf&,
                                                    std::string&,
                                                    std::string&)> handler) = 0;
    /**
     * @brief Register a handler for the ClearVariableMonitoring request from the central system
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(std::function<bool(const ocpp::messages::ocpp20::ClearVariableMonitoringReq&,
                                                    ocpp::messages::ocpp20::ClearVariableMonitoringConf&,
                                                    std::string&,
                                                    std::string&)> handler) = 0;
    /**
     * @brief Register a handler for the CustomerInformation request from the central system
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(std::function<bool(const ocpp::messages::ocpp20::CustomerInformationReq&,
                                                    ocpp::messages::ocpp20::CustomerInformationConf&,
                                                    std::string&,
                                                    std::string&)> handler) = 0;
    /**
     * @brief Register a handler for the DataTransfer request from the central system
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(
        std::function<
            bool(const ocpp::messages::ocpp20::DataTransferReq&, ocpp::messages::ocpp20::DataTransferConf&, std::string&, std::string&)>
            handler) = 0;
    /**
     * @brief Register a handler for the DeleteCertificate request from the central system
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(std::function<bool(const ocpp::messages::ocpp20::DeleteCertificateReq&,
                                                    ocpp::messages::ocpp20::DeleteCertificateConf&,
                                                    std::string&,
                                                    std::string&)> handler) = 0;
    /**
     * @brief Register a handler for the Get15118EVCertificate request from the central system
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(std::function<bool(const ocpp::messages::ocpp20::Get15118EVCertificateReq&,
                                                    ocpp::messages::ocpp20::Get15118EVCertificateConf&,
                                                    std::string&,
                                                    std::string&)> handler) = 0;
    /**
     * @brief Register a handler for the GetBaseReport request from the central system
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(
        std::function<
            bool(const ocpp::messages::ocpp20::GetBaseReportReq&, ocpp::messages::ocpp20::GetBaseReportConf&, std::string&, std::string&)>
            handler) = 0;
    /**
     * @brief Register a handler for the GetCertificateStatus request from the central system
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(std::function<bool(const ocpp::messages::ocpp20::GetCertificateStatusReq&,
                                                    ocpp::messages::ocpp20::GetCertificateStatusConf&,
                                                    std::string&,
                                                    std::string&)> handler) = 0;
    /**
     * @brief Register a handler for the GetChargingProfiles request from the central system
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(std::function<bool(const ocpp::messages::ocpp20::GetChargingProfilesReq&,
                                                    ocpp::messages::ocpp20::GetChargingProfilesConf&,
                                                    std::string&,
                                                    std::string&)> handler) = 0;
    /**
     * @brief Register a handler for the GetCompositeSchedule request from the central system
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(std::function<bool(const ocpp::messages::ocpp20::GetCompositeScheduleReq&,
                                                    ocpp::messages::ocpp20::GetCompositeScheduleConf&,
                                                    std::string&,
                                                    std::string&)> handler) = 0;
    /**
     * @brief Register a handler for the GetDisplayMessages request from the central system
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(std::function<bool(const ocpp::messages::ocpp20::GetDisplayMessagesReq&,
                                                    ocpp::messages::ocpp20::GetDisplayMessagesConf&,
                                                    std::string&,
                                                    std::string&)> handler) = 0;
    /**
     * @brief Register a handler for the GetInstalledCertificateIds request from the central system
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(std::function<bool(const ocpp::messages::ocpp20::GetInstalledCertificateIdsReq&,
                                                    ocpp::messages::ocpp20::GetInstalledCertificateIdsConf&,
                                                    std::string&,
                                                    std::string&)> handler) = 0;
    /**
     * @brief Register a handler for the GetLocalListVersion request from the central system
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(std::function<bool(const ocpp::messages::ocpp20::GetLocalListVersionReq&,
                                                    ocpp::messages::ocpp20::GetLocalListVersionConf&,
                                                    std::string&,
                                                    std::string&)> handler) = 0;
    /**
     * @brief Register a handler for the GetLog request from the central system
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(
        std::function<bool(const ocpp::messages::ocpp20::GetLogReq&, ocpp::messages::ocpp20::GetLogConf&, std::string&, std::string&)>
            handler) = 0;
    /**
     * @brief Register a handler for the GetMonitoringReport request from the central system
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(std::function<bool(const ocpp::messages::ocpp20::GetMonitoringReportReq&,
                                                    ocpp::messages::ocpp20::GetMonitoringReportConf&,
                                                    std::string&,
                                                    std::string&)> handler) = 0;
    /**
     * @brief Register a handler for the GetReport request from the central system
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(
        std::function<bool(const ocpp::messages::ocpp20::GetReportReq&, ocpp::messages::ocpp20::GetReportConf&, std::string&, std::string&)>
            handler) = 0;
    /**
     * @brief Register a handler for the GetTransactionStatus request from the central system
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(std::function<bool(const ocpp::messages::ocpp20::GetTransactionStatusReq&,
                                                    ocpp::messages::ocpp20::GetTransactionStatusConf&,
                                                    std::string&,
                                                    std::string&)> handler) = 0;
    /**
     * @brief Register a handler for the GetVariables request from the central system
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(
        std::function<
            bool(const ocpp::messages::ocpp20::GetVariablesReq&, ocpp::messages::ocpp20::GetVariablesConf&, std::string&, std::string&)>
            handler) = 0;
    /**
     * @brief Register a handler for the InstallCertificate request from the central system
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(std::function<bool(const ocpp::messages::ocpp20::InstallCertificateReq&,
                                                    ocpp::messages::ocpp20::InstallCertificateConf&,
                                                    std::string&,
                                                    std::string&)> handler) = 0;
    /**
     * @brief Register a handler for the PublishFirmware request from the central system
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(
        std::function<bool(
            const ocpp::messages::ocpp20::PublishFirmwareReq&, ocpp::messages::ocpp20::PublishFirmwareConf&, std::string&, std::string&)>
            handler) = 0;
    /**
     * @brief Register a handler for the RequestStartTransaction request from the central system
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(std::function<bool(const ocpp::messages::ocpp20::RequestStartTransactionReq&,
                                                    ocpp::messages::ocpp20::RequestStartTransactionConf&,
                                                    std::string&,
                                                    std::string&)> handler) = 0;
    /**
     * @brief Register a handler for the RequestStopTransaction request from the central system
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(std::function<bool(const ocpp::messages::ocpp20::RequestStopTransactionReq&,
                                                    ocpp::messages::ocpp20::RequestStopTransactionConf&,
                                                    std::string&,
                                                    std::string&)> handler) = 0;
    /**
     * @brief Register a handler for the ReserveNow request from the central system
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(
        std::function<
            bool(const ocpp::messages::ocpp20::ReserveNowReq&, ocpp::messages::ocpp20::ReserveNowConf&, std::string&, std::string&)>
            handler) = 0;
    /**
     * @brief Register a handler for the Reset request from the central system
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(
        std::function<bool(const ocpp::messages::ocpp20::ResetReq&, ocpp::messages::ocpp20::ResetConf&, std::string&, std::string&)>
            handler) = 0;
    /**
     * @brief Register a handler for the SendLocalList request from the central system
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(
        std::function<
            bool(const ocpp::messages::ocpp20::SendLocalListReq&, ocpp::messages::ocpp20::SendLocalListConf&, std::string&, std::string&)>
            handler) = 0;
    /**
     * @brief Register a handler for the SetChargingProfile request from the central system
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(std::function<bool(const ocpp::messages::ocpp20::SetChargingProfileReq&,
                                                    ocpp::messages::ocpp20::SetChargingProfileConf&,
                                                    std::string&,
                                                    std::string&)> handler) = 0;
    /**
     * @brief Register a handler for the SetDisplayMessage request from the central system
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(std::function<bool(const ocpp::messages::ocpp20::SetDisplayMessageReq&,
                                                    ocpp::messages::ocpp20::SetDisplayMessageConf&,
                                                    std::string&,
                                                    std::string&)> handler) = 0;
    /**
     * @brief Register a handler for the SetMonitoringBase request from the central system
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(std::function<bool(const ocpp::messages::ocpp20::SetMonitoringBaseReq&,
                                                    ocpp::messages::ocpp20::SetMonitoringBaseConf&,
                                                    std::string&,
                                                    std::string&)> handler) = 0;
    /**
     * @brief Register a handler for the SetMonitoringLevel request from the central system
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(std::function<bool(const ocpp::messages::ocpp20::SetMonitoringLevelReq&,
                                                    ocpp::messages::ocpp20::SetMonitoringLevelConf&,
                                                    std::string&,
                                                    std::string&)> handler) = 0;
    /**
     * @brief Register a handler for the SetNetworkProfile request from the central system
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(std::function<bool(const ocpp::messages::ocpp20::SetNetworkProfileReq&,
                                                    ocpp::messages::ocpp20::SetNetworkProfileConf&,
                                                    std::string&,
                                                    std::string&)> handler) = 0;
    /**
     * @brief Register a handler for the SetVariableMonitoring request from the central system
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(std::function<bool(const ocpp::messages::ocpp20::SetVariableMonitoringReq&,
                                                    ocpp::messages::ocpp20::SetVariableMonitoringConf&,
                                                    std::string&,
                                                    std::string&)> handler) = 0;
    /**
     * @brief Register a handler for the SetVariables request from the central system
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(
        std::function<
            bool(const ocpp::messages::ocpp20::SetVariablesReq&, ocpp::messages::ocpp20::SetVariablesConf&, std::string&, std::string&)>
            handler) = 0;
    /**
     * @brief Register a handler for the TriggerMessage request from the central system
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(
        std::function<
            bool(const ocpp::messages::ocpp20::TriggerMessageReq&, ocpp::messages::ocpp20::TriggerMessageConf&, std::string&, std::string&)>
            handler) = 0;
    /**
     * @brief Register a handler for the UnlockConnector request from the central system
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(
        std::function<bool(
            const ocpp::messages::ocpp20::UnlockConnectorReq&, ocpp::messages::ocpp20::UnlockConnectorConf&, std::string&, std::string&)>
            handler) = 0;
    /**
     * @brief Register a handler for the UnpublishFirmware request from the central system
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(std::function<bool(const ocpp::messages::ocpp20::UnpublishFirmwareReq&,
                                                    ocpp::messages::ocpp20::UnpublishFirmwareConf&,
                                                    std::string&,
                                                    std::string&)> handler) = 0;
    /**
     * @brief Register a handler for the UpdateFirmware request from the central system
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(
        std::function<
            bool(const ocpp::messages::ocpp20::UpdateFirmwareReq&, ocpp::messages::ocpp20::UpdateFirmwareConf&, std::string&, std::string&)>
            handler) = 0;
};

} // namespace ocpp20
} // namespace localcontroller
} // namespace ocpp

#endif // OPENOCPP_OCPP20_ICENTRALSYSTEMPROXY20_H