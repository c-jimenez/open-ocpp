/*
Copyright (c) 2020 Cedric Jimenez
This file is part of OpenOCPP.

OpenOCPP is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 2.1 of the License, or
(at your option) any later version.

OpenOCPP is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OpenOCPP. If not, see <http://www.gnu.org/licenses/>.
*/

/* Generated by json2cpp */

#ifndef OPENOCPP_OCPP20_ICENTRALSYSTEMPROXY20_H
#define OPENOCPP_OCPP20_ICENTRALSYSTEMPROXY20_H

#include "Authorize20.h"
#include "BootNotification20.h"
#include "CancelReservation20.h"
#include "CertificateSigned20.h"
#include "ChangeAvailability20.h"
#include "ClearCache20.h"
#include "ClearChargingProfile20.h"
#include "ClearDisplayMessage20.h"
#include "ClearVariableMonitoring20.h"
#include "ClearedChargingLimit20.h"
#include "CostUpdated20.h"
#include "CustomerInformation20.h"
#include "DataTransfer20.h"
#include "DeleteCertificate20.h"
#include "FirmwareStatusNotification20.h"
#include "Get15118EVCertificate20.h"
#include "GetBaseReport20.h"
#include "GetCertificateStatus20.h"
#include "GetChargingProfiles20.h"
#include "GetCompositeSchedule20.h"
#include "GetDisplayMessages20.h"
#include "GetInstalledCertificateIds20.h"
#include "GetLocalListVersion20.h"
#include "GetLog20.h"
#include "GetMonitoringReport20.h"
#include "GetReport20.h"
#include "GetTransactionStatus20.h"
#include "GetVariables20.h"
#include "Heartbeat20.h"
#include "IWebsocketClient.h"
#include "InstallCertificate20.h"
#include "LogStatusNotification20.h"
#include "MeterValues20.h"
#include "NotifyChargingLimit20.h"
#include "NotifyCustomerInformation20.h"
#include "NotifyDisplayMessages20.h"
#include "NotifyEVChargingNeeds20.h"
#include "NotifyEVChargingSchedule20.h"
#include "NotifyEvent20.h"
#include "NotifyMonitoringReport20.h"
#include "NotifyReport20.h"
#include "PublishFirmware20.h"
#include "PublishFirmwareStatusNotification20.h"
#include "ReportChargingProfiles20.h"
#include "RequestStartTransaction20.h"
#include "RequestStopTransaction20.h"
#include "ReservationStatusUpdate20.h"
#include "ReserveNow20.h"
#include "Reset20.h"
#include "SecurityEventNotification20.h"
#include "SendLocalList20.h"
#include "SetChargingProfile20.h"
#include "SetDisplayMessage20.h"
#include "SetMonitoringBase20.h"
#include "SetMonitoringLevel20.h"
#include "SetNetworkProfile20.h"
#include "SetVariableMonitoring20.h"
#include "SetVariables20.h"
#include "SignCertificate20.h"
#include "StatusNotification20.h"
#include "TransactionEvent20.h"
#include "TriggerMessage20.h"
#include "UnlockConnector20.h"
#include "UnpublishFirmware20.h"
#include "UpdateFirmware20.h"

#include <functional>

namespace ocpp
{
namespace localcontroller
{
namespace ocpp20
{

class ILocalControllerProxyEventsHandler20;

/** @brief Interface for central system proxy implementations */
class ICentralSystemProxy20
{
  public:
    /** @brief Destructor */
    virtual ~ICentralSystemProxy20() { }

    /**
     * @brief Get the charge point identifier
     * @return charge point identifier
     */
    virtual const std::string& identifier() const = 0;

    /**
     * @brief Set the call request timeout
     * @param timeout New timeout value
     */
    virtual void setTimeout(std::chrono::milliseconds timeout) = 0;

    /**
     * @brief Connect to the central system
     * @param url URL to connect to
     * @param credentials Credentials to use
     * @param connect_timeout Connection timeout in ms
     * @param retry_interval Retry interval in ms when connection cannot be established (0 = no retry)
     * @param ping_interval Interval between 2 websocket PING messages when the socket is idle
     * @return true if the client has been started, false otherwise
     */
    virtual bool connect(const std::string&                                     url,
                         const ocpp::websockets::IWebsocketClient::Credentials& credentials,
                         std::chrono::milliseconds                              connect_timeout = std::chrono::seconds(5),
                         std::chrono::milliseconds                              retry_interval  = std::chrono::seconds(5),
                         std::chrono::milliseconds                              ping_interval   = std::chrono::seconds(5)) = 0;

    /** @brief Disconnect from the central system */
    virtual void disconnect() = 0;

    /**
     * @brief Indicate if the connection with the central system is active
     * @return true if the connection is active, false otherwise
     */
    virtual bool isConnected() const = 0;

    /**
     * @brief Register a listener to the proxy events
     * @param listener Listener to the proxy events
     */
    virtual void registerListener(ILocalControllerProxyEventsHandler20& listener) = 0;

    // OCPP operations
    /**
     * @brief Send a BootNotification20 message to the central system
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::BootNotification20Req& request,
                      ocpp::messages::ocpp20::BootNotification20Conf&      response,
                      std::string&                                         error,
                      std::string&                                         message) = 0;
    /**
     * @brief Send a Authorize20 message to the central system
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::Authorize20Req& request,
                      ocpp::messages::ocpp20::Authorize20Conf&      response,
                      std::string&                                  error,
                      std::string&                                  message) = 0;
    /**
     * @brief Send a ClearedChargingLimit20 message to the central system
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::ClearedChargingLimit20Req& request,
                      ocpp::messages::ocpp20::ClearedChargingLimit20Conf&      response,
                      std::string&                                             error,
                      std::string&                                             message) = 0;
    /**
     * @brief Send a CostUpdated20 message to the central system
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::CostUpdated20Req& request,
                      ocpp::messages::ocpp20::CostUpdated20Conf&      response,
                      std::string&                                    error,
                      std::string&                                    message) = 0;
    /**
     * @brief Send a DataTransfer20 message to the central system
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::DataTransfer20Req& request,
                      ocpp::messages::ocpp20::DataTransfer20Conf&      response,
                      std::string&                                     error,
                      std::string&                                     message) = 0;
    /**
     * @brief Send a FirmwareStatusNotification20 message to the central system
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::FirmwareStatusNotification20Req& request,
                      ocpp::messages::ocpp20::FirmwareStatusNotification20Conf&      response,
                      std::string&                                                   error,
                      std::string&                                                   message) = 0;
    /**
     * @brief Send a Heartbeat20 message to the central system
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::Heartbeat20Req& request,
                      ocpp::messages::ocpp20::Heartbeat20Conf&      response,
                      std::string&                                  error,
                      std::string&                                  message) = 0;
    /**
     * @brief Send a LogStatusNotification20 message to the central system
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::LogStatusNotification20Req& request,
                      ocpp::messages::ocpp20::LogStatusNotification20Conf&      response,
                      std::string&                                              error,
                      std::string&                                              message) = 0;
    /**
     * @brief Send a MeterValues20 message to the central system
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::MeterValues20Req& request,
                      ocpp::messages::ocpp20::MeterValues20Conf&      response,
                      std::string&                                    error,
                      std::string&                                    message) = 0;
    /**
     * @brief Send a NotifyChargingLimit20 message to the central system
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::NotifyChargingLimit20Req& request,
                      ocpp::messages::ocpp20::NotifyChargingLimit20Conf&      response,
                      std::string&                                            error,
                      std::string&                                            message) = 0;
    /**
     * @brief Send a NotifyCustomerInformation20 message to the central system
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::NotifyCustomerInformation20Req& request,
                      ocpp::messages::ocpp20::NotifyCustomerInformation20Conf&      response,
                      std::string&                                                  error,
                      std::string&                                                  message) = 0;
    /**
     * @brief Send a NotifyDisplayMessages20 message to the central system
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::NotifyDisplayMessages20Req& request,
                      ocpp::messages::ocpp20::NotifyDisplayMessages20Conf&      response,
                      std::string&                                              error,
                      std::string&                                              message) = 0;
    /**
     * @brief Send a NotifyEVChargingNeeds20 message to the central system
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::NotifyEVChargingNeeds20Req& request,
                      ocpp::messages::ocpp20::NotifyEVChargingNeeds20Conf&      response,
                      std::string&                                              error,
                      std::string&                                              message) = 0;
    /**
     * @brief Send a NotifyEVChargingSchedule20 message to the central system
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::NotifyEVChargingSchedule20Req& request,
                      ocpp::messages::ocpp20::NotifyEVChargingSchedule20Conf&      response,
                      std::string&                                                 error,
                      std::string&                                                 message) = 0;
    /**
     * @brief Send a NotifyEvent20 message to the central system
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::NotifyEvent20Req& request,
                      ocpp::messages::ocpp20::NotifyEvent20Conf&      response,
                      std::string&                                    error,
                      std::string&                                    message) = 0;
    /**
     * @brief Send a NotifyMonitoringReport20 message to the central system
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::NotifyMonitoringReport20Req& request,
                      ocpp::messages::ocpp20::NotifyMonitoringReport20Conf&      response,
                      std::string&                                               error,
                      std::string&                                               message) = 0;
    /**
     * @brief Send a NotifyReport20 message to the central system
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::NotifyReport20Req& request,
                      ocpp::messages::ocpp20::NotifyReport20Conf&      response,
                      std::string&                                     error,
                      std::string&                                     message) = 0;
    /**
     * @brief Send a PublishFirmwareStatusNotification20 message to the central system
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::PublishFirmwareStatusNotification20Req& request,
                      ocpp::messages::ocpp20::PublishFirmwareStatusNotification20Conf&      response,
                      std::string&                                                          error,
                      std::string&                                                          message) = 0;
    /**
     * @brief Send a ReportChargingProfiles20 message to the central system
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::ReportChargingProfiles20Req& request,
                      ocpp::messages::ocpp20::ReportChargingProfiles20Conf&      response,
                      std::string&                                               error,
                      std::string&                                               message) = 0;
    /**
     * @brief Send a ReservationStatusUpdate20 message to the central system
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::ReservationStatusUpdate20Req& request,
                      ocpp::messages::ocpp20::ReservationStatusUpdate20Conf&      response,
                      std::string&                                                error,
                      std::string&                                                message) = 0;
    /**
     * @brief Send a SecurityEventNotification20 message to the central system
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::SecurityEventNotification20Req& request,
                      ocpp::messages::ocpp20::SecurityEventNotification20Conf&      response,
                      std::string&                                                  error,
                      std::string&                                                  message) = 0;
    /**
     * @brief Send a SignCertificate20 message to the central system
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::SignCertificate20Req& request,
                      ocpp::messages::ocpp20::SignCertificate20Conf&      response,
                      std::string&                                        error,
                      std::string&                                        message) = 0;
    /**
     * @brief Send a StatusNotification20 message to the central system
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::StatusNotification20Req& request,
                      ocpp::messages::ocpp20::StatusNotification20Conf&      response,
                      std::string&                                           error,
                      std::string&                                           message) = 0;
    /**
     * @brief Send a TransactionEvent20 message to the central system
     * @param request Request to send
     * @param response Received response
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been sent and a response has been received, false otherwise
     */
    virtual bool call(const ocpp::messages::ocpp20::TransactionEvent20Req& request,
                      ocpp::messages::ocpp20::TransactionEvent20Conf&      response,
                      std::string&                                         error,
                      std::string&                                         message) = 0;
    /**
     * @brief Register a handler for the CancelReservation20 request from the central system
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(std::function<bool(const ocpp::messages::ocpp20::CancelReservation20Req&,
                                                    ocpp::messages::ocpp20::CancelReservation20Conf&,
                                                    std::string&,
                                                    std::string&)> handler) = 0;
    /**
     * @brief Register a handler for the CertificateSigned20 request from the central system
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(std::function<bool(const ocpp::messages::ocpp20::CertificateSigned20Req&,
                                                    ocpp::messages::ocpp20::CertificateSigned20Conf&,
                                                    std::string&,
                                                    std::string&)> handler) = 0;
    /**
     * @brief Register a handler for the ChangeAvailability20 request from the central system
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(std::function<bool(const ocpp::messages::ocpp20::ChangeAvailability20Req&,
                                                    ocpp::messages::ocpp20::ChangeAvailability20Conf&,
                                                    std::string&,
                                                    std::string&)> handler) = 0;
    /**
     * @brief Register a handler for the ClearCache20 request from the central system
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(
        std::function<
            bool(const ocpp::messages::ocpp20::ClearCache20Req&, ocpp::messages::ocpp20::ClearCache20Conf&, std::string&, std::string&)>
            handler) = 0;
    /**
     * @brief Register a handler for the ClearChargingProfile20 request from the central system
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(std::function<bool(const ocpp::messages::ocpp20::ClearChargingProfile20Req&,
                                                    ocpp::messages::ocpp20::ClearChargingProfile20Conf&,
                                                    std::string&,
                                                    std::string&)> handler) = 0;
    /**
     * @brief Register a handler for the ClearDisplayMessage20 request from the central system
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(std::function<bool(const ocpp::messages::ocpp20::ClearDisplayMessage20Req&,
                                                    ocpp::messages::ocpp20::ClearDisplayMessage20Conf&,
                                                    std::string&,
                                                    std::string&)> handler) = 0;
    /**
     * @brief Register a handler for the ClearVariableMonitoring20 request from the central system
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(std::function<bool(const ocpp::messages::ocpp20::ClearVariableMonitoring20Req&,
                                                    ocpp::messages::ocpp20::ClearVariableMonitoring20Conf&,
                                                    std::string&,
                                                    std::string&)> handler) = 0;
    /**
     * @brief Register a handler for the CustomerInformation20 request from the central system
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(std::function<bool(const ocpp::messages::ocpp20::CustomerInformation20Req&,
                                                    ocpp::messages::ocpp20::CustomerInformation20Conf&,
                                                    std::string&,
                                                    std::string&)> handler) = 0;
    /**
     * @brief Register a handler for the DataTransfer20 request from the central system
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(
        std::function<
            bool(const ocpp::messages::ocpp20::DataTransfer20Req&, ocpp::messages::ocpp20::DataTransfer20Conf&, std::string&, std::string&)>
            handler) = 0;
    /**
     * @brief Register a handler for the DeleteCertificate20 request from the central system
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(std::function<bool(const ocpp::messages::ocpp20::DeleteCertificate20Req&,
                                                    ocpp::messages::ocpp20::DeleteCertificate20Conf&,
                                                    std::string&,
                                                    std::string&)> handler) = 0;
    /**
     * @brief Register a handler for the Get15118EVCertificate20 request from the central system
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(std::function<bool(const ocpp::messages::ocpp20::Get15118EVCertificate20Req&,
                                                    ocpp::messages::ocpp20::Get15118EVCertificate20Conf&,
                                                    std::string&,
                                                    std::string&)> handler) = 0;
    /**
     * @brief Register a handler for the GetBaseReport20 request from the central system
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(
        std::function<bool(
            const ocpp::messages::ocpp20::GetBaseReport20Req&, ocpp::messages::ocpp20::GetBaseReport20Conf&, std::string&, std::string&)>
            handler) = 0;
    /**
     * @brief Register a handler for the GetCertificateStatus20 request from the central system
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(std::function<bool(const ocpp::messages::ocpp20::GetCertificateStatus20Req&,
                                                    ocpp::messages::ocpp20::GetCertificateStatus20Conf&,
                                                    std::string&,
                                                    std::string&)> handler) = 0;
    /**
     * @brief Register a handler for the GetChargingProfiles20 request from the central system
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(std::function<bool(const ocpp::messages::ocpp20::GetChargingProfiles20Req&,
                                                    ocpp::messages::ocpp20::GetChargingProfiles20Conf&,
                                                    std::string&,
                                                    std::string&)> handler) = 0;
    /**
     * @brief Register a handler for the GetCompositeSchedule20 request from the central system
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(std::function<bool(const ocpp::messages::ocpp20::GetCompositeSchedule20Req&,
                                                    ocpp::messages::ocpp20::GetCompositeSchedule20Conf&,
                                                    std::string&,
                                                    std::string&)> handler) = 0;
    /**
     * @brief Register a handler for the GetDisplayMessages20 request from the central system
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(std::function<bool(const ocpp::messages::ocpp20::GetDisplayMessages20Req&,
                                                    ocpp::messages::ocpp20::GetDisplayMessages20Conf&,
                                                    std::string&,
                                                    std::string&)> handler) = 0;
    /**
     * @brief Register a handler for the GetInstalledCertificateIds20 request from the central system
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(std::function<bool(const ocpp::messages::ocpp20::GetInstalledCertificateIds20Req&,
                                                    ocpp::messages::ocpp20::GetInstalledCertificateIds20Conf&,
                                                    std::string&,
                                                    std::string&)> handler) = 0;
    /**
     * @brief Register a handler for the GetLocalListVersion20 request from the central system
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(std::function<bool(const ocpp::messages::ocpp20::GetLocalListVersion20Req&,
                                                    ocpp::messages::ocpp20::GetLocalListVersion20Conf&,
                                                    std::string&,
                                                    std::string&)> handler) = 0;
    /**
     * @brief Register a handler for the GetLog20 request from the central system
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(
        std::function<bool(const ocpp::messages::ocpp20::GetLog20Req&, ocpp::messages::ocpp20::GetLog20Conf&, std::string&, std::string&)>
            handler) = 0;
    /**
     * @brief Register a handler for the GetMonitoringReport20 request from the central system
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(std::function<bool(const ocpp::messages::ocpp20::GetMonitoringReport20Req&,
                                                    ocpp::messages::ocpp20::GetMonitoringReport20Conf&,
                                                    std::string&,
                                                    std::string&)> handler) = 0;
    /**
     * @brief Register a handler for the GetReport20 request from the central system
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(
        std::function<
            bool(const ocpp::messages::ocpp20::GetReport20Req&, ocpp::messages::ocpp20::GetReport20Conf&, std::string&, std::string&)>
            handler) = 0;
    /**
     * @brief Register a handler for the GetTransactionStatus20 request from the central system
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(std::function<bool(const ocpp::messages::ocpp20::GetTransactionStatus20Req&,
                                                    ocpp::messages::ocpp20::GetTransactionStatus20Conf&,
                                                    std::string&,
                                                    std::string&)> handler) = 0;
    /**
     * @brief Register a handler for the GetVariables20 request from the central system
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(
        std::function<
            bool(const ocpp::messages::ocpp20::GetVariables20Req&, ocpp::messages::ocpp20::GetVariables20Conf&, std::string&, std::string&)>
            handler) = 0;
    /**
     * @brief Register a handler for the InstallCertificate20 request from the central system
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(std::function<bool(const ocpp::messages::ocpp20::InstallCertificate20Req&,
                                                    ocpp::messages::ocpp20::InstallCertificate20Conf&,
                                                    std::string&,
                                                    std::string&)> handler) = 0;
    /**
     * @brief Register a handler for the PublishFirmware20 request from the central system
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(std::function<bool(const ocpp::messages::ocpp20::PublishFirmware20Req&,
                                                    ocpp::messages::ocpp20::PublishFirmware20Conf&,
                                                    std::string&,
                                                    std::string&)> handler) = 0;
    /**
     * @brief Register a handler for the RequestStartTransaction20 request from the central system
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(std::function<bool(const ocpp::messages::ocpp20::RequestStartTransaction20Req&,
                                                    ocpp::messages::ocpp20::RequestStartTransaction20Conf&,
                                                    std::string&,
                                                    std::string&)> handler) = 0;
    /**
     * @brief Register a handler for the RequestStopTransaction20 request from the central system
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(std::function<bool(const ocpp::messages::ocpp20::RequestStopTransaction20Req&,
                                                    ocpp::messages::ocpp20::RequestStopTransaction20Conf&,
                                                    std::string&,
                                                    std::string&)> handler) = 0;
    /**
     * @brief Register a handler for the ReserveNow20 request from the central system
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(
        std::function<
            bool(const ocpp::messages::ocpp20::ReserveNow20Req&, ocpp::messages::ocpp20::ReserveNow20Conf&, std::string&, std::string&)>
            handler) = 0;
    /**
     * @brief Register a handler for the Reset20 request from the central system
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(
        std::function<bool(const ocpp::messages::ocpp20::Reset20Req&, ocpp::messages::ocpp20::Reset20Conf&, std::string&, std::string&)>
            handler) = 0;
    /**
     * @brief Register a handler for the SendLocalList20 request from the central system
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(
        std::function<bool(
            const ocpp::messages::ocpp20::SendLocalList20Req&, ocpp::messages::ocpp20::SendLocalList20Conf&, std::string&, std::string&)>
            handler) = 0;
    /**
     * @brief Register a handler for the SetChargingProfile20 request from the central system
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(std::function<bool(const ocpp::messages::ocpp20::SetChargingProfile20Req&,
                                                    ocpp::messages::ocpp20::SetChargingProfile20Conf&,
                                                    std::string&,
                                                    std::string&)> handler) = 0;
    /**
     * @brief Register a handler for the SetDisplayMessage20 request from the central system
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(std::function<bool(const ocpp::messages::ocpp20::SetDisplayMessage20Req&,
                                                    ocpp::messages::ocpp20::SetDisplayMessage20Conf&,
                                                    std::string&,
                                                    std::string&)> handler) = 0;
    /**
     * @brief Register a handler for the SetMonitoringBase20 request from the central system
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(std::function<bool(const ocpp::messages::ocpp20::SetMonitoringBase20Req&,
                                                    ocpp::messages::ocpp20::SetMonitoringBase20Conf&,
                                                    std::string&,
                                                    std::string&)> handler) = 0;
    /**
     * @brief Register a handler for the SetMonitoringLevel20 request from the central system
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(std::function<bool(const ocpp::messages::ocpp20::SetMonitoringLevel20Req&,
                                                    ocpp::messages::ocpp20::SetMonitoringLevel20Conf&,
                                                    std::string&,
                                                    std::string&)> handler) = 0;
    /**
     * @brief Register a handler for the SetNetworkProfile20 request from the central system
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(std::function<bool(const ocpp::messages::ocpp20::SetNetworkProfile20Req&,
                                                    ocpp::messages::ocpp20::SetNetworkProfile20Conf&,
                                                    std::string&,
                                                    std::string&)> handler) = 0;
    /**
     * @brief Register a handler for the SetVariableMonitoring20 request from the central system
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(std::function<bool(const ocpp::messages::ocpp20::SetVariableMonitoring20Req&,
                                                    ocpp::messages::ocpp20::SetVariableMonitoring20Conf&,
                                                    std::string&,
                                                    std::string&)> handler) = 0;
    /**
     * @brief Register a handler for the SetVariables20 request from the central system
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(
        std::function<
            bool(const ocpp::messages::ocpp20::SetVariables20Req&, ocpp::messages::ocpp20::SetVariables20Conf&, std::string&, std::string&)>
            handler) = 0;
    /**
     * @brief Register a handler for the TriggerMessage20 request from the central system
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(
        std::function<bool(
            const ocpp::messages::ocpp20::TriggerMessage20Req&, ocpp::messages::ocpp20::TriggerMessage20Conf&, std::string&, std::string&)>
            handler) = 0;
    /**
     * @brief Register a handler for the UnlockConnector20 request from the central system
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(std::function<bool(const ocpp::messages::ocpp20::UnlockConnector20Req&,
                                                    ocpp::messages::ocpp20::UnlockConnector20Conf&,
                                                    std::string&,
                                                    std::string&)> handler) = 0;
    /**
     * @brief Register a handler for the UnpublishFirmware20 request from the central system
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(std::function<bool(const ocpp::messages::ocpp20::UnpublishFirmware20Req&,
                                                    ocpp::messages::ocpp20::UnpublishFirmware20Conf&,
                                                    std::string&,
                                                    std::string&)> handler) = 0;
    /**
     * @brief Register a handler for the UpdateFirmware20 request from the central system
     * @param handler Handler function
     * @return true if the handler has been registered, false otherwise
     */
    virtual bool registerHandler(
        std::function<bool(
            const ocpp::messages::ocpp20::UpdateFirmware20Req&, ocpp::messages::ocpp20::UpdateFirmware20Conf&, std::string&, std::string&)>
            handler) = 0;
};

} // namespace ocpp20
} // namespace localcontroller
} // namespace ocpp

#endif // OPENOCPP_OCPP20_ICENTRALSYSTEMPROXY20_H