/*
Copyright (c) 2020 Cedric Jimenez
This file is part of OpenOCPP.

OpenOCPP is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 2.1 of the License, or
(at your option) any later version.

OpenOCPP is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OpenOCPP. If not, see <http://www.gnu.org/licenses/>.
*/

/* Generated by json2cpp */

#include "ChargePointProxy20.h"

using namespace ocpp::messages;
using namespace ocpp::messages::ocpp20;
using namespace ocpp::types;
using namespace ocpp::types::ocpp20;

namespace ocpp
{
namespace centralsystem
{
namespace ocpp20
{

/** @brief Constructor */
ChargePointProxy20::ChargePointProxy20(ICentralSystem20&                                  central_system,
                                       const std::string&                                 identifier,
                                       std::shared_ptr<ocpp::rpc::RpcServer::Client>      rpc,
                                       const ocpp::messages::ocpp20::MessagesValidator20& messages_validator,
                                       ocpp::messages::ocpp20::MessagesConverter20&       messages_converter,
                                       const ocpp::config::ICentralSystemConfig20&        stack_config)
    : m_central_system(central_system),
      m_identifier(identifier),
      m_rpc(rpc),
      m_msg_dispatcher(messages_validator),
      m_msg_sender(*m_rpc, messages_converter, messages_validator, stack_config.callRequestTimeout()),
      m_handler(m_identifier, messages_converter, m_msg_dispatcher, stack_config),
      m_messages_validator(messages_validator),
      m_messages_converter(messages_converter)
{
    m_rpc->registerSpy(*this);
    m_rpc->registerListener(*this);
}

/** @brief Destructor */
ChargePointProxy20::~ChargePointProxy20()
{
    unregisterFromRpcSpy();
}

/** @brief Unregister to the IRpc::ISpy interface messages */
void ChargePointProxy20::unregisterFromRpcSpy()
{
    m_rpc->unregisterSpy(*this);
}

// ICentralSystem20::IChargePoint20 interface

/** @copydoc const std::string& ICentralSystem20::IChargePoint20::ipAddress() const */
const std::string& ChargePointProxy20::ipAddress() const
{
    return m_rpc->ipAddress();
}

/** @copydoc void ICentralSystem20::IChargePoint20::setTimeout(std::chrono::milliseconds) */
void ChargePointProxy20::setTimeout(std::chrono::milliseconds timeout)
{
    m_msg_sender.setTimeout(timeout);
}

/** @copydoc void ICentralSystem20::IChargePoint20::disconnect() */
void ChargePointProxy20::disconnect()
{
    m_rpc->disconnect(true);
}

/** @copydoc void ICentralSystem20::IChargePoint20::registerHandler(IChargePointRequestHandler20&) */
void ChargePointProxy20::registerHandler(IChargePointRequestHandler20& handler)
{
    m_user_handler = &handler;
    m_handler.registerHandler(handler);
}

// OCPP operations
/** @copydoc bool ICentralSystem20::IChargePoint20::call(
                const ocpp::messages::ocpp20::CancelReservation20Req&,
                ocpp::messages::ocpp20::CancelReservation20Conf&,
                std::string&,
                std::string&) */
bool ChargePointProxy20::call(const ocpp::messages::ocpp20::CancelReservation20Req& request,
                              ocpp::messages::ocpp20::CancelReservation20Conf&      response,
                              std::string&                                          error,
                              std::string&                                          message)
{
    bool ret = false;

    LOG_INFO << "[" << m_identifier << "] - CancelReservation20";

    // Send request
    CallResult res = m_msg_sender.call(CANCELRESERVATION20_ACTION, request, response, error, message);
    if (res == CallResult::Ok)
    {
        LOG_INFO << "[" << m_identifier << "] - Call done : CancelReservation20";
        ret = true;
    }
    else
    {
        LOG_ERROR << "[" << m_identifier << "] - Call failed : " << CallResultHelper.toString(res);
    }

    return ret;
}
/** @copydoc bool ICentralSystem20::IChargePoint20::call(
                const ocpp::messages::ocpp20::CertificateSigned20Req&,
                ocpp::messages::ocpp20::CertificateSigned20Conf&,
                std::string&,
                std::string&) */
bool ChargePointProxy20::call(const ocpp::messages::ocpp20::CertificateSigned20Req& request,
                              ocpp::messages::ocpp20::CertificateSigned20Conf&      response,
                              std::string&                                          error,
                              std::string&                                          message)
{
    bool ret = false;

    LOG_INFO << "[" << m_identifier << "] - CertificateSigned20";

    // Send request
    CallResult res = m_msg_sender.call(CERTIFICATESIGNED20_ACTION, request, response, error, message);
    if (res == CallResult::Ok)
    {
        LOG_INFO << "[" << m_identifier << "] - Call done : CertificateSigned20";
        ret = true;
    }
    else
    {
        LOG_ERROR << "[" << m_identifier << "] - Call failed : " << CallResultHelper.toString(res);
    }

    return ret;
}
/** @copydoc bool ICentralSystem20::IChargePoint20::call(
                const ocpp::messages::ocpp20::ChangeAvailability20Req&,
                ocpp::messages::ocpp20::ChangeAvailability20Conf&,
                std::string&,
                std::string&) */
bool ChargePointProxy20::call(const ocpp::messages::ocpp20::ChangeAvailability20Req& request,
                              ocpp::messages::ocpp20::ChangeAvailability20Conf&      response,
                              std::string&                                           error,
                              std::string&                                           message)
{
    bool ret = false;

    LOG_INFO << "[" << m_identifier << "] - ChangeAvailability20";

    // Send request
    CallResult res = m_msg_sender.call(CHANGEAVAILABILITY20_ACTION, request, response, error, message);
    if (res == CallResult::Ok)
    {
        LOG_INFO << "[" << m_identifier << "] - Call done : ChangeAvailability20";
        ret = true;
    }
    else
    {
        LOG_ERROR << "[" << m_identifier << "] - Call failed : " << CallResultHelper.toString(res);
    }

    return ret;
}
/** @copydoc bool ICentralSystem20::IChargePoint20::call(
                const ocpp::messages::ocpp20::ClearCache20Req&,
                ocpp::messages::ocpp20::ClearCache20Conf&,
                std::string&,
                std::string&) */
bool ChargePointProxy20::call(const ocpp::messages::ocpp20::ClearCache20Req& request,
                              ocpp::messages::ocpp20::ClearCache20Conf&      response,
                              std::string&                                   error,
                              std::string&                                   message)
{
    bool ret = false;

    LOG_INFO << "[" << m_identifier << "] - ClearCache20";

    // Send request
    CallResult res = m_msg_sender.call(CLEARCACHE20_ACTION, request, response, error, message);
    if (res == CallResult::Ok)
    {
        LOG_INFO << "[" << m_identifier << "] - Call done : ClearCache20";
        ret = true;
    }
    else
    {
        LOG_ERROR << "[" << m_identifier << "] - Call failed : " << CallResultHelper.toString(res);
    }

    return ret;
}
/** @copydoc bool ICentralSystem20::IChargePoint20::call(
                const ocpp::messages::ocpp20::ClearChargingProfile20Req&,
                ocpp::messages::ocpp20::ClearChargingProfile20Conf&,
                std::string&,
                std::string&) */
bool ChargePointProxy20::call(const ocpp::messages::ocpp20::ClearChargingProfile20Req& request,
                              ocpp::messages::ocpp20::ClearChargingProfile20Conf&      response,
                              std::string&                                             error,
                              std::string&                                             message)
{
    bool ret = false;

    LOG_INFO << "[" << m_identifier << "] - ClearChargingProfile20";

    // Send request
    CallResult res = m_msg_sender.call(CLEARCHARGINGPROFILE20_ACTION, request, response, error, message);
    if (res == CallResult::Ok)
    {
        LOG_INFO << "[" << m_identifier << "] - Call done : ClearChargingProfile20";
        ret = true;
    }
    else
    {
        LOG_ERROR << "[" << m_identifier << "] - Call failed : " << CallResultHelper.toString(res);
    }

    return ret;
}
/** @copydoc bool ICentralSystem20::IChargePoint20::call(
                const ocpp::messages::ocpp20::ClearDisplayMessage20Req&,
                ocpp::messages::ocpp20::ClearDisplayMessage20Conf&,
                std::string&,
                std::string&) */
bool ChargePointProxy20::call(const ocpp::messages::ocpp20::ClearDisplayMessage20Req& request,
                              ocpp::messages::ocpp20::ClearDisplayMessage20Conf&      response,
                              std::string&                                            error,
                              std::string&                                            message)
{
    bool ret = false;

    LOG_INFO << "[" << m_identifier << "] - ClearDisplayMessage20";

    // Send request
    CallResult res = m_msg_sender.call(CLEARDISPLAYMESSAGE20_ACTION, request, response, error, message);
    if (res == CallResult::Ok)
    {
        LOG_INFO << "[" << m_identifier << "] - Call done : ClearDisplayMessage20";
        ret = true;
    }
    else
    {
        LOG_ERROR << "[" << m_identifier << "] - Call failed : " << CallResultHelper.toString(res);
    }

    return ret;
}
/** @copydoc bool ICentralSystem20::IChargePoint20::call(
                const ocpp::messages::ocpp20::ClearVariableMonitoring20Req&,
                ocpp::messages::ocpp20::ClearVariableMonitoring20Conf&,
                std::string&,
                std::string&) */
bool ChargePointProxy20::call(const ocpp::messages::ocpp20::ClearVariableMonitoring20Req& request,
                              ocpp::messages::ocpp20::ClearVariableMonitoring20Conf&      response,
                              std::string&                                                error,
                              std::string&                                                message)
{
    bool ret = false;

    LOG_INFO << "[" << m_identifier << "] - ClearVariableMonitoring20";

    // Send request
    CallResult res = m_msg_sender.call(CLEARVARIABLEMONITORING20_ACTION, request, response, error, message);
    if (res == CallResult::Ok)
    {
        LOG_INFO << "[" << m_identifier << "] - Call done : ClearVariableMonitoring20";
        ret = true;
    }
    else
    {
        LOG_ERROR << "[" << m_identifier << "] - Call failed : " << CallResultHelper.toString(res);
    }

    return ret;
}
/** @copydoc bool ICentralSystem20::IChargePoint20::call(
                const ocpp::messages::ocpp20::CustomerInformation20Req&,
                ocpp::messages::ocpp20::CustomerInformation20Conf&,
                std::string&,
                std::string&) */
bool ChargePointProxy20::call(const ocpp::messages::ocpp20::CustomerInformation20Req& request,
                              ocpp::messages::ocpp20::CustomerInformation20Conf&      response,
                              std::string&                                            error,
                              std::string&                                            message)
{
    bool ret = false;

    LOG_INFO << "[" << m_identifier << "] - CustomerInformation20";

    // Send request
    CallResult res = m_msg_sender.call(CUSTOMERINFORMATION20_ACTION, request, response, error, message);
    if (res == CallResult::Ok)
    {
        LOG_INFO << "[" << m_identifier << "] - Call done : CustomerInformation20";
        ret = true;
    }
    else
    {
        LOG_ERROR << "[" << m_identifier << "] - Call failed : " << CallResultHelper.toString(res);
    }

    return ret;
}
/** @copydoc bool ICentralSystem20::IChargePoint20::call(
                const ocpp::messages::ocpp20::DataTransfer20Req&,
                ocpp::messages::ocpp20::DataTransfer20Conf&,
                std::string&,
                std::string&) */
bool ChargePointProxy20::call(const ocpp::messages::ocpp20::DataTransfer20Req& request,
                              ocpp::messages::ocpp20::DataTransfer20Conf&      response,
                              std::string&                                     error,
                              std::string&                                     message)
{
    bool ret = false;

    LOG_INFO << "[" << m_identifier << "] - DataTransfer20";

    // Send request
    CallResult res = m_msg_sender.call(DATATRANSFER20_ACTION, request, response, error, message);
    if (res == CallResult::Ok)
    {
        LOG_INFO << "[" << m_identifier << "] - Call done : DataTransfer20";
        ret = true;
    }
    else
    {
        LOG_ERROR << "[" << m_identifier << "] - Call failed : " << CallResultHelper.toString(res);
    }

    return ret;
}
/** @copydoc bool ICentralSystem20::IChargePoint20::call(
                const ocpp::messages::ocpp20::DeleteCertificate20Req&,
                ocpp::messages::ocpp20::DeleteCertificate20Conf&,
                std::string&,
                std::string&) */
bool ChargePointProxy20::call(const ocpp::messages::ocpp20::DeleteCertificate20Req& request,
                              ocpp::messages::ocpp20::DeleteCertificate20Conf&      response,
                              std::string&                                          error,
                              std::string&                                          message)
{
    bool ret = false;

    LOG_INFO << "[" << m_identifier << "] - DeleteCertificate20";

    // Send request
    CallResult res = m_msg_sender.call(DELETECERTIFICATE20_ACTION, request, response, error, message);
    if (res == CallResult::Ok)
    {
        LOG_INFO << "[" << m_identifier << "] - Call done : DeleteCertificate20";
        ret = true;
    }
    else
    {
        LOG_ERROR << "[" << m_identifier << "] - Call failed : " << CallResultHelper.toString(res);
    }

    return ret;
}
/** @copydoc bool ICentralSystem20::IChargePoint20::call(
                const ocpp::messages::ocpp20::Get15118EVCertificate20Req&,
                ocpp::messages::ocpp20::Get15118EVCertificate20Conf&,
                std::string&,
                std::string&) */
bool ChargePointProxy20::call(const ocpp::messages::ocpp20::Get15118EVCertificate20Req& request,
                              ocpp::messages::ocpp20::Get15118EVCertificate20Conf&      response,
                              std::string&                                              error,
                              std::string&                                              message)
{
    bool ret = false;

    LOG_INFO << "[" << m_identifier << "] - Get15118EVCertificate20";

    // Send request
    CallResult res = m_msg_sender.call(GET15118EVCERTIFICATE20_ACTION, request, response, error, message);
    if (res == CallResult::Ok)
    {
        LOG_INFO << "[" << m_identifier << "] - Call done : Get15118EVCertificate20";
        ret = true;
    }
    else
    {
        LOG_ERROR << "[" << m_identifier << "] - Call failed : " << CallResultHelper.toString(res);
    }

    return ret;
}
/** @copydoc bool ICentralSystem20::IChargePoint20::call(
                const ocpp::messages::ocpp20::GetBaseReport20Req&,
                ocpp::messages::ocpp20::GetBaseReport20Conf&,
                std::string&,
                std::string&) */
bool ChargePointProxy20::call(const ocpp::messages::ocpp20::GetBaseReport20Req& request,
                              ocpp::messages::ocpp20::GetBaseReport20Conf&      response,
                              std::string&                                      error,
                              std::string&                                      message)
{
    bool ret = false;

    LOG_INFO << "[" << m_identifier << "] - GetBaseReport20";

    // Send request
    CallResult res = m_msg_sender.call(GETBASEREPORT20_ACTION, request, response, error, message);
    if (res == CallResult::Ok)
    {
        LOG_INFO << "[" << m_identifier << "] - Call done : GetBaseReport20";
        ret = true;
    }
    else
    {
        LOG_ERROR << "[" << m_identifier << "] - Call failed : " << CallResultHelper.toString(res);
    }

    return ret;
}
/** @copydoc bool ICentralSystem20::IChargePoint20::call(
                const ocpp::messages::ocpp20::GetCertificateStatus20Req&,
                ocpp::messages::ocpp20::GetCertificateStatus20Conf&,
                std::string&,
                std::string&) */
bool ChargePointProxy20::call(const ocpp::messages::ocpp20::GetCertificateStatus20Req& request,
                              ocpp::messages::ocpp20::GetCertificateStatus20Conf&      response,
                              std::string&                                             error,
                              std::string&                                             message)
{
    bool ret = false;

    LOG_INFO << "[" << m_identifier << "] - GetCertificateStatus20";

    // Send request
    CallResult res = m_msg_sender.call(GETCERTIFICATESTATUS20_ACTION, request, response, error, message);
    if (res == CallResult::Ok)
    {
        LOG_INFO << "[" << m_identifier << "] - Call done : GetCertificateStatus20";
        ret = true;
    }
    else
    {
        LOG_ERROR << "[" << m_identifier << "] - Call failed : " << CallResultHelper.toString(res);
    }

    return ret;
}
/** @copydoc bool ICentralSystem20::IChargePoint20::call(
                const ocpp::messages::ocpp20::GetChargingProfiles20Req&,
                ocpp::messages::ocpp20::GetChargingProfiles20Conf&,
                std::string&,
                std::string&) */
bool ChargePointProxy20::call(const ocpp::messages::ocpp20::GetChargingProfiles20Req& request,
                              ocpp::messages::ocpp20::GetChargingProfiles20Conf&      response,
                              std::string&                                            error,
                              std::string&                                            message)
{
    bool ret = false;

    LOG_INFO << "[" << m_identifier << "] - GetChargingProfiles20";

    // Send request
    CallResult res = m_msg_sender.call(GETCHARGINGPROFILES20_ACTION, request, response, error, message);
    if (res == CallResult::Ok)
    {
        LOG_INFO << "[" << m_identifier << "] - Call done : GetChargingProfiles20";
        ret = true;
    }
    else
    {
        LOG_ERROR << "[" << m_identifier << "] - Call failed : " << CallResultHelper.toString(res);
    }

    return ret;
}
/** @copydoc bool ICentralSystem20::IChargePoint20::call(
                const ocpp::messages::ocpp20::GetCompositeSchedule20Req&,
                ocpp::messages::ocpp20::GetCompositeSchedule20Conf&,
                std::string&,
                std::string&) */
bool ChargePointProxy20::call(const ocpp::messages::ocpp20::GetCompositeSchedule20Req& request,
                              ocpp::messages::ocpp20::GetCompositeSchedule20Conf&      response,
                              std::string&                                             error,
                              std::string&                                             message)
{
    bool ret = false;

    LOG_INFO << "[" << m_identifier << "] - GetCompositeSchedule20";

    // Send request
    CallResult res = m_msg_sender.call(GETCOMPOSITESCHEDULE20_ACTION, request, response, error, message);
    if (res == CallResult::Ok)
    {
        LOG_INFO << "[" << m_identifier << "] - Call done : GetCompositeSchedule20";
        ret = true;
    }
    else
    {
        LOG_ERROR << "[" << m_identifier << "] - Call failed : " << CallResultHelper.toString(res);
    }

    return ret;
}
/** @copydoc bool ICentralSystem20::IChargePoint20::call(
                const ocpp::messages::ocpp20::GetDisplayMessages20Req&,
                ocpp::messages::ocpp20::GetDisplayMessages20Conf&,
                std::string&,
                std::string&) */
bool ChargePointProxy20::call(const ocpp::messages::ocpp20::GetDisplayMessages20Req& request,
                              ocpp::messages::ocpp20::GetDisplayMessages20Conf&      response,
                              std::string&                                           error,
                              std::string&                                           message)
{
    bool ret = false;

    LOG_INFO << "[" << m_identifier << "] - GetDisplayMessages20";

    // Send request
    CallResult res = m_msg_sender.call(GETDISPLAYMESSAGES20_ACTION, request, response, error, message);
    if (res == CallResult::Ok)
    {
        LOG_INFO << "[" << m_identifier << "] - Call done : GetDisplayMessages20";
        ret = true;
    }
    else
    {
        LOG_ERROR << "[" << m_identifier << "] - Call failed : " << CallResultHelper.toString(res);
    }

    return ret;
}
/** @copydoc bool ICentralSystem20::IChargePoint20::call(
                const ocpp::messages::ocpp20::GetInstalledCertificateIds20Req&,
                ocpp::messages::ocpp20::GetInstalledCertificateIds20Conf&,
                std::string&,
                std::string&) */
bool ChargePointProxy20::call(const ocpp::messages::ocpp20::GetInstalledCertificateIds20Req& request,
                              ocpp::messages::ocpp20::GetInstalledCertificateIds20Conf&      response,
                              std::string&                                                   error,
                              std::string&                                                   message)
{
    bool ret = false;

    LOG_INFO << "[" << m_identifier << "] - GetInstalledCertificateIds20";

    // Send request
    CallResult res = m_msg_sender.call(GETINSTALLEDCERTIFICATEIDS20_ACTION, request, response, error, message);
    if (res == CallResult::Ok)
    {
        LOG_INFO << "[" << m_identifier << "] - Call done : GetInstalledCertificateIds20";
        ret = true;
    }
    else
    {
        LOG_ERROR << "[" << m_identifier << "] - Call failed : " << CallResultHelper.toString(res);
    }

    return ret;
}
/** @copydoc bool ICentralSystem20::IChargePoint20::call(
                const ocpp::messages::ocpp20::GetLocalListVersion20Req&,
                ocpp::messages::ocpp20::GetLocalListVersion20Conf&,
                std::string&,
                std::string&) */
bool ChargePointProxy20::call(const ocpp::messages::ocpp20::GetLocalListVersion20Req& request,
                              ocpp::messages::ocpp20::GetLocalListVersion20Conf&      response,
                              std::string&                                            error,
                              std::string&                                            message)
{
    bool ret = false;

    LOG_INFO << "[" << m_identifier << "] - GetLocalListVersion20";

    // Send request
    CallResult res = m_msg_sender.call(GETLOCALLISTVERSION20_ACTION, request, response, error, message);
    if (res == CallResult::Ok)
    {
        LOG_INFO << "[" << m_identifier << "] - Call done : GetLocalListVersion20";
        ret = true;
    }
    else
    {
        LOG_ERROR << "[" << m_identifier << "] - Call failed : " << CallResultHelper.toString(res);
    }

    return ret;
}
/** @copydoc bool ICentralSystem20::IChargePoint20::call(
                const ocpp::messages::ocpp20::GetLog20Req&,
                ocpp::messages::ocpp20::GetLog20Conf&,
                std::string&,
                std::string&) */
bool ChargePointProxy20::call(const ocpp::messages::ocpp20::GetLog20Req& request,
                              ocpp::messages::ocpp20::GetLog20Conf&      response,
                              std::string&                               error,
                              std::string&                               message)
{
    bool ret = false;

    LOG_INFO << "[" << m_identifier << "] - GetLog20";

    // Send request
    CallResult res = m_msg_sender.call(GETLOG20_ACTION, request, response, error, message);
    if (res == CallResult::Ok)
    {
        LOG_INFO << "[" << m_identifier << "] - Call done : GetLog20";
        ret = true;
    }
    else
    {
        LOG_ERROR << "[" << m_identifier << "] - Call failed : " << CallResultHelper.toString(res);
    }

    return ret;
}
/** @copydoc bool ICentralSystem20::IChargePoint20::call(
                const ocpp::messages::ocpp20::GetMonitoringReport20Req&,
                ocpp::messages::ocpp20::GetMonitoringReport20Conf&,
                std::string&,
                std::string&) */
bool ChargePointProxy20::call(const ocpp::messages::ocpp20::GetMonitoringReport20Req& request,
                              ocpp::messages::ocpp20::GetMonitoringReport20Conf&      response,
                              std::string&                                            error,
                              std::string&                                            message)
{
    bool ret = false;

    LOG_INFO << "[" << m_identifier << "] - GetMonitoringReport20";

    // Send request
    CallResult res = m_msg_sender.call(GETMONITORINGREPORT20_ACTION, request, response, error, message);
    if (res == CallResult::Ok)
    {
        LOG_INFO << "[" << m_identifier << "] - Call done : GetMonitoringReport20";
        ret = true;
    }
    else
    {
        LOG_ERROR << "[" << m_identifier << "] - Call failed : " << CallResultHelper.toString(res);
    }

    return ret;
}
/** @copydoc bool ICentralSystem20::IChargePoint20::call(
                const ocpp::messages::ocpp20::GetReport20Req&,
                ocpp::messages::ocpp20::GetReport20Conf&,
                std::string&,
                std::string&) */
bool ChargePointProxy20::call(const ocpp::messages::ocpp20::GetReport20Req& request,
                              ocpp::messages::ocpp20::GetReport20Conf&      response,
                              std::string&                                  error,
                              std::string&                                  message)
{
    bool ret = false;

    LOG_INFO << "[" << m_identifier << "] - GetReport20";

    // Send request
    CallResult res = m_msg_sender.call(GETREPORT20_ACTION, request, response, error, message);
    if (res == CallResult::Ok)
    {
        LOG_INFO << "[" << m_identifier << "] - Call done : GetReport20";
        ret = true;
    }
    else
    {
        LOG_ERROR << "[" << m_identifier << "] - Call failed : " << CallResultHelper.toString(res);
    }

    return ret;
}
/** @copydoc bool ICentralSystem20::IChargePoint20::call(
                const ocpp::messages::ocpp20::GetTransactionStatus20Req&,
                ocpp::messages::ocpp20::GetTransactionStatus20Conf&,
                std::string&,
                std::string&) */
bool ChargePointProxy20::call(const ocpp::messages::ocpp20::GetTransactionStatus20Req& request,
                              ocpp::messages::ocpp20::GetTransactionStatus20Conf&      response,
                              std::string&                                             error,
                              std::string&                                             message)
{
    bool ret = false;

    LOG_INFO << "[" << m_identifier << "] - GetTransactionStatus20";

    // Send request
    CallResult res = m_msg_sender.call(GETTRANSACTIONSTATUS20_ACTION, request, response, error, message);
    if (res == CallResult::Ok)
    {
        LOG_INFO << "[" << m_identifier << "] - Call done : GetTransactionStatus20";
        ret = true;
    }
    else
    {
        LOG_ERROR << "[" << m_identifier << "] - Call failed : " << CallResultHelper.toString(res);
    }

    return ret;
}
/** @copydoc bool ICentralSystem20::IChargePoint20::call(
                const ocpp::messages::ocpp20::GetVariables20Req&,
                ocpp::messages::ocpp20::GetVariables20Conf&,
                std::string&,
                std::string&) */
bool ChargePointProxy20::call(const ocpp::messages::ocpp20::GetVariables20Req& request,
                              ocpp::messages::ocpp20::GetVariables20Conf&      response,
                              std::string&                                     error,
                              std::string&                                     message)
{
    bool ret = false;

    LOG_INFO << "[" << m_identifier << "] - GetVariables20";

    // Send request
    CallResult res = m_msg_sender.call(GETVARIABLES20_ACTION, request, response, error, message);
    if (res == CallResult::Ok)
    {
        LOG_INFO << "[" << m_identifier << "] - Call done : GetVariables20";
        ret = true;
    }
    else
    {
        LOG_ERROR << "[" << m_identifier << "] - Call failed : " << CallResultHelper.toString(res);
    }

    return ret;
}
/** @copydoc bool ICentralSystem20::IChargePoint20::call(
                const ocpp::messages::ocpp20::InstallCertificate20Req&,
                ocpp::messages::ocpp20::InstallCertificate20Conf&,
                std::string&,
                std::string&) */
bool ChargePointProxy20::call(const ocpp::messages::ocpp20::InstallCertificate20Req& request,
                              ocpp::messages::ocpp20::InstallCertificate20Conf&      response,
                              std::string&                                           error,
                              std::string&                                           message)
{
    bool ret = false;

    LOG_INFO << "[" << m_identifier << "] - InstallCertificate20";

    // Send request
    CallResult res = m_msg_sender.call(INSTALLCERTIFICATE20_ACTION, request, response, error, message);
    if (res == CallResult::Ok)
    {
        LOG_INFO << "[" << m_identifier << "] - Call done : InstallCertificate20";
        ret = true;
    }
    else
    {
        LOG_ERROR << "[" << m_identifier << "] - Call failed : " << CallResultHelper.toString(res);
    }

    return ret;
}
/** @copydoc bool ICentralSystem20::IChargePoint20::call(
                const ocpp::messages::ocpp20::PublishFirmware20Req&,
                ocpp::messages::ocpp20::PublishFirmware20Conf&,
                std::string&,
                std::string&) */
bool ChargePointProxy20::call(const ocpp::messages::ocpp20::PublishFirmware20Req& request,
                              ocpp::messages::ocpp20::PublishFirmware20Conf&      response,
                              std::string&                                        error,
                              std::string&                                        message)
{
    bool ret = false;

    LOG_INFO << "[" << m_identifier << "] - PublishFirmware20";

    // Send request
    CallResult res = m_msg_sender.call(PUBLISHFIRMWARE20_ACTION, request, response, error, message);
    if (res == CallResult::Ok)
    {
        LOG_INFO << "[" << m_identifier << "] - Call done : PublishFirmware20";
        ret = true;
    }
    else
    {
        LOG_ERROR << "[" << m_identifier << "] - Call failed : " << CallResultHelper.toString(res);
    }

    return ret;
}
/** @copydoc bool ICentralSystem20::IChargePoint20::call(
                const ocpp::messages::ocpp20::RequestStartTransaction20Req&,
                ocpp::messages::ocpp20::RequestStartTransaction20Conf&,
                std::string&,
                std::string&) */
bool ChargePointProxy20::call(const ocpp::messages::ocpp20::RequestStartTransaction20Req& request,
                              ocpp::messages::ocpp20::RequestStartTransaction20Conf&      response,
                              std::string&                                                error,
                              std::string&                                                message)
{
    bool ret = false;

    LOG_INFO << "[" << m_identifier << "] - RequestStartTransaction20";

    // Send request
    CallResult res = m_msg_sender.call(REQUESTSTARTTRANSACTION20_ACTION, request, response, error, message);
    if (res == CallResult::Ok)
    {
        LOG_INFO << "[" << m_identifier << "] - Call done : RequestStartTransaction20";
        ret = true;
    }
    else
    {
        LOG_ERROR << "[" << m_identifier << "] - Call failed : " << CallResultHelper.toString(res);
    }

    return ret;
}
/** @copydoc bool ICentralSystem20::IChargePoint20::call(
                const ocpp::messages::ocpp20::RequestStopTransaction20Req&,
                ocpp::messages::ocpp20::RequestStopTransaction20Conf&,
                std::string&,
                std::string&) */
bool ChargePointProxy20::call(const ocpp::messages::ocpp20::RequestStopTransaction20Req& request,
                              ocpp::messages::ocpp20::RequestStopTransaction20Conf&      response,
                              std::string&                                               error,
                              std::string&                                               message)
{
    bool ret = false;

    LOG_INFO << "[" << m_identifier << "] - RequestStopTransaction20";

    // Send request
    CallResult res = m_msg_sender.call(REQUESTSTOPTRANSACTION20_ACTION, request, response, error, message);
    if (res == CallResult::Ok)
    {
        LOG_INFO << "[" << m_identifier << "] - Call done : RequestStopTransaction20";
        ret = true;
    }
    else
    {
        LOG_ERROR << "[" << m_identifier << "] - Call failed : " << CallResultHelper.toString(res);
    }

    return ret;
}
/** @copydoc bool ICentralSystem20::IChargePoint20::call(
                const ocpp::messages::ocpp20::ReserveNow20Req&,
                ocpp::messages::ocpp20::ReserveNow20Conf&,
                std::string&,
                std::string&) */
bool ChargePointProxy20::call(const ocpp::messages::ocpp20::ReserveNow20Req& request,
                              ocpp::messages::ocpp20::ReserveNow20Conf&      response,
                              std::string&                                   error,
                              std::string&                                   message)
{
    bool ret = false;

    LOG_INFO << "[" << m_identifier << "] - ReserveNow20";

    // Send request
    CallResult res = m_msg_sender.call(RESERVENOW20_ACTION, request, response, error, message);
    if (res == CallResult::Ok)
    {
        LOG_INFO << "[" << m_identifier << "] - Call done : ReserveNow20";
        ret = true;
    }
    else
    {
        LOG_ERROR << "[" << m_identifier << "] - Call failed : " << CallResultHelper.toString(res);
    }

    return ret;
}
/** @copydoc bool ICentralSystem20::IChargePoint20::call(
                const ocpp::messages::ocpp20::Reset20Req&,
                ocpp::messages::ocpp20::Reset20Conf&,
                std::string&,
                std::string&) */
bool ChargePointProxy20::call(const ocpp::messages::ocpp20::Reset20Req& request,
                              ocpp::messages::ocpp20::Reset20Conf&      response,
                              std::string&                              error,
                              std::string&                              message)
{
    bool ret = false;

    LOG_INFO << "[" << m_identifier << "] - Reset20";

    // Send request
    CallResult res = m_msg_sender.call(RESET20_ACTION, request, response, error, message);
    if (res == CallResult::Ok)
    {
        LOG_INFO << "[" << m_identifier << "] - Call done : Reset20";
        ret = true;
    }
    else
    {
        LOG_ERROR << "[" << m_identifier << "] - Call failed : " << CallResultHelper.toString(res);
    }

    return ret;
}
/** @copydoc bool ICentralSystem20::IChargePoint20::call(
                const ocpp::messages::ocpp20::SendLocalList20Req&,
                ocpp::messages::ocpp20::SendLocalList20Conf&,
                std::string&,
                std::string&) */
bool ChargePointProxy20::call(const ocpp::messages::ocpp20::SendLocalList20Req& request,
                              ocpp::messages::ocpp20::SendLocalList20Conf&      response,
                              std::string&                                      error,
                              std::string&                                      message)
{
    bool ret = false;

    LOG_INFO << "[" << m_identifier << "] - SendLocalList20";

    // Send request
    CallResult res = m_msg_sender.call(SENDLOCALLIST20_ACTION, request, response, error, message);
    if (res == CallResult::Ok)
    {
        LOG_INFO << "[" << m_identifier << "] - Call done : SendLocalList20";
        ret = true;
    }
    else
    {
        LOG_ERROR << "[" << m_identifier << "] - Call failed : " << CallResultHelper.toString(res);
    }

    return ret;
}
/** @copydoc bool ICentralSystem20::IChargePoint20::call(
                const ocpp::messages::ocpp20::SetChargingProfile20Req&,
                ocpp::messages::ocpp20::SetChargingProfile20Conf&,
                std::string&,
                std::string&) */
bool ChargePointProxy20::call(const ocpp::messages::ocpp20::SetChargingProfile20Req& request,
                              ocpp::messages::ocpp20::SetChargingProfile20Conf&      response,
                              std::string&                                           error,
                              std::string&                                           message)
{
    bool ret = false;

    LOG_INFO << "[" << m_identifier << "] - SetChargingProfile20";

    // Send request
    CallResult res = m_msg_sender.call(SETCHARGINGPROFILE20_ACTION, request, response, error, message);
    if (res == CallResult::Ok)
    {
        LOG_INFO << "[" << m_identifier << "] - Call done : SetChargingProfile20";
        ret = true;
    }
    else
    {
        LOG_ERROR << "[" << m_identifier << "] - Call failed : " << CallResultHelper.toString(res);
    }

    return ret;
}
/** @copydoc bool ICentralSystem20::IChargePoint20::call(
                const ocpp::messages::ocpp20::SetDisplayMessage20Req&,
                ocpp::messages::ocpp20::SetDisplayMessage20Conf&,
                std::string&,
                std::string&) */
bool ChargePointProxy20::call(const ocpp::messages::ocpp20::SetDisplayMessage20Req& request,
                              ocpp::messages::ocpp20::SetDisplayMessage20Conf&      response,
                              std::string&                                          error,
                              std::string&                                          message)
{
    bool ret = false;

    LOG_INFO << "[" << m_identifier << "] - SetDisplayMessage20";

    // Send request
    CallResult res = m_msg_sender.call(SETDISPLAYMESSAGE20_ACTION, request, response, error, message);
    if (res == CallResult::Ok)
    {
        LOG_INFO << "[" << m_identifier << "] - Call done : SetDisplayMessage20";
        ret = true;
    }
    else
    {
        LOG_ERROR << "[" << m_identifier << "] - Call failed : " << CallResultHelper.toString(res);
    }

    return ret;
}
/** @copydoc bool ICentralSystem20::IChargePoint20::call(
                const ocpp::messages::ocpp20::SetMonitoringBase20Req&,
                ocpp::messages::ocpp20::SetMonitoringBase20Conf&,
                std::string&,
                std::string&) */
bool ChargePointProxy20::call(const ocpp::messages::ocpp20::SetMonitoringBase20Req& request,
                              ocpp::messages::ocpp20::SetMonitoringBase20Conf&      response,
                              std::string&                                          error,
                              std::string&                                          message)
{
    bool ret = false;

    LOG_INFO << "[" << m_identifier << "] - SetMonitoringBase20";

    // Send request
    CallResult res = m_msg_sender.call(SETMONITORINGBASE20_ACTION, request, response, error, message);
    if (res == CallResult::Ok)
    {
        LOG_INFO << "[" << m_identifier << "] - Call done : SetMonitoringBase20";
        ret = true;
    }
    else
    {
        LOG_ERROR << "[" << m_identifier << "] - Call failed : " << CallResultHelper.toString(res);
    }

    return ret;
}
/** @copydoc bool ICentralSystem20::IChargePoint20::call(
                const ocpp::messages::ocpp20::SetMonitoringLevel20Req&,
                ocpp::messages::ocpp20::SetMonitoringLevel20Conf&,
                std::string&,
                std::string&) */
bool ChargePointProxy20::call(const ocpp::messages::ocpp20::SetMonitoringLevel20Req& request,
                              ocpp::messages::ocpp20::SetMonitoringLevel20Conf&      response,
                              std::string&                                           error,
                              std::string&                                           message)
{
    bool ret = false;

    LOG_INFO << "[" << m_identifier << "] - SetMonitoringLevel20";

    // Send request
    CallResult res = m_msg_sender.call(SETMONITORINGLEVEL20_ACTION, request, response, error, message);
    if (res == CallResult::Ok)
    {
        LOG_INFO << "[" << m_identifier << "] - Call done : SetMonitoringLevel20";
        ret = true;
    }
    else
    {
        LOG_ERROR << "[" << m_identifier << "] - Call failed : " << CallResultHelper.toString(res);
    }

    return ret;
}
/** @copydoc bool ICentralSystem20::IChargePoint20::call(
                const ocpp::messages::ocpp20::SetNetworkProfile20Req&,
                ocpp::messages::ocpp20::SetNetworkProfile20Conf&,
                std::string&,
                std::string&) */
bool ChargePointProxy20::call(const ocpp::messages::ocpp20::SetNetworkProfile20Req& request,
                              ocpp::messages::ocpp20::SetNetworkProfile20Conf&      response,
                              std::string&                                          error,
                              std::string&                                          message)
{
    bool ret = false;

    LOG_INFO << "[" << m_identifier << "] - SetNetworkProfile20";

    // Send request
    CallResult res = m_msg_sender.call(SETNETWORKPROFILE20_ACTION, request, response, error, message);
    if (res == CallResult::Ok)
    {
        LOG_INFO << "[" << m_identifier << "] - Call done : SetNetworkProfile20";
        ret = true;
    }
    else
    {
        LOG_ERROR << "[" << m_identifier << "] - Call failed : " << CallResultHelper.toString(res);
    }

    return ret;
}
/** @copydoc bool ICentralSystem20::IChargePoint20::call(
                const ocpp::messages::ocpp20::SetVariableMonitoring20Req&,
                ocpp::messages::ocpp20::SetVariableMonitoring20Conf&,
                std::string&,
                std::string&) */
bool ChargePointProxy20::call(const ocpp::messages::ocpp20::SetVariableMonitoring20Req& request,
                              ocpp::messages::ocpp20::SetVariableMonitoring20Conf&      response,
                              std::string&                                              error,
                              std::string&                                              message)
{
    bool ret = false;

    LOG_INFO << "[" << m_identifier << "] - SetVariableMonitoring20";

    // Send request
    CallResult res = m_msg_sender.call(SETVARIABLEMONITORING20_ACTION, request, response, error, message);
    if (res == CallResult::Ok)
    {
        LOG_INFO << "[" << m_identifier << "] - Call done : SetVariableMonitoring20";
        ret = true;
    }
    else
    {
        LOG_ERROR << "[" << m_identifier << "] - Call failed : " << CallResultHelper.toString(res);
    }

    return ret;
}
/** @copydoc bool ICentralSystem20::IChargePoint20::call(
                const ocpp::messages::ocpp20::SetVariables20Req&,
                ocpp::messages::ocpp20::SetVariables20Conf&,
                std::string&,
                std::string&) */
bool ChargePointProxy20::call(const ocpp::messages::ocpp20::SetVariables20Req& request,
                              ocpp::messages::ocpp20::SetVariables20Conf&      response,
                              std::string&                                     error,
                              std::string&                                     message)
{
    bool ret = false;

    LOG_INFO << "[" << m_identifier << "] - SetVariables20";

    // Send request
    CallResult res = m_msg_sender.call(SETVARIABLES20_ACTION, request, response, error, message);
    if (res == CallResult::Ok)
    {
        LOG_INFO << "[" << m_identifier << "] - Call done : SetVariables20";
        ret = true;
    }
    else
    {
        LOG_ERROR << "[" << m_identifier << "] - Call failed : " << CallResultHelper.toString(res);
    }

    return ret;
}
/** @copydoc bool ICentralSystem20::IChargePoint20::call(
                const ocpp::messages::ocpp20::TriggerMessage20Req&,
                ocpp::messages::ocpp20::TriggerMessage20Conf&,
                std::string&,
                std::string&) */
bool ChargePointProxy20::call(const ocpp::messages::ocpp20::TriggerMessage20Req& request,
                              ocpp::messages::ocpp20::TriggerMessage20Conf&      response,
                              std::string&                                       error,
                              std::string&                                       message)
{
    bool ret = false;

    LOG_INFO << "[" << m_identifier << "] - TriggerMessage20";

    // Send request
    CallResult res = m_msg_sender.call(TRIGGERMESSAGE20_ACTION, request, response, error, message);
    if (res == CallResult::Ok)
    {
        LOG_INFO << "[" << m_identifier << "] - Call done : TriggerMessage20";
        ret = true;
    }
    else
    {
        LOG_ERROR << "[" << m_identifier << "] - Call failed : " << CallResultHelper.toString(res);
    }

    return ret;
}
/** @copydoc bool ICentralSystem20::IChargePoint20::call(
                const ocpp::messages::ocpp20::UnlockConnector20Req&,
                ocpp::messages::ocpp20::UnlockConnector20Conf&,
                std::string&,
                std::string&) */
bool ChargePointProxy20::call(const ocpp::messages::ocpp20::UnlockConnector20Req& request,
                              ocpp::messages::ocpp20::UnlockConnector20Conf&      response,
                              std::string&                                        error,
                              std::string&                                        message)
{
    bool ret = false;

    LOG_INFO << "[" << m_identifier << "] - UnlockConnector20";

    // Send request
    CallResult res = m_msg_sender.call(UNLOCKCONNECTOR20_ACTION, request, response, error, message);
    if (res == CallResult::Ok)
    {
        LOG_INFO << "[" << m_identifier << "] - Call done : UnlockConnector20";
        ret = true;
    }
    else
    {
        LOG_ERROR << "[" << m_identifier << "] - Call failed : " << CallResultHelper.toString(res);
    }

    return ret;
}
/** @copydoc bool ICentralSystem20::IChargePoint20::call(
                const ocpp::messages::ocpp20::UnpublishFirmware20Req&,
                ocpp::messages::ocpp20::UnpublishFirmware20Conf&,
                std::string&,
                std::string&) */
bool ChargePointProxy20::call(const ocpp::messages::ocpp20::UnpublishFirmware20Req& request,
                              ocpp::messages::ocpp20::UnpublishFirmware20Conf&      response,
                              std::string&                                          error,
                              std::string&                                          message)
{
    bool ret = false;

    LOG_INFO << "[" << m_identifier << "] - UnpublishFirmware20";

    // Send request
    CallResult res = m_msg_sender.call(UNPUBLISHFIRMWARE20_ACTION, request, response, error, message);
    if (res == CallResult::Ok)
    {
        LOG_INFO << "[" << m_identifier << "] - Call done : UnpublishFirmware20";
        ret = true;
    }
    else
    {
        LOG_ERROR << "[" << m_identifier << "] - Call failed : " << CallResultHelper.toString(res);
    }

    return ret;
}
/** @copydoc bool ICentralSystem20::IChargePoint20::call(
                const ocpp::messages::ocpp20::UpdateFirmware20Req&,
                ocpp::messages::ocpp20::UpdateFirmware20Conf&,
                std::string&,
                std::string&) */
bool ChargePointProxy20::call(const ocpp::messages::ocpp20::UpdateFirmware20Req& request,
                              ocpp::messages::ocpp20::UpdateFirmware20Conf&      response,
                              std::string&                                       error,
                              std::string&                                       message)
{
    bool ret = false;

    LOG_INFO << "[" << m_identifier << "] - UpdateFirmware20";

    // Send request
    CallResult res = m_msg_sender.call(UPDATEFIRMWARE20_ACTION, request, response, error, message);
    if (res == CallResult::Ok)
    {
        LOG_INFO << "[" << m_identifier << "] - Call done : UpdateFirmware20";
        ret = true;
    }
    else
    {
        LOG_ERROR << "[" << m_identifier << "] - Call failed : " << CallResultHelper.toString(res);
    }

    return ret;
}

// IRpc::IListener interface

/** @copydoc void IRpc::IListener::rpcDisconnected() */
void ChargePointProxy20::rpcDisconnected()
{
    LOG_WARNING << "[" << m_identifier << "] - Disconnected";
    if (m_user_handler)
    {
        m_user_handler->disconnected();
    }
}

/** @copydoc void IRpc::IListener::rpcError() */
void ChargePointProxy20::rpcError()
{
    LOG_ERROR << "[" << m_identifier << "] - Connection error";
}

/** @copydoc bool IRpc::IListener::rpcCallReceived(const std::string&,
                                                       const rapidjson::Value&,
                                                       rapidjson::Document&,
                                                       std::string&,
                                                       std::string&) */
bool ChargePointProxy20::rpcCallReceived(const std::string&      action,
                                         const rapidjson::Value& payload,
                                         rapidjson::Document&    response,
                                         std::string&            error_code,
                                         std::string&            error_message)
{
    return m_msg_dispatcher.dispatchMessage(action, payload, response, error_code, error_message);
}

// IRpc::ISpy interface

/** @copydoc void IRpc::ISpy::rcpMessageReceived(const std::string& msg) */
void ChargePointProxy20::rcpMessageReceived(const std::string& msg)
{
    LOG_COM << "[" << m_identifier << "] - RX : " << msg;
}

void ChargePointProxy20::rcpMessageSent(const std::string& msg)
{
    LOG_COM << "[" << m_identifier << "] - TX : " << msg;
}

} // namespace ocpp20
} // namespace centralsystem
} // namespace ocpp