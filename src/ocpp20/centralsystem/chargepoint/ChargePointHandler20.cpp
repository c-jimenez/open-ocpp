/*
Copyright (c) 2020 Cedric Jimenez
This file is part of OpenOCPP.

OpenOCPP is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 2.1 of the License, or
(at your option) any later version.

OpenOCPP is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OpenOCPP. If not, see <http://www.gnu.org/licenses/>.
*/

/* Generated by json2cpp */

#include "ChargePointHandler20.h"
#include "ICentralSystemConfig20.h"
#include "IChargePointRequestHandler20.h"
#include "IRpc.h"
#include "MessageDispatcher.h"

using namespace ocpp::messages;
using namespace ocpp::messages::ocpp20;
using namespace ocpp::types;
using namespace ocpp::types::ocpp20;

namespace ocpp
{
namespace centralsystem
{
namespace ocpp20
{

/** @brief Constructor */
ChargePointHandler20::ChargePointHandler20(const std::string&                                 identifier,
                                           const ocpp::messages::ocpp20::MessagesConverter20& messages_converter,
                                           ocpp::messages::MessageDispatcher&                 msg_dispatcher,
                                           const ocpp::config::ICentralSystemConfig20&        stack_config)
    : GenericMessageHandler<BootNotificationReq, BootNotificationConf>(BOOTNOTIFICATION_ACTION, messages_converter),
      GenericMessageHandler<AuthorizeReq, AuthorizeConf>(AUTHORIZE_ACTION, messages_converter),
      GenericMessageHandler<ClearedChargingLimitReq, ClearedChargingLimitConf>(CLEAREDCHARGINGLIMIT_ACTION, messages_converter),
      GenericMessageHandler<CostUpdatedReq, CostUpdatedConf>(COSTUPDATED_ACTION, messages_converter),
      GenericMessageHandler<DataTransferReq, DataTransferConf>(DATATRANSFER_ACTION, messages_converter),
      GenericMessageHandler<FirmwareStatusNotificationReq, FirmwareStatusNotificationConf>(FIRMWARESTATUSNOTIFICATION_ACTION,
                                                                                           messages_converter),
      GenericMessageHandler<HeartbeatReq, HeartbeatConf>(HEARTBEAT_ACTION, messages_converter),
      GenericMessageHandler<LogStatusNotificationReq, LogStatusNotificationConf>(LOGSTATUSNOTIFICATION_ACTION, messages_converter),
      GenericMessageHandler<MeterValuesReq, MeterValuesConf>(METERVALUES_ACTION, messages_converter),
      GenericMessageHandler<NotifyChargingLimitReq, NotifyChargingLimitConf>(NOTIFYCHARGINGLIMIT_ACTION, messages_converter),
      GenericMessageHandler<NotifyCustomerInformationReq, NotifyCustomerInformationConf>(NOTIFYCUSTOMERINFORMATION_ACTION,
                                                                                         messages_converter),
      GenericMessageHandler<NotifyDisplayMessagesReq, NotifyDisplayMessagesConf>(NOTIFYDISPLAYMESSAGES_ACTION, messages_converter),
      GenericMessageHandler<NotifyEVChargingNeedsReq, NotifyEVChargingNeedsConf>(NOTIFYEVCHARGINGNEEDS_ACTION, messages_converter),
      GenericMessageHandler<NotifyEVChargingScheduleReq, NotifyEVChargingScheduleConf>(NOTIFYEVCHARGINGSCHEDULE_ACTION, messages_converter),
      GenericMessageHandler<NotifyEventReq, NotifyEventConf>(NOTIFYEVENT_ACTION, messages_converter),
      GenericMessageHandler<NotifyMonitoringReportReq, NotifyMonitoringReportConf>(NOTIFYMONITORINGREPORT_ACTION, messages_converter),
      GenericMessageHandler<NotifyReportReq, NotifyReportConf>(NOTIFYREPORT_ACTION, messages_converter),
      GenericMessageHandler<PublishFirmwareStatusNotificationReq, PublishFirmwareStatusNotificationConf>(
          PUBLISHFIRMWARESTATUSNOTIFICATION_ACTION, messages_converter),
      GenericMessageHandler<ReportChargingProfilesReq, ReportChargingProfilesConf>(REPORTCHARGINGPROFILES_ACTION, messages_converter),
      GenericMessageHandler<ReservationStatusUpdateReq, ReservationStatusUpdateConf>(RESERVATIONSTATUSUPDATE_ACTION, messages_converter),
      GenericMessageHandler<SecurityEventNotificationReq, SecurityEventNotificationConf>(SECURITYEVENTNOTIFICATION_ACTION,
                                                                                         messages_converter),
      GenericMessageHandler<SignCertificateReq, SignCertificateConf>(SIGNCERTIFICATE_ACTION, messages_converter),
      GenericMessageHandler<StatusNotificationReq, StatusNotificationConf>(STATUSNOTIFICATION_ACTION, messages_converter),
      GenericMessageHandler<TransactionEventReq, TransactionEventConf>(TRANSACTIONEVENT_ACTION, messages_converter),

      m_identifier(identifier),
      m_stack_config(stack_config),
      m_messages_converter(messages_converter),
      m_handler(nullptr)
{
    msg_dispatcher.registerHandler(BOOTNOTIFICATION_ACTION,
                                   *dynamic_cast<GenericMessageHandler<BootNotificationReq, BootNotificationConf>*>(this));
    msg_dispatcher.registerHandler(AUTHORIZE_ACTION, *dynamic_cast<GenericMessageHandler<AuthorizeReq, AuthorizeConf>*>(this));
    msg_dispatcher.registerHandler(CLEAREDCHARGINGLIMIT_ACTION,
                                   *dynamic_cast<GenericMessageHandler<ClearedChargingLimitReq, ClearedChargingLimitConf>*>(this));
    msg_dispatcher.registerHandler(COSTUPDATED_ACTION, *dynamic_cast<GenericMessageHandler<CostUpdatedReq, CostUpdatedConf>*>(this));
    msg_dispatcher.registerHandler(DATATRANSFER_ACTION, *dynamic_cast<GenericMessageHandler<DataTransferReq, DataTransferConf>*>(this));
    msg_dispatcher.registerHandler(
        FIRMWARESTATUSNOTIFICATION_ACTION,
        *dynamic_cast<GenericMessageHandler<FirmwareStatusNotificationReq, FirmwareStatusNotificationConf>*>(this));
    msg_dispatcher.registerHandler(HEARTBEAT_ACTION, *dynamic_cast<GenericMessageHandler<HeartbeatReq, HeartbeatConf>*>(this));
    msg_dispatcher.registerHandler(LOGSTATUSNOTIFICATION_ACTION,
                                   *dynamic_cast<GenericMessageHandler<LogStatusNotificationReq, LogStatusNotificationConf>*>(this));
    msg_dispatcher.registerHandler(METERVALUES_ACTION, *dynamic_cast<GenericMessageHandler<MeterValuesReq, MeterValuesConf>*>(this));
    msg_dispatcher.registerHandler(NOTIFYCHARGINGLIMIT_ACTION,
                                   *dynamic_cast<GenericMessageHandler<NotifyChargingLimitReq, NotifyChargingLimitConf>*>(this));
    msg_dispatcher.registerHandler(
        NOTIFYCUSTOMERINFORMATION_ACTION,
        *dynamic_cast<GenericMessageHandler<NotifyCustomerInformationReq, NotifyCustomerInformationConf>*>(this));
    msg_dispatcher.registerHandler(NOTIFYDISPLAYMESSAGES_ACTION,
                                   *dynamic_cast<GenericMessageHandler<NotifyDisplayMessagesReq, NotifyDisplayMessagesConf>*>(this));
    msg_dispatcher.registerHandler(NOTIFYEVCHARGINGNEEDS_ACTION,
                                   *dynamic_cast<GenericMessageHandler<NotifyEVChargingNeedsReq, NotifyEVChargingNeedsConf>*>(this));
    msg_dispatcher.registerHandler(NOTIFYEVCHARGINGSCHEDULE_ACTION,
                                   *dynamic_cast<GenericMessageHandler<NotifyEVChargingScheduleReq, NotifyEVChargingScheduleConf>*>(this));
    msg_dispatcher.registerHandler(NOTIFYEVENT_ACTION, *dynamic_cast<GenericMessageHandler<NotifyEventReq, NotifyEventConf>*>(this));
    msg_dispatcher.registerHandler(NOTIFYMONITORINGREPORT_ACTION,
                                   *dynamic_cast<GenericMessageHandler<NotifyMonitoringReportReq, NotifyMonitoringReportConf>*>(this));
    msg_dispatcher.registerHandler(NOTIFYREPORT_ACTION, *dynamic_cast<GenericMessageHandler<NotifyReportReq, NotifyReportConf>*>(this));
    msg_dispatcher.registerHandler(
        PUBLISHFIRMWARESTATUSNOTIFICATION_ACTION,
        *dynamic_cast<GenericMessageHandler<PublishFirmwareStatusNotificationReq, PublishFirmwareStatusNotificationConf>*>(this));
    msg_dispatcher.registerHandler(REPORTCHARGINGPROFILES_ACTION,
                                   *dynamic_cast<GenericMessageHandler<ReportChargingProfilesReq, ReportChargingProfilesConf>*>(this));
    msg_dispatcher.registerHandler(RESERVATIONSTATUSUPDATE_ACTION,
                                   *dynamic_cast<GenericMessageHandler<ReservationStatusUpdateReq, ReservationStatusUpdateConf>*>(this));
    msg_dispatcher.registerHandler(
        SECURITYEVENTNOTIFICATION_ACTION,
        *dynamic_cast<GenericMessageHandler<SecurityEventNotificationReq, SecurityEventNotificationConf>*>(this));
    msg_dispatcher.registerHandler(SIGNCERTIFICATE_ACTION,
                                   *dynamic_cast<GenericMessageHandler<SignCertificateReq, SignCertificateConf>*>(this));
    msg_dispatcher.registerHandler(STATUSNOTIFICATION_ACTION,
                                   *dynamic_cast<GenericMessageHandler<StatusNotificationReq, StatusNotificationConf>*>(this));
    msg_dispatcher.registerHandler(TRANSACTIONEVENT_ACTION,
                                   *dynamic_cast<GenericMessageHandler<TransactionEventReq, TransactionEventConf>*>(this));
}
/** @brief Destructor */
ChargePointHandler20::~ChargePointHandler20() { }

// OCPP handlers
/** @copydoc bool GenericMessageHandler<RequestType, ResponseType>::handleMessage(const RequestType& request,
     *                                                                                ResponseType& response,
     *                                                                                std::string& error_code,
     *                                                                                std::string& error_message)
     */
bool ChargePointHandler20::handleMessage(const ocpp::messages::ocpp20::BootNotificationReq& request,
                                         ocpp::messages::ocpp20::BootNotificationConf&      response,
                                         std::string&                                       error_code,
                                         std::string&                                       error_message)
{
    bool ret = false;

    LOG_INFO << "[" << m_identifier << "] - BootNotification requested";

    // Notify request
    if (m_handler)
    {
        ret = m_handler->onBootNotification(request, response, error_code, error_message);

        LOG_INFO << "[" << m_identifier << "] - BootNotification handled";
    }
    else
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_INTERNAL;
    }

    return ret;
}
/** @copydoc bool GenericMessageHandler<RequestType, ResponseType>::handleMessage(const RequestType& request,
     *                                                                                ResponseType& response,
     *                                                                                std::string& error_code,
     *                                                                                std::string& error_message)
     */
bool ChargePointHandler20::handleMessage(const ocpp::messages::ocpp20::AuthorizeReq& request,
                                         ocpp::messages::ocpp20::AuthorizeConf&      response,
                                         std::string&                                error_code,
                                         std::string&                                error_message)
{
    bool ret = false;

    LOG_INFO << "[" << m_identifier << "] - Authorize requested";

    // Notify request
    if (m_handler)
    {
        ret = m_handler->onAuthorize(request, response, error_code, error_message);

        LOG_INFO << "[" << m_identifier << "] - Authorize handled";
    }
    else
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_INTERNAL;
    }

    return ret;
}
/** @copydoc bool GenericMessageHandler<RequestType, ResponseType>::handleMessage(const RequestType& request,
     *                                                                                ResponseType& response,
     *                                                                                std::string& error_code,
     *                                                                                std::string& error_message)
     */
bool ChargePointHandler20::handleMessage(const ocpp::messages::ocpp20::ClearedChargingLimitReq& request,
                                         ocpp::messages::ocpp20::ClearedChargingLimitConf&      response,
                                         std::string&                                           error_code,
                                         std::string&                                           error_message)
{
    bool ret = false;

    LOG_INFO << "[" << m_identifier << "] - ClearedChargingLimit requested";

    // Notify request
    if (m_handler)
    {
        ret = m_handler->onClearedChargingLimit(request, response, error_code, error_message);

        LOG_INFO << "[" << m_identifier << "] - ClearedChargingLimit handled";
    }
    else
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_INTERNAL;
    }

    return ret;
}
/** @copydoc bool GenericMessageHandler<RequestType, ResponseType>::handleMessage(const RequestType& request,
     *                                                                                ResponseType& response,
     *                                                                                std::string& error_code,
     *                                                                                std::string& error_message)
     */
bool ChargePointHandler20::handleMessage(const ocpp::messages::ocpp20::CostUpdatedReq& request,
                                         ocpp::messages::ocpp20::CostUpdatedConf&      response,
                                         std::string&                                  error_code,
                                         std::string&                                  error_message)
{
    bool ret = false;

    LOG_INFO << "[" << m_identifier << "] - CostUpdated requested";

    // Notify request
    if (m_handler)
    {
        ret = m_handler->onCostUpdated(request, response, error_code, error_message);

        LOG_INFO << "[" << m_identifier << "] - CostUpdated handled";
    }
    else
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_INTERNAL;
    }

    return ret;
}
/** @copydoc bool GenericMessageHandler<RequestType, ResponseType>::handleMessage(const RequestType& request,
     *                                                                                ResponseType& response,
     *                                                                                std::string& error_code,
     *                                                                                std::string& error_message)
     */
bool ChargePointHandler20::handleMessage(const ocpp::messages::ocpp20::DataTransferReq& request,
                                         ocpp::messages::ocpp20::DataTransferConf&      response,
                                         std::string&                                   error_code,
                                         std::string&                                   error_message)
{
    bool ret = false;

    LOG_INFO << "[" << m_identifier << "] - DataTransfer requested";

    // Notify request
    if (m_handler)
    {
        ret = m_handler->onDataTransfer(request, response, error_code, error_message);

        LOG_INFO << "[" << m_identifier << "] - DataTransfer handled";
    }
    else
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_INTERNAL;
    }

    return ret;
}
/** @copydoc bool GenericMessageHandler<RequestType, ResponseType>::handleMessage(const RequestType& request,
     *                                                                                ResponseType& response,
     *                                                                                std::string& error_code,
     *                                                                                std::string& error_message)
     */
bool ChargePointHandler20::handleMessage(const ocpp::messages::ocpp20::FirmwareStatusNotificationReq& request,
                                         ocpp::messages::ocpp20::FirmwareStatusNotificationConf&      response,
                                         std::string&                                                 error_code,
                                         std::string&                                                 error_message)
{
    bool ret = false;

    LOG_INFO << "[" << m_identifier << "] - FirmwareStatusNotification requested";

    // Notify request
    if (m_handler)
    {
        ret = m_handler->onFirmwareStatusNotification(request, response, error_code, error_message);

        LOG_INFO << "[" << m_identifier << "] - FirmwareStatusNotification handled";
    }
    else
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_INTERNAL;
    }

    return ret;
}
/** @copydoc bool GenericMessageHandler<RequestType, ResponseType>::handleMessage(const RequestType& request,
     *                                                                                ResponseType& response,
     *                                                                                std::string& error_code,
     *                                                                                std::string& error_message)
     */
bool ChargePointHandler20::handleMessage(const ocpp::messages::ocpp20::HeartbeatReq& request,
                                         ocpp::messages::ocpp20::HeartbeatConf&      response,
                                         std::string&                                error_code,
                                         std::string&                                error_message)
{
    bool ret = false;

    LOG_INFO << "[" << m_identifier << "] - Heartbeat requested";

    // Notify request
    if (m_handler)
    {
        ret = m_handler->onHeartbeat(request, response, error_code, error_message);

        LOG_INFO << "[" << m_identifier << "] - Heartbeat handled";
    }
    else
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_INTERNAL;
    }

    return ret;
}
/** @copydoc bool GenericMessageHandler<RequestType, ResponseType>::handleMessage(const RequestType& request,
     *                                                                                ResponseType& response,
     *                                                                                std::string& error_code,
     *                                                                                std::string& error_message)
     */
bool ChargePointHandler20::handleMessage(const ocpp::messages::ocpp20::LogStatusNotificationReq& request,
                                         ocpp::messages::ocpp20::LogStatusNotificationConf&      response,
                                         std::string&                                            error_code,
                                         std::string&                                            error_message)
{
    bool ret = false;

    LOG_INFO << "[" << m_identifier << "] - LogStatusNotification requested";

    // Notify request
    if (m_handler)
    {
        ret = m_handler->onLogStatusNotification(request, response, error_code, error_message);

        LOG_INFO << "[" << m_identifier << "] - LogStatusNotification handled";
    }
    else
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_INTERNAL;
    }

    return ret;
}
/** @copydoc bool GenericMessageHandler<RequestType, ResponseType>::handleMessage(const RequestType& request,
     *                                                                                ResponseType& response,
     *                                                                                std::string& error_code,
     *                                                                                std::string& error_message)
     */
bool ChargePointHandler20::handleMessage(const ocpp::messages::ocpp20::MeterValuesReq& request,
                                         ocpp::messages::ocpp20::MeterValuesConf&      response,
                                         std::string&                                  error_code,
                                         std::string&                                  error_message)
{
    bool ret = false;

    LOG_INFO << "[" << m_identifier << "] - MeterValues requested";

    // Notify request
    if (m_handler)
    {
        ret = m_handler->onMeterValues(request, response, error_code, error_message);

        LOG_INFO << "[" << m_identifier << "] - MeterValues handled";
    }
    else
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_INTERNAL;
    }

    return ret;
}
/** @copydoc bool GenericMessageHandler<RequestType, ResponseType>::handleMessage(const RequestType& request,
     *                                                                                ResponseType& response,
     *                                                                                std::string& error_code,
     *                                                                                std::string& error_message)
     */
bool ChargePointHandler20::handleMessage(const ocpp::messages::ocpp20::NotifyChargingLimitReq& request,
                                         ocpp::messages::ocpp20::NotifyChargingLimitConf&      response,
                                         std::string&                                          error_code,
                                         std::string&                                          error_message)
{
    bool ret = false;

    LOG_INFO << "[" << m_identifier << "] - NotifyChargingLimit requested";

    // Notify request
    if (m_handler)
    {
        ret = m_handler->onNotifyChargingLimit(request, response, error_code, error_message);

        LOG_INFO << "[" << m_identifier << "] - NotifyChargingLimit handled";
    }
    else
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_INTERNAL;
    }

    return ret;
}
/** @copydoc bool GenericMessageHandler<RequestType, ResponseType>::handleMessage(const RequestType& request,
     *                                                                                ResponseType& response,
     *                                                                                std::string& error_code,
     *                                                                                std::string& error_message)
     */
bool ChargePointHandler20::handleMessage(const ocpp::messages::ocpp20::NotifyCustomerInformationReq& request,
                                         ocpp::messages::ocpp20::NotifyCustomerInformationConf&      response,
                                         std::string&                                                error_code,
                                         std::string&                                                error_message)
{
    bool ret = false;

    LOG_INFO << "[" << m_identifier << "] - NotifyCustomerInformation requested";

    // Notify request
    if (m_handler)
    {
        ret = m_handler->onNotifyCustomerInformation(request, response, error_code, error_message);

        LOG_INFO << "[" << m_identifier << "] - NotifyCustomerInformation handled";
    }
    else
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_INTERNAL;
    }

    return ret;
}
/** @copydoc bool GenericMessageHandler<RequestType, ResponseType>::handleMessage(const RequestType& request,
     *                                                                                ResponseType& response,
     *                                                                                std::string& error_code,
     *                                                                                std::string& error_message)
     */
bool ChargePointHandler20::handleMessage(const ocpp::messages::ocpp20::NotifyDisplayMessagesReq& request,
                                         ocpp::messages::ocpp20::NotifyDisplayMessagesConf&      response,
                                         std::string&                                            error_code,
                                         std::string&                                            error_message)
{
    bool ret = false;

    LOG_INFO << "[" << m_identifier << "] - NotifyDisplayMessages requested";

    // Notify request
    if (m_handler)
    {
        ret = m_handler->onNotifyDisplayMessages(request, response, error_code, error_message);

        LOG_INFO << "[" << m_identifier << "] - NotifyDisplayMessages handled";
    }
    else
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_INTERNAL;
    }

    return ret;
}
/** @copydoc bool GenericMessageHandler<RequestType, ResponseType>::handleMessage(const RequestType& request,
     *                                                                                ResponseType& response,
     *                                                                                std::string& error_code,
     *                                                                                std::string& error_message)
     */
bool ChargePointHandler20::handleMessage(const ocpp::messages::ocpp20::NotifyEVChargingNeedsReq& request,
                                         ocpp::messages::ocpp20::NotifyEVChargingNeedsConf&      response,
                                         std::string&                                            error_code,
                                         std::string&                                            error_message)
{
    bool ret = false;

    LOG_INFO << "[" << m_identifier << "] - NotifyEVChargingNeeds requested";

    // Notify request
    if (m_handler)
    {
        ret = m_handler->onNotifyEVChargingNeeds(request, response, error_code, error_message);

        LOG_INFO << "[" << m_identifier << "] - NotifyEVChargingNeeds handled";
    }
    else
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_INTERNAL;
    }

    return ret;
}
/** @copydoc bool GenericMessageHandler<RequestType, ResponseType>::handleMessage(const RequestType& request,
     *                                                                                ResponseType& response,
     *                                                                                std::string& error_code,
     *                                                                                std::string& error_message)
     */
bool ChargePointHandler20::handleMessage(const ocpp::messages::ocpp20::NotifyEVChargingScheduleReq& request,
                                         ocpp::messages::ocpp20::NotifyEVChargingScheduleConf&      response,
                                         std::string&                                               error_code,
                                         std::string&                                               error_message)
{
    bool ret = false;

    LOG_INFO << "[" << m_identifier << "] - NotifyEVChargingSchedule requested";

    // Notify request
    if (m_handler)
    {
        ret = m_handler->onNotifyEVChargingSchedule(request, response, error_code, error_message);

        LOG_INFO << "[" << m_identifier << "] - NotifyEVChargingSchedule handled";
    }
    else
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_INTERNAL;
    }

    return ret;
}
/** @copydoc bool GenericMessageHandler<RequestType, ResponseType>::handleMessage(const RequestType& request,
     *                                                                                ResponseType& response,
     *                                                                                std::string& error_code,
     *                                                                                std::string& error_message)
     */
bool ChargePointHandler20::handleMessage(const ocpp::messages::ocpp20::NotifyEventReq& request,
                                         ocpp::messages::ocpp20::NotifyEventConf&      response,
                                         std::string&                                  error_code,
                                         std::string&                                  error_message)
{
    bool ret = false;

    LOG_INFO << "[" << m_identifier << "] - NotifyEvent requested";

    // Notify request
    if (m_handler)
    {
        ret = m_handler->onNotifyEvent(request, response, error_code, error_message);

        LOG_INFO << "[" << m_identifier << "] - NotifyEvent handled";
    }
    else
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_INTERNAL;
    }

    return ret;
}
/** @copydoc bool GenericMessageHandler<RequestType, ResponseType>::handleMessage(const RequestType& request,
     *                                                                                ResponseType& response,
     *                                                                                std::string& error_code,
     *                                                                                std::string& error_message)
     */
bool ChargePointHandler20::handleMessage(const ocpp::messages::ocpp20::NotifyMonitoringReportReq& request,
                                         ocpp::messages::ocpp20::NotifyMonitoringReportConf&      response,
                                         std::string&                                             error_code,
                                         std::string&                                             error_message)
{
    bool ret = false;

    LOG_INFO << "[" << m_identifier << "] - NotifyMonitoringReport requested";

    // Notify request
    if (m_handler)
    {
        ret = m_handler->onNotifyMonitoringReport(request, response, error_code, error_message);

        LOG_INFO << "[" << m_identifier << "] - NotifyMonitoringReport handled";
    }
    else
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_INTERNAL;
    }

    return ret;
}
/** @copydoc bool GenericMessageHandler<RequestType, ResponseType>::handleMessage(const RequestType& request,
     *                                                                                ResponseType& response,
     *                                                                                std::string& error_code,
     *                                                                                std::string& error_message)
     */
bool ChargePointHandler20::handleMessage(const ocpp::messages::ocpp20::NotifyReportReq& request,
                                         ocpp::messages::ocpp20::NotifyReportConf&      response,
                                         std::string&                                   error_code,
                                         std::string&                                   error_message)
{
    bool ret = false;

    LOG_INFO << "[" << m_identifier << "] - NotifyReport requested";

    // Notify request
    if (m_handler)
    {
        ret = m_handler->onNotifyReport(request, response, error_code, error_message);

        LOG_INFO << "[" << m_identifier << "] - NotifyReport handled";
    }
    else
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_INTERNAL;
    }

    return ret;
}
/** @copydoc bool GenericMessageHandler<RequestType, ResponseType>::handleMessage(const RequestType& request,
     *                                                                                ResponseType& response,
     *                                                                                std::string& error_code,
     *                                                                                std::string& error_message)
     */
bool ChargePointHandler20::handleMessage(const ocpp::messages::ocpp20::PublishFirmwareStatusNotificationReq& request,
                                         ocpp::messages::ocpp20::PublishFirmwareStatusNotificationConf&      response,
                                         std::string&                                                        error_code,
                                         std::string&                                                        error_message)
{
    bool ret = false;

    LOG_INFO << "[" << m_identifier << "] - PublishFirmwareStatusNotification requested";

    // Notify request
    if (m_handler)
    {
        ret = m_handler->onPublishFirmwareStatusNotification(request, response, error_code, error_message);

        LOG_INFO << "[" << m_identifier << "] - PublishFirmwareStatusNotification handled";
    }
    else
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_INTERNAL;
    }

    return ret;
}
/** @copydoc bool GenericMessageHandler<RequestType, ResponseType>::handleMessage(const RequestType& request,
     *                                                                                ResponseType& response,
     *                                                                                std::string& error_code,
     *                                                                                std::string& error_message)
     */
bool ChargePointHandler20::handleMessage(const ocpp::messages::ocpp20::ReportChargingProfilesReq& request,
                                         ocpp::messages::ocpp20::ReportChargingProfilesConf&      response,
                                         std::string&                                             error_code,
                                         std::string&                                             error_message)
{
    bool ret = false;

    LOG_INFO << "[" << m_identifier << "] - ReportChargingProfiles requested";

    // Notify request
    if (m_handler)
    {
        ret = m_handler->onReportChargingProfiles(request, response, error_code, error_message);

        LOG_INFO << "[" << m_identifier << "] - ReportChargingProfiles handled";
    }
    else
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_INTERNAL;
    }

    return ret;
}
/** @copydoc bool GenericMessageHandler<RequestType, ResponseType>::handleMessage(const RequestType& request,
     *                                                                                ResponseType& response,
     *                                                                                std::string& error_code,
     *                                                                                std::string& error_message)
     */
bool ChargePointHandler20::handleMessage(const ocpp::messages::ocpp20::ReservationStatusUpdateReq& request,
                                         ocpp::messages::ocpp20::ReservationStatusUpdateConf&      response,
                                         std::string&                                              error_code,
                                         std::string&                                              error_message)
{
    bool ret = false;

    LOG_INFO << "[" << m_identifier << "] - ReservationStatusUpdate requested";

    // Notify request
    if (m_handler)
    {
        ret = m_handler->onReservationStatusUpdate(request, response, error_code, error_message);

        LOG_INFO << "[" << m_identifier << "] - ReservationStatusUpdate handled";
    }
    else
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_INTERNAL;
    }

    return ret;
}
/** @copydoc bool GenericMessageHandler<RequestType, ResponseType>::handleMessage(const RequestType& request,
     *                                                                                ResponseType& response,
     *                                                                                std::string& error_code,
     *                                                                                std::string& error_message)
     */
bool ChargePointHandler20::handleMessage(const ocpp::messages::ocpp20::SecurityEventNotificationReq& request,
                                         ocpp::messages::ocpp20::SecurityEventNotificationConf&      response,
                                         std::string&                                                error_code,
                                         std::string&                                                error_message)
{
    bool ret = false;

    LOG_INFO << "[" << m_identifier << "] - SecurityEventNotification requested";

    // Notify request
    if (m_handler)
    {
        ret = m_handler->onSecurityEventNotification(request, response, error_code, error_message);

        LOG_INFO << "[" << m_identifier << "] - SecurityEventNotification handled";
    }
    else
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_INTERNAL;
    }

    return ret;
}
/** @copydoc bool GenericMessageHandler<RequestType, ResponseType>::handleMessage(const RequestType& request,
     *                                                                                ResponseType& response,
     *                                                                                std::string& error_code,
     *                                                                                std::string& error_message)
     */
bool ChargePointHandler20::handleMessage(const ocpp::messages::ocpp20::SignCertificateReq& request,
                                         ocpp::messages::ocpp20::SignCertificateConf&      response,
                                         std::string&                                      error_code,
                                         std::string&                                      error_message)
{
    bool ret = false;

    LOG_INFO << "[" << m_identifier << "] - SignCertificate requested";

    // Notify request
    if (m_handler)
    {
        ret = m_handler->onSignCertificate(request, response, error_code, error_message);

        LOG_INFO << "[" << m_identifier << "] - SignCertificate handled";
    }
    else
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_INTERNAL;
    }

    return ret;
}
/** @copydoc bool GenericMessageHandler<RequestType, ResponseType>::handleMessage(const RequestType& request,
     *                                                                                ResponseType& response,
     *                                                                                std::string& error_code,
     *                                                                                std::string& error_message)
     */
bool ChargePointHandler20::handleMessage(const ocpp::messages::ocpp20::StatusNotificationReq& request,
                                         ocpp::messages::ocpp20::StatusNotificationConf&      response,
                                         std::string&                                         error_code,
                                         std::string&                                         error_message)
{
    bool ret = false;

    LOG_INFO << "[" << m_identifier << "] - StatusNotification requested";

    // Notify request
    if (m_handler)
    {
        ret = m_handler->onStatusNotification(request, response, error_code, error_message);

        LOG_INFO << "[" << m_identifier << "] - StatusNotification handled";
    }
    else
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_INTERNAL;
    }

    return ret;
}
/** @copydoc bool GenericMessageHandler<RequestType, ResponseType>::handleMessage(const RequestType& request,
     *                                                                                ResponseType& response,
     *                                                                                std::string& error_code,
     *                                                                                std::string& error_message)
     */
bool ChargePointHandler20::handleMessage(const ocpp::messages::ocpp20::TransactionEventReq& request,
                                         ocpp::messages::ocpp20::TransactionEventConf&      response,
                                         std::string&                                       error_code,
                                         std::string&                                       error_message)
{
    bool ret = false;

    LOG_INFO << "[" << m_identifier << "] - TransactionEvent requested";

    // Notify request
    if (m_handler)
    {
        ret = m_handler->onTransactionEvent(request, response, error_code, error_message);

        LOG_INFO << "[" << m_identifier << "] - TransactionEvent handled";
    }
    else
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_INTERNAL;
    }

    return ret;
}

} // namespace ocpp20
} // namespace centralsystem
} // namespace ocpp