/*
Copyright (c) 2020 Cedric Jimenez
This file is part of OpenOCPP.

OpenOCPP is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 2.1 of the License, or
(at your option) any later version.

OpenOCPP is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OpenOCPP. If not, see <http://www.gnu.org/licenses/>.
*/

/* Generated by json2cpp */

#include "ChargePointHandler20.h"
#include "ICentralSystemConfig20.h"
#include "IChargePointRequestHandler20.h"
#include "IRpc.h"
#include "MessageDispatcher.h"

using namespace ocpp::messages;
using namespace ocpp::messages::ocpp20;
using namespace ocpp::types;
using namespace ocpp::types::ocpp20;

namespace ocpp
{
namespace centralsystem
{
namespace ocpp20
{

/** @brief Constructor */
ChargePointHandler20::ChargePointHandler20(const std::string&                                 identifier,
                                           const ocpp::messages::ocpp20::MessagesConverter20& messages_converter,
                                           ocpp::messages::MessageDispatcher&                 msg_dispatcher,
                                           const ocpp::config::ICentralSystemConfig20&        stack_config)
    : GenericMessageHandler<BootNotification20Req, BootNotification20Conf>(BOOTNOTIFICATION20_ACTION, messages_converter),
      GenericMessageHandler<Authorize20Req, Authorize20Conf>(AUTHORIZE20_ACTION, messages_converter),
      GenericMessageHandler<ClearedChargingLimit20Req, ClearedChargingLimit20Conf>(CLEAREDCHARGINGLIMIT20_ACTION, messages_converter),
      GenericMessageHandler<CostUpdated20Req, CostUpdated20Conf>(COSTUPDATED20_ACTION, messages_converter),
      GenericMessageHandler<DataTransfer20Req, DataTransfer20Conf>(DATATRANSFER20_ACTION, messages_converter),
      GenericMessageHandler<FirmwareStatusNotification20Req, FirmwareStatusNotification20Conf>(FIRMWARESTATUSNOTIFICATION20_ACTION,
                                                                                               messages_converter),
      GenericMessageHandler<Heartbeat20Req, Heartbeat20Conf>(HEARTBEAT20_ACTION, messages_converter),
      GenericMessageHandler<LogStatusNotification20Req, LogStatusNotification20Conf>(LOGSTATUSNOTIFICATION20_ACTION, messages_converter),
      GenericMessageHandler<MeterValues20Req, MeterValues20Conf>(METERVALUES20_ACTION, messages_converter),
      GenericMessageHandler<NotifyChargingLimit20Req, NotifyChargingLimit20Conf>(NOTIFYCHARGINGLIMIT20_ACTION, messages_converter),
      GenericMessageHandler<NotifyCustomerInformation20Req, NotifyCustomerInformation20Conf>(NOTIFYCUSTOMERINFORMATION20_ACTION,
                                                                                             messages_converter),
      GenericMessageHandler<NotifyDisplayMessages20Req, NotifyDisplayMessages20Conf>(NOTIFYDISPLAYMESSAGES20_ACTION, messages_converter),
      GenericMessageHandler<NotifyEVChargingNeeds20Req, NotifyEVChargingNeeds20Conf>(NOTIFYEVCHARGINGNEEDS20_ACTION, messages_converter),
      GenericMessageHandler<NotifyEVChargingSchedule20Req, NotifyEVChargingSchedule20Conf>(NOTIFYEVCHARGINGSCHEDULE20_ACTION,
                                                                                           messages_converter),
      GenericMessageHandler<NotifyEvent20Req, NotifyEvent20Conf>(NOTIFYEVENT20_ACTION, messages_converter),
      GenericMessageHandler<NotifyMonitoringReport20Req, NotifyMonitoringReport20Conf>(NOTIFYMONITORINGREPORT20_ACTION, messages_converter),
      GenericMessageHandler<NotifyReport20Req, NotifyReport20Conf>(NOTIFYREPORT20_ACTION, messages_converter),
      GenericMessageHandler<PublishFirmwareStatusNotification20Req, PublishFirmwareStatusNotification20Conf>(
          PUBLISHFIRMWARESTATUSNOTIFICATION20_ACTION, messages_converter),
      GenericMessageHandler<ReportChargingProfiles20Req, ReportChargingProfiles20Conf>(REPORTCHARGINGPROFILES20_ACTION, messages_converter),
      GenericMessageHandler<ReservationStatusUpdate20Req, ReservationStatusUpdate20Conf>(RESERVATIONSTATUSUPDATE20_ACTION,
                                                                                         messages_converter),
      GenericMessageHandler<SecurityEventNotification20Req, SecurityEventNotification20Conf>(SECURITYEVENTNOTIFICATION20_ACTION,
                                                                                             messages_converter),
      GenericMessageHandler<SignCertificate20Req, SignCertificate20Conf>(SIGNCERTIFICATE20_ACTION, messages_converter),
      GenericMessageHandler<StatusNotification20Req, StatusNotification20Conf>(STATUSNOTIFICATION20_ACTION, messages_converter),
      GenericMessageHandler<TransactionEvent20Req, TransactionEvent20Conf>(TRANSACTIONEVENT20_ACTION, messages_converter),

      m_identifier(identifier),
      m_stack_config(stack_config),
      m_messages_converter(messages_converter),
      m_handler(nullptr)
{
    msg_dispatcher.registerHandler(BOOTNOTIFICATION20_ACTION,
                                   *dynamic_cast<GenericMessageHandler<BootNotification20Req, BootNotification20Conf>*>(this));
    msg_dispatcher.registerHandler(AUTHORIZE20_ACTION, *dynamic_cast<GenericMessageHandler<Authorize20Req, Authorize20Conf>*>(this));
    msg_dispatcher.registerHandler(CLEAREDCHARGINGLIMIT20_ACTION,
                                   *dynamic_cast<GenericMessageHandler<ClearedChargingLimit20Req, ClearedChargingLimit20Conf>*>(this));
    msg_dispatcher.registerHandler(COSTUPDATED20_ACTION, *dynamic_cast<GenericMessageHandler<CostUpdated20Req, CostUpdated20Conf>*>(this));
    msg_dispatcher.registerHandler(DATATRANSFER20_ACTION,
                                   *dynamic_cast<GenericMessageHandler<DataTransfer20Req, DataTransfer20Conf>*>(this));
    msg_dispatcher.registerHandler(
        FIRMWARESTATUSNOTIFICATION20_ACTION,
        *dynamic_cast<GenericMessageHandler<FirmwareStatusNotification20Req, FirmwareStatusNotification20Conf>*>(this));
    msg_dispatcher.registerHandler(HEARTBEAT20_ACTION, *dynamic_cast<GenericMessageHandler<Heartbeat20Req, Heartbeat20Conf>*>(this));
    msg_dispatcher.registerHandler(LOGSTATUSNOTIFICATION20_ACTION,
                                   *dynamic_cast<GenericMessageHandler<LogStatusNotification20Req, LogStatusNotification20Conf>*>(this));
    msg_dispatcher.registerHandler(METERVALUES20_ACTION, *dynamic_cast<GenericMessageHandler<MeterValues20Req, MeterValues20Conf>*>(this));
    msg_dispatcher.registerHandler(NOTIFYCHARGINGLIMIT20_ACTION,
                                   *dynamic_cast<GenericMessageHandler<NotifyChargingLimit20Req, NotifyChargingLimit20Conf>*>(this));
    msg_dispatcher.registerHandler(
        NOTIFYCUSTOMERINFORMATION20_ACTION,
        *dynamic_cast<GenericMessageHandler<NotifyCustomerInformation20Req, NotifyCustomerInformation20Conf>*>(this));
    msg_dispatcher.registerHandler(NOTIFYDISPLAYMESSAGES20_ACTION,
                                   *dynamic_cast<GenericMessageHandler<NotifyDisplayMessages20Req, NotifyDisplayMessages20Conf>*>(this));
    msg_dispatcher.registerHandler(NOTIFYEVCHARGINGNEEDS20_ACTION,
                                   *dynamic_cast<GenericMessageHandler<NotifyEVChargingNeeds20Req, NotifyEVChargingNeeds20Conf>*>(this));
    msg_dispatcher.registerHandler(
        NOTIFYEVCHARGINGSCHEDULE20_ACTION,
        *dynamic_cast<GenericMessageHandler<NotifyEVChargingSchedule20Req, NotifyEVChargingSchedule20Conf>*>(this));
    msg_dispatcher.registerHandler(NOTIFYEVENT20_ACTION, *dynamic_cast<GenericMessageHandler<NotifyEvent20Req, NotifyEvent20Conf>*>(this));
    msg_dispatcher.registerHandler(NOTIFYMONITORINGREPORT20_ACTION,
                                   *dynamic_cast<GenericMessageHandler<NotifyMonitoringReport20Req, NotifyMonitoringReport20Conf>*>(this));
    msg_dispatcher.registerHandler(NOTIFYREPORT20_ACTION,
                                   *dynamic_cast<GenericMessageHandler<NotifyReport20Req, NotifyReport20Conf>*>(this));
    msg_dispatcher.registerHandler(
        PUBLISHFIRMWARESTATUSNOTIFICATION20_ACTION,
        *dynamic_cast<GenericMessageHandler<PublishFirmwareStatusNotification20Req, PublishFirmwareStatusNotification20Conf>*>(this));
    msg_dispatcher.registerHandler(REPORTCHARGINGPROFILES20_ACTION,
                                   *dynamic_cast<GenericMessageHandler<ReportChargingProfiles20Req, ReportChargingProfiles20Conf>*>(this));
    msg_dispatcher.registerHandler(
        RESERVATIONSTATUSUPDATE20_ACTION,
        *dynamic_cast<GenericMessageHandler<ReservationStatusUpdate20Req, ReservationStatusUpdate20Conf>*>(this));
    msg_dispatcher.registerHandler(
        SECURITYEVENTNOTIFICATION20_ACTION,
        *dynamic_cast<GenericMessageHandler<SecurityEventNotification20Req, SecurityEventNotification20Conf>*>(this));
    msg_dispatcher.registerHandler(SIGNCERTIFICATE20_ACTION,
                                   *dynamic_cast<GenericMessageHandler<SignCertificate20Req, SignCertificate20Conf>*>(this));
    msg_dispatcher.registerHandler(STATUSNOTIFICATION20_ACTION,
                                   *dynamic_cast<GenericMessageHandler<StatusNotification20Req, StatusNotification20Conf>*>(this));
    msg_dispatcher.registerHandler(TRANSACTIONEVENT20_ACTION,
                                   *dynamic_cast<GenericMessageHandler<TransactionEvent20Req, TransactionEvent20Conf>*>(this));
}
/** @brief Destructor */
ChargePointHandler20::~ChargePointHandler20() { }

// OCPP handlers
/** @copydoc bool GenericMessageHandler<RequestType, ResponseType>::handleMessage(const RequestType& request,
     *                                                                                ResponseType& response,
     *                                                                                std::string& error_code,
     *                                                                                std::string& error_message)
     */
bool ChargePointHandler20::handleMessage(const ocpp::messages::ocpp20::BootNotification20Req& request,
                                         ocpp::messages::ocpp20::BootNotification20Conf&      response,
                                         std::string&                                         error_code,
                                         std::string&                                         error_message)
{
    bool ret = false;

    LOG_INFO << "[" << m_identifier << "] - BootNotification20 requested";

    // Notify request
    if (m_handler)
    {
        ret = m_handler->onBootNotification20(request, response, error_code, error_message);

        LOG_INFO << "[" << m_identifier << "] - BootNotification20 handled";
    }
    else
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_INTERNAL;
    }

    return ret;
}
/** @copydoc bool GenericMessageHandler<RequestType, ResponseType>::handleMessage(const RequestType& request,
     *                                                                                ResponseType& response,
     *                                                                                std::string& error_code,
     *                                                                                std::string& error_message)
     */
bool ChargePointHandler20::handleMessage(const ocpp::messages::ocpp20::Authorize20Req& request,
                                         ocpp::messages::ocpp20::Authorize20Conf&      response,
                                         std::string&                                  error_code,
                                         std::string&                                  error_message)
{
    bool ret = false;

    LOG_INFO << "[" << m_identifier << "] - Authorize20 requested";

    // Notify request
    if (m_handler)
    {
        ret = m_handler->onAuthorize20(request, response, error_code, error_message);

        LOG_INFO << "[" << m_identifier << "] - Authorize20 handled";
    }
    else
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_INTERNAL;
    }

    return ret;
}
/** @copydoc bool GenericMessageHandler<RequestType, ResponseType>::handleMessage(const RequestType& request,
     *                                                                                ResponseType& response,
     *                                                                                std::string& error_code,
     *                                                                                std::string& error_message)
     */
bool ChargePointHandler20::handleMessage(const ocpp::messages::ocpp20::ClearedChargingLimit20Req& request,
                                         ocpp::messages::ocpp20::ClearedChargingLimit20Conf&      response,
                                         std::string&                                             error_code,
                                         std::string&                                             error_message)
{
    bool ret = false;

    LOG_INFO << "[" << m_identifier << "] - ClearedChargingLimit20 requested";

    // Notify request
    if (m_handler)
    {
        ret = m_handler->onClearedChargingLimit20(request, response, error_code, error_message);

        LOG_INFO << "[" << m_identifier << "] - ClearedChargingLimit20 handled";
    }
    else
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_INTERNAL;
    }

    return ret;
}
/** @copydoc bool GenericMessageHandler<RequestType, ResponseType>::handleMessage(const RequestType& request,
     *                                                                                ResponseType& response,
     *                                                                                std::string& error_code,
     *                                                                                std::string& error_message)
     */
bool ChargePointHandler20::handleMessage(const ocpp::messages::ocpp20::CostUpdated20Req& request,
                                         ocpp::messages::ocpp20::CostUpdated20Conf&      response,
                                         std::string&                                    error_code,
                                         std::string&                                    error_message)
{
    bool ret = false;

    LOG_INFO << "[" << m_identifier << "] - CostUpdated20 requested";

    // Notify request
    if (m_handler)
    {
        ret = m_handler->onCostUpdated20(request, response, error_code, error_message);

        LOG_INFO << "[" << m_identifier << "] - CostUpdated20 handled";
    }
    else
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_INTERNAL;
    }

    return ret;
}
/** @copydoc bool GenericMessageHandler<RequestType, ResponseType>::handleMessage(const RequestType& request,
     *                                                                                ResponseType& response,
     *                                                                                std::string& error_code,
     *                                                                                std::string& error_message)
     */
bool ChargePointHandler20::handleMessage(const ocpp::messages::ocpp20::DataTransfer20Req& request,
                                         ocpp::messages::ocpp20::DataTransfer20Conf&      response,
                                         std::string&                                     error_code,
                                         std::string&                                     error_message)
{
    bool ret = false;

    LOG_INFO << "[" << m_identifier << "] - DataTransfer20 requested";

    // Notify request
    if (m_handler)
    {
        ret = m_handler->onDataTransfer20(request, response, error_code, error_message);

        LOG_INFO << "[" << m_identifier << "] - DataTransfer20 handled";
    }
    else
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_INTERNAL;
    }

    return ret;
}
/** @copydoc bool GenericMessageHandler<RequestType, ResponseType>::handleMessage(const RequestType& request,
     *                                                                                ResponseType& response,
     *                                                                                std::string& error_code,
     *                                                                                std::string& error_message)
     */
bool ChargePointHandler20::handleMessage(const ocpp::messages::ocpp20::FirmwareStatusNotification20Req& request,
                                         ocpp::messages::ocpp20::FirmwareStatusNotification20Conf&      response,
                                         std::string&                                                   error_code,
                                         std::string&                                                   error_message)
{
    bool ret = false;

    LOG_INFO << "[" << m_identifier << "] - FirmwareStatusNotification20 requested";

    // Notify request
    if (m_handler)
    {
        ret = m_handler->onFirmwareStatusNotification20(request, response, error_code, error_message);

        LOG_INFO << "[" << m_identifier << "] - FirmwareStatusNotification20 handled";
    }
    else
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_INTERNAL;
    }

    return ret;
}
/** @copydoc bool GenericMessageHandler<RequestType, ResponseType>::handleMessage(const RequestType& request,
     *                                                                                ResponseType& response,
     *                                                                                std::string& error_code,
     *                                                                                std::string& error_message)
     */
bool ChargePointHandler20::handleMessage(const ocpp::messages::ocpp20::Heartbeat20Req& request,
                                         ocpp::messages::ocpp20::Heartbeat20Conf&      response,
                                         std::string&                                  error_code,
                                         std::string&                                  error_message)
{
    bool ret = false;

    LOG_INFO << "[" << m_identifier << "] - Heartbeat20 requested";

    // Notify request
    if (m_handler)
    {
        ret = m_handler->onHeartbeat20(request, response, error_code, error_message);

        LOG_INFO << "[" << m_identifier << "] - Heartbeat20 handled";
    }
    else
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_INTERNAL;
    }

    return ret;
}
/** @copydoc bool GenericMessageHandler<RequestType, ResponseType>::handleMessage(const RequestType& request,
     *                                                                                ResponseType& response,
     *                                                                                std::string& error_code,
     *                                                                                std::string& error_message)
     */
bool ChargePointHandler20::handleMessage(const ocpp::messages::ocpp20::LogStatusNotification20Req& request,
                                         ocpp::messages::ocpp20::LogStatusNotification20Conf&      response,
                                         std::string&                                              error_code,
                                         std::string&                                              error_message)
{
    bool ret = false;

    LOG_INFO << "[" << m_identifier << "] - LogStatusNotification20 requested";

    // Notify request
    if (m_handler)
    {
        ret = m_handler->onLogStatusNotification20(request, response, error_code, error_message);

        LOG_INFO << "[" << m_identifier << "] - LogStatusNotification20 handled";
    }
    else
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_INTERNAL;
    }

    return ret;
}
/** @copydoc bool GenericMessageHandler<RequestType, ResponseType>::handleMessage(const RequestType& request,
     *                                                                                ResponseType& response,
     *                                                                                std::string& error_code,
     *                                                                                std::string& error_message)
     */
bool ChargePointHandler20::handleMessage(const ocpp::messages::ocpp20::MeterValues20Req& request,
                                         ocpp::messages::ocpp20::MeterValues20Conf&      response,
                                         std::string&                                    error_code,
                                         std::string&                                    error_message)
{
    bool ret = false;

    LOG_INFO << "[" << m_identifier << "] - MeterValues20 requested";

    // Notify request
    if (m_handler)
    {
        ret = m_handler->onMeterValues20(request, response, error_code, error_message);

        LOG_INFO << "[" << m_identifier << "] - MeterValues20 handled";
    }
    else
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_INTERNAL;
    }

    return ret;
}
/** @copydoc bool GenericMessageHandler<RequestType, ResponseType>::handleMessage(const RequestType& request,
     *                                                                                ResponseType& response,
     *                                                                                std::string& error_code,
     *                                                                                std::string& error_message)
     */
bool ChargePointHandler20::handleMessage(const ocpp::messages::ocpp20::NotifyChargingLimit20Req& request,
                                         ocpp::messages::ocpp20::NotifyChargingLimit20Conf&      response,
                                         std::string&                                            error_code,
                                         std::string&                                            error_message)
{
    bool ret = false;

    LOG_INFO << "[" << m_identifier << "] - NotifyChargingLimit20 requested";

    // Notify request
    if (m_handler)
    {
        ret = m_handler->onNotifyChargingLimit20(request, response, error_code, error_message);

        LOG_INFO << "[" << m_identifier << "] - NotifyChargingLimit20 handled";
    }
    else
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_INTERNAL;
    }

    return ret;
}
/** @copydoc bool GenericMessageHandler<RequestType, ResponseType>::handleMessage(const RequestType& request,
     *                                                                                ResponseType& response,
     *                                                                                std::string& error_code,
     *                                                                                std::string& error_message)
     */
bool ChargePointHandler20::handleMessage(const ocpp::messages::ocpp20::NotifyCustomerInformation20Req& request,
                                         ocpp::messages::ocpp20::NotifyCustomerInformation20Conf&      response,
                                         std::string&                                                  error_code,
                                         std::string&                                                  error_message)
{
    bool ret = false;

    LOG_INFO << "[" << m_identifier << "] - NotifyCustomerInformation20 requested";

    // Notify request
    if (m_handler)
    {
        ret = m_handler->onNotifyCustomerInformation20(request, response, error_code, error_message);

        LOG_INFO << "[" << m_identifier << "] - NotifyCustomerInformation20 handled";
    }
    else
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_INTERNAL;
    }

    return ret;
}
/** @copydoc bool GenericMessageHandler<RequestType, ResponseType>::handleMessage(const RequestType& request,
     *                                                                                ResponseType& response,
     *                                                                                std::string& error_code,
     *                                                                                std::string& error_message)
     */
bool ChargePointHandler20::handleMessage(const ocpp::messages::ocpp20::NotifyDisplayMessages20Req& request,
                                         ocpp::messages::ocpp20::NotifyDisplayMessages20Conf&      response,
                                         std::string&                                              error_code,
                                         std::string&                                              error_message)
{
    bool ret = false;

    LOG_INFO << "[" << m_identifier << "] - NotifyDisplayMessages20 requested";

    // Notify request
    if (m_handler)
    {
        ret = m_handler->onNotifyDisplayMessages20(request, response, error_code, error_message);

        LOG_INFO << "[" << m_identifier << "] - NotifyDisplayMessages20 handled";
    }
    else
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_INTERNAL;
    }

    return ret;
}
/** @copydoc bool GenericMessageHandler<RequestType, ResponseType>::handleMessage(const RequestType& request,
     *                                                                                ResponseType& response,
     *                                                                                std::string& error_code,
     *                                                                                std::string& error_message)
     */
bool ChargePointHandler20::handleMessage(const ocpp::messages::ocpp20::NotifyEVChargingNeeds20Req& request,
                                         ocpp::messages::ocpp20::NotifyEVChargingNeeds20Conf&      response,
                                         std::string&                                              error_code,
                                         std::string&                                              error_message)
{
    bool ret = false;

    LOG_INFO << "[" << m_identifier << "] - NotifyEVChargingNeeds20 requested";

    // Notify request
    if (m_handler)
    {
        ret = m_handler->onNotifyEVChargingNeeds20(request, response, error_code, error_message);

        LOG_INFO << "[" << m_identifier << "] - NotifyEVChargingNeeds20 handled";
    }
    else
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_INTERNAL;
    }

    return ret;
}
/** @copydoc bool GenericMessageHandler<RequestType, ResponseType>::handleMessage(const RequestType& request,
     *                                                                                ResponseType& response,
     *                                                                                std::string& error_code,
     *                                                                                std::string& error_message)
     */
bool ChargePointHandler20::handleMessage(const ocpp::messages::ocpp20::NotifyEVChargingSchedule20Req& request,
                                         ocpp::messages::ocpp20::NotifyEVChargingSchedule20Conf&      response,
                                         std::string&                                                 error_code,
                                         std::string&                                                 error_message)
{
    bool ret = false;

    LOG_INFO << "[" << m_identifier << "] - NotifyEVChargingSchedule20 requested";

    // Notify request
    if (m_handler)
    {
        ret = m_handler->onNotifyEVChargingSchedule20(request, response, error_code, error_message);

        LOG_INFO << "[" << m_identifier << "] - NotifyEVChargingSchedule20 handled";
    }
    else
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_INTERNAL;
    }

    return ret;
}
/** @copydoc bool GenericMessageHandler<RequestType, ResponseType>::handleMessage(const RequestType& request,
     *                                                                                ResponseType& response,
     *                                                                                std::string& error_code,
     *                                                                                std::string& error_message)
     */
bool ChargePointHandler20::handleMessage(const ocpp::messages::ocpp20::NotifyEvent20Req& request,
                                         ocpp::messages::ocpp20::NotifyEvent20Conf&      response,
                                         std::string&                                    error_code,
                                         std::string&                                    error_message)
{
    bool ret = false;

    LOG_INFO << "[" << m_identifier << "] - NotifyEvent20 requested";

    // Notify request
    if (m_handler)
    {
        ret = m_handler->onNotifyEvent20(request, response, error_code, error_message);

        LOG_INFO << "[" << m_identifier << "] - NotifyEvent20 handled";
    }
    else
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_INTERNAL;
    }

    return ret;
}
/** @copydoc bool GenericMessageHandler<RequestType, ResponseType>::handleMessage(const RequestType& request,
     *                                                                                ResponseType& response,
     *                                                                                std::string& error_code,
     *                                                                                std::string& error_message)
     */
bool ChargePointHandler20::handleMessage(const ocpp::messages::ocpp20::NotifyMonitoringReport20Req& request,
                                         ocpp::messages::ocpp20::NotifyMonitoringReport20Conf&      response,
                                         std::string&                                               error_code,
                                         std::string&                                               error_message)
{
    bool ret = false;

    LOG_INFO << "[" << m_identifier << "] - NotifyMonitoringReport20 requested";

    // Notify request
    if (m_handler)
    {
        ret = m_handler->onNotifyMonitoringReport20(request, response, error_code, error_message);

        LOG_INFO << "[" << m_identifier << "] - NotifyMonitoringReport20 handled";
    }
    else
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_INTERNAL;
    }

    return ret;
}
/** @copydoc bool GenericMessageHandler<RequestType, ResponseType>::handleMessage(const RequestType& request,
     *                                                                                ResponseType& response,
     *                                                                                std::string& error_code,
     *                                                                                std::string& error_message)
     */
bool ChargePointHandler20::handleMessage(const ocpp::messages::ocpp20::NotifyReport20Req& request,
                                         ocpp::messages::ocpp20::NotifyReport20Conf&      response,
                                         std::string&                                     error_code,
                                         std::string&                                     error_message)
{
    bool ret = false;

    LOG_INFO << "[" << m_identifier << "] - NotifyReport20 requested";

    // Notify request
    if (m_handler)
    {
        ret = m_handler->onNotifyReport20(request, response, error_code, error_message);

        LOG_INFO << "[" << m_identifier << "] - NotifyReport20 handled";
    }
    else
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_INTERNAL;
    }

    return ret;
}
/** @copydoc bool GenericMessageHandler<RequestType, ResponseType>::handleMessage(const RequestType& request,
     *                                                                                ResponseType& response,
     *                                                                                std::string& error_code,
     *                                                                                std::string& error_message)
     */
bool ChargePointHandler20::handleMessage(const ocpp::messages::ocpp20::PublishFirmwareStatusNotification20Req& request,
                                         ocpp::messages::ocpp20::PublishFirmwareStatusNotification20Conf&      response,
                                         std::string&                                                          error_code,
                                         std::string&                                                          error_message)
{
    bool ret = false;

    LOG_INFO << "[" << m_identifier << "] - PublishFirmwareStatusNotification20 requested";

    // Notify request
    if (m_handler)
    {
        ret = m_handler->onPublishFirmwareStatusNotification20(request, response, error_code, error_message);

        LOG_INFO << "[" << m_identifier << "] - PublishFirmwareStatusNotification20 handled";
    }
    else
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_INTERNAL;
    }

    return ret;
}
/** @copydoc bool GenericMessageHandler<RequestType, ResponseType>::handleMessage(const RequestType& request,
     *                                                                                ResponseType& response,
     *                                                                                std::string& error_code,
     *                                                                                std::string& error_message)
     */
bool ChargePointHandler20::handleMessage(const ocpp::messages::ocpp20::ReportChargingProfiles20Req& request,
                                         ocpp::messages::ocpp20::ReportChargingProfiles20Conf&      response,
                                         std::string&                                               error_code,
                                         std::string&                                               error_message)
{
    bool ret = false;

    LOG_INFO << "[" << m_identifier << "] - ReportChargingProfiles20 requested";

    // Notify request
    if (m_handler)
    {
        ret = m_handler->onReportChargingProfiles20(request, response, error_code, error_message);

        LOG_INFO << "[" << m_identifier << "] - ReportChargingProfiles20 handled";
    }
    else
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_INTERNAL;
    }

    return ret;
}
/** @copydoc bool GenericMessageHandler<RequestType, ResponseType>::handleMessage(const RequestType& request,
     *                                                                                ResponseType& response,
     *                                                                                std::string& error_code,
     *                                                                                std::string& error_message)
     */
bool ChargePointHandler20::handleMessage(const ocpp::messages::ocpp20::ReservationStatusUpdate20Req& request,
                                         ocpp::messages::ocpp20::ReservationStatusUpdate20Conf&      response,
                                         std::string&                                                error_code,
                                         std::string&                                                error_message)
{
    bool ret = false;

    LOG_INFO << "[" << m_identifier << "] - ReservationStatusUpdate20 requested";

    // Notify request
    if (m_handler)
    {
        ret = m_handler->onReservationStatusUpdate20(request, response, error_code, error_message);

        LOG_INFO << "[" << m_identifier << "] - ReservationStatusUpdate20 handled";
    }
    else
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_INTERNAL;
    }

    return ret;
}
/** @copydoc bool GenericMessageHandler<RequestType, ResponseType>::handleMessage(const RequestType& request,
     *                                                                                ResponseType& response,
     *                                                                                std::string& error_code,
     *                                                                                std::string& error_message)
     */
bool ChargePointHandler20::handleMessage(const ocpp::messages::ocpp20::SecurityEventNotification20Req& request,
                                         ocpp::messages::ocpp20::SecurityEventNotification20Conf&      response,
                                         std::string&                                                  error_code,
                                         std::string&                                                  error_message)
{
    bool ret = false;

    LOG_INFO << "[" << m_identifier << "] - SecurityEventNotification20 requested";

    // Notify request
    if (m_handler)
    {
        ret = m_handler->onSecurityEventNotification20(request, response, error_code, error_message);

        LOG_INFO << "[" << m_identifier << "] - SecurityEventNotification20 handled";
    }
    else
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_INTERNAL;
    }

    return ret;
}
/** @copydoc bool GenericMessageHandler<RequestType, ResponseType>::handleMessage(const RequestType& request,
     *                                                                                ResponseType& response,
     *                                                                                std::string& error_code,
     *                                                                                std::string& error_message)
     */
bool ChargePointHandler20::handleMessage(const ocpp::messages::ocpp20::SignCertificate20Req& request,
                                         ocpp::messages::ocpp20::SignCertificate20Conf&      response,
                                         std::string&                                        error_code,
                                         std::string&                                        error_message)
{
    bool ret = false;

    LOG_INFO << "[" << m_identifier << "] - SignCertificate20 requested";

    // Notify request
    if (m_handler)
    {
        ret = m_handler->onSignCertificate20(request, response, error_code, error_message);

        LOG_INFO << "[" << m_identifier << "] - SignCertificate20 handled";
    }
    else
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_INTERNAL;
    }

    return ret;
}
/** @copydoc bool GenericMessageHandler<RequestType, ResponseType>::handleMessage(const RequestType& request,
     *                                                                                ResponseType& response,
     *                                                                                std::string& error_code,
     *                                                                                std::string& error_message)
     */
bool ChargePointHandler20::handleMessage(const ocpp::messages::ocpp20::StatusNotification20Req& request,
                                         ocpp::messages::ocpp20::StatusNotification20Conf&      response,
                                         std::string&                                           error_code,
                                         std::string&                                           error_message)
{
    bool ret = false;

    LOG_INFO << "[" << m_identifier << "] - StatusNotification20 requested";

    // Notify request
    if (m_handler)
    {
        ret = m_handler->onStatusNotification20(request, response, error_code, error_message);

        LOG_INFO << "[" << m_identifier << "] - StatusNotification20 handled";
    }
    else
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_INTERNAL;
    }

    return ret;
}
/** @copydoc bool GenericMessageHandler<RequestType, ResponseType>::handleMessage(const RequestType& request,
     *                                                                                ResponseType& response,
     *                                                                                std::string& error_code,
     *                                                                                std::string& error_message)
     */
bool ChargePointHandler20::handleMessage(const ocpp::messages::ocpp20::TransactionEvent20Req& request,
                                         ocpp::messages::ocpp20::TransactionEvent20Conf&      response,
                                         std::string&                                         error_code,
                                         std::string&                                         error_message)
{
    bool ret = false;

    LOG_INFO << "[" << m_identifier << "] - TransactionEvent20 requested";

    // Notify request
    if (m_handler)
    {
        ret = m_handler->onTransactionEvent20(request, response, error_code, error_message);

        LOG_INFO << "[" << m_identifier << "] - TransactionEvent20 handled";
    }
    else
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_INTERNAL;
    }

    return ret;
}

} // namespace ocpp20
} // namespace centralsystem
} // namespace ocpp