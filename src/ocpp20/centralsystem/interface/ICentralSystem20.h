/*
Copyright (c) 2020 Cedric Jimenez
This file is part of OpenOCPP.

OpenOCPP is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 2.1 of the License, or
(at your option) any later version.

OpenOCPP is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OpenOCPP. If not, see <http://www.gnu.org/licenses/>.
*/

/* Generated by json2cpp */

#ifndef OPENOCPP_OCPP20_ICENTRALSYSTEM20_H
#define OPENOCPP_OCPP20_ICENTRALSYSTEM20_H

#include "CancelReservation20.h"
#include "CertificateSigned20.h"
#include "ChangeAvailability20.h"
#include "ClearCache20.h"
#include "ClearChargingProfile20.h"
#include "ClearDisplayMessage20.h"
#include "ClearVariableMonitoring20.h"
#include "CustomerInformation20.h"
#include "DataTransfer20.h"
#include "DeleteCertificate20.h"
#include "Get15118EVCertificate20.h"
#include "GetBaseReport20.h"
#include "GetCertificateStatus20.h"
#include "GetChargingProfiles20.h"
#include "GetCompositeSchedule20.h"
#include "GetDisplayMessages20.h"
#include "GetInstalledCertificateIds20.h"
#include "GetLocalListVersion20.h"
#include "GetLog20.h"
#include "GetMonitoringReport20.h"
#include "GetReport20.h"
#include "GetTransactionStatus20.h"
#include "GetVariables20.h"
#include "ICentralSystemConfig20.h"
#include "IChargePointRequestHandler20.h"
#include "InstallCertificate20.h"
#include "PublishFirmware20.h"
#include "RequestStartTransaction20.h"
#include "RequestStopTransaction20.h"
#include "ReserveNow20.h"
#include "Reset20.h"
#include "SendLocalList20.h"
#include "SetChargingProfile20.h"
#include "SetDisplayMessage20.h"
#include "SetMonitoringBase20.h"
#include "SetMonitoringLevel20.h"
#include "SetNetworkProfile20.h"
#include "SetVariableMonitoring20.h"
#include "SetVariables20.h"
#include "TriggerMessage20.h"
#include "UnlockConnector20.h"
#include "UnpublishFirmware20.h"
#include "UpdateFirmware20.h"

#include <memory>

namespace ocpp
{
namespace helpers
{
class ITimerPool;
class WorkerThreadPool;
} // namespace helpers
namespace database
{
class Database;
} // namespace database

namespace centralsystem
{
namespace ocpp20
{

class ICentralSystemEventsHandler20;

/** @brief Interface for central system implementations */
class ICentralSystem20
{
  public:
    /**
     * @brief Instanciate a central system
     * @param stack_config Stack configuration
     * @param event_handler Stack event handler
     */
    static std::unique_ptr<ICentralSystem20> create(const ocpp::config::ICentralSystemConfig20& stack_config,
                                                    ICentralSystemEventsHandler20&              events_handler);

    /**
     * @brief Instanciate a central system with the provided timer and worker pools
     *        To use when you have to instanciate multiple Central System / Charge Point
     *        => Allow to reduce thread and memory usage
     * @param stack_config Stack configuration
     * @param event_handler Stack event handler
     * @param timer_pool Timer pool
     * @param worker_pool Worker thread pool
     */
    static std::unique_ptr<ICentralSystem20> create(const ocpp::config::ICentralSystemConfig20&      stack_config,
                                                    ICentralSystemEventsHandler20&                   events_handler,
                                                    std::shared_ptr<ocpp::helpers::ITimerPool>       timer_pool,
                                                    std::shared_ptr<ocpp::helpers::WorkerThreadPool> worker_pool);

    /** @brief Destructor */
    virtual ~ICentralSystem20() { }

    /**
     * @brief Get the configuration associated to the central system
     * @return Configuration associated to the central system
     */
    virtual const ocpp::config::ICentralSystemConfig20& getConfig() = 0;

    /**
     * @brief Get the timer pool associated to the central system
     * @return Timer pool associated to the central system
     */
    virtual ocpp::helpers::ITimerPool& getTimerPool() = 0;

    /**
     * @brief Get the worker pool associated to the central system
     * @return Worker pool associated to the central system
     */
    virtual ocpp::helpers::WorkerThreadPool& getWorkerPool() = 0;

    /**
     * @brief Reset the central system's internal data (can be done only when the central system is stopped)
     * @return true if the data has been reset, false otherwise
     */
    virtual bool resetData() = 0;

    /**
     * @brief Start the central system
     * @return true if the central system has been started, false otherwise
     */
    virtual bool start() = 0;

    /**
     * @brief Stop the central system
     * @return true if the central system has been stopped, false otherwise
     */
    virtual bool stop() = 0;

    /** @brief Interface for charge point proxy implementations */
    class IChargePoint20
    {
      public:
        /** @brief Destructor */
        virtual ~IChargePoint20() { }

        /**
         * @brief Get the central system instance associated to the charge point
         * @return Central system instance associated to the charge point
         */
        virtual ICentralSystem20& centralSystem() = 0;

        /**
         * @brief Get the IP address of the charge point
         * @return IP address of the charge point
         */
        virtual const std::string& ipAddress() const = 0;

        /**
         * @brief Get the charge point identifier
         * @return charge point identifier
         */
        virtual const std::string& identifier() const = 0;

        /**
         * @brief Set the call request timeout
         * @param timeout New timeout value
         */
        virtual void setTimeout(std::chrono::milliseconds timeout) = 0;

        /** @brief Disconnect the charge point */
        virtual void disconnect() = 0;

        /** @brief Register the event handler */
        virtual void registerHandler(IChargePointRequestHandler20& handler) = 0;

        // OCPP operations
        /**
         * @brief Send a CancelReservation message to the charge point
         * @param request Request to send
         * @param response Received response
         * @param error Error (Empty if not a CallError)
         * @param message Error message (Empty if not a CallError)
         * @return true if the request has been sent and a response has been received, false otherwise
         */
        virtual bool call(const ocpp::messages::ocpp20::CancelReservationReq& request,
                          ocpp::messages::ocpp20::CancelReservationConf&      response,
                          std::string&                                        error,
                          std::string&                                        message) = 0;
        /**
         * @brief Send a CertificateSigned message to the charge point
         * @param request Request to send
         * @param response Received response
         * @param error Error (Empty if not a CallError)
         * @param message Error message (Empty if not a CallError)
         * @return true if the request has been sent and a response has been received, false otherwise
         */
        virtual bool call(const ocpp::messages::ocpp20::CertificateSignedReq& request,
                          ocpp::messages::ocpp20::CertificateSignedConf&      response,
                          std::string&                                        error,
                          std::string&                                        message) = 0;
        /**
         * @brief Send a ChangeAvailability message to the charge point
         * @param request Request to send
         * @param response Received response
         * @param error Error (Empty if not a CallError)
         * @param message Error message (Empty if not a CallError)
         * @return true if the request has been sent and a response has been received, false otherwise
         */
        virtual bool call(const ocpp::messages::ocpp20::ChangeAvailabilityReq& request,
                          ocpp::messages::ocpp20::ChangeAvailabilityConf&      response,
                          std::string&                                         error,
                          std::string&                                         message) = 0;
        /**
         * @brief Send a ClearCache message to the charge point
         * @param request Request to send
         * @param response Received response
         * @param error Error (Empty if not a CallError)
         * @param message Error message (Empty if not a CallError)
         * @return true if the request has been sent and a response has been received, false otherwise
         */
        virtual bool call(const ocpp::messages::ocpp20::ClearCacheReq& request,
                          ocpp::messages::ocpp20::ClearCacheConf&      response,
                          std::string&                                 error,
                          std::string&                                 message) = 0;
        /**
         * @brief Send a ClearChargingProfile message to the charge point
         * @param request Request to send
         * @param response Received response
         * @param error Error (Empty if not a CallError)
         * @param message Error message (Empty if not a CallError)
         * @return true if the request has been sent and a response has been received, false otherwise
         */
        virtual bool call(const ocpp::messages::ocpp20::ClearChargingProfileReq& request,
                          ocpp::messages::ocpp20::ClearChargingProfileConf&      response,
                          std::string&                                           error,
                          std::string&                                           message) = 0;
        /**
         * @brief Send a ClearDisplayMessage message to the charge point
         * @param request Request to send
         * @param response Received response
         * @param error Error (Empty if not a CallError)
         * @param message Error message (Empty if not a CallError)
         * @return true if the request has been sent and a response has been received, false otherwise
         */
        virtual bool call(const ocpp::messages::ocpp20::ClearDisplayMessageReq& request,
                          ocpp::messages::ocpp20::ClearDisplayMessageConf&      response,
                          std::string&                                          error,
                          std::string&                                          message) = 0;
        /**
         * @brief Send a ClearVariableMonitoring message to the charge point
         * @param request Request to send
         * @param response Received response
         * @param error Error (Empty if not a CallError)
         * @param message Error message (Empty if not a CallError)
         * @return true if the request has been sent and a response has been received, false otherwise
         */
        virtual bool call(const ocpp::messages::ocpp20::ClearVariableMonitoringReq& request,
                          ocpp::messages::ocpp20::ClearVariableMonitoringConf&      response,
                          std::string&                                              error,
                          std::string&                                              message) = 0;
        /**
         * @brief Send a CustomerInformation message to the charge point
         * @param request Request to send
         * @param response Received response
         * @param error Error (Empty if not a CallError)
         * @param message Error message (Empty if not a CallError)
         * @return true if the request has been sent and a response has been received, false otherwise
         */
        virtual bool call(const ocpp::messages::ocpp20::CustomerInformationReq& request,
                          ocpp::messages::ocpp20::CustomerInformationConf&      response,
                          std::string&                                          error,
                          std::string&                                          message) = 0;
        /**
         * @brief Send a DataTransfer message to the charge point
         * @param request Request to send
         * @param response Received response
         * @param error Error (Empty if not a CallError)
         * @param message Error message (Empty if not a CallError)
         * @return true if the request has been sent and a response has been received, false otherwise
         */
        virtual bool call(const ocpp::messages::ocpp20::DataTransferReq& request,
                          ocpp::messages::ocpp20::DataTransferConf&      response,
                          std::string&                                   error,
                          std::string&                                   message) = 0;
        /**
         * @brief Send a DeleteCertificate message to the charge point
         * @param request Request to send
         * @param response Received response
         * @param error Error (Empty if not a CallError)
         * @param message Error message (Empty if not a CallError)
         * @return true if the request has been sent and a response has been received, false otherwise
         */
        virtual bool call(const ocpp::messages::ocpp20::DeleteCertificateReq& request,
                          ocpp::messages::ocpp20::DeleteCertificateConf&      response,
                          std::string&                                        error,
                          std::string&                                        message) = 0;
        /**
         * @brief Send a Get15118EVCertificate message to the charge point
         * @param request Request to send
         * @param response Received response
         * @param error Error (Empty if not a CallError)
         * @param message Error message (Empty if not a CallError)
         * @return true if the request has been sent and a response has been received, false otherwise
         */
        virtual bool call(const ocpp::messages::ocpp20::Get15118EVCertificateReq& request,
                          ocpp::messages::ocpp20::Get15118EVCertificateConf&      response,
                          std::string&                                            error,
                          std::string&                                            message) = 0;
        /**
         * @brief Send a GetBaseReport message to the charge point
         * @param request Request to send
         * @param response Received response
         * @param error Error (Empty if not a CallError)
         * @param message Error message (Empty if not a CallError)
         * @return true if the request has been sent and a response has been received, false otherwise
         */
        virtual bool call(const ocpp::messages::ocpp20::GetBaseReportReq& request,
                          ocpp::messages::ocpp20::GetBaseReportConf&      response,
                          std::string&                                    error,
                          std::string&                                    message) = 0;
        /**
         * @brief Send a GetCertificateStatus message to the charge point
         * @param request Request to send
         * @param response Received response
         * @param error Error (Empty if not a CallError)
         * @param message Error message (Empty if not a CallError)
         * @return true if the request has been sent and a response has been received, false otherwise
         */
        virtual bool call(const ocpp::messages::ocpp20::GetCertificateStatusReq& request,
                          ocpp::messages::ocpp20::GetCertificateStatusConf&      response,
                          std::string&                                           error,
                          std::string&                                           message) = 0;
        /**
         * @brief Send a GetChargingProfiles message to the charge point
         * @param request Request to send
         * @param response Received response
         * @param error Error (Empty if not a CallError)
         * @param message Error message (Empty if not a CallError)
         * @return true if the request has been sent and a response has been received, false otherwise
         */
        virtual bool call(const ocpp::messages::ocpp20::GetChargingProfilesReq& request,
                          ocpp::messages::ocpp20::GetChargingProfilesConf&      response,
                          std::string&                                          error,
                          std::string&                                          message) = 0;
        /**
         * @brief Send a GetCompositeSchedule message to the charge point
         * @param request Request to send
         * @param response Received response
         * @param error Error (Empty if not a CallError)
         * @param message Error message (Empty if not a CallError)
         * @return true if the request has been sent and a response has been received, false otherwise
         */
        virtual bool call(const ocpp::messages::ocpp20::GetCompositeScheduleReq& request,
                          ocpp::messages::ocpp20::GetCompositeScheduleConf&      response,
                          std::string&                                           error,
                          std::string&                                           message) = 0;
        /**
         * @brief Send a GetDisplayMessages message to the charge point
         * @param request Request to send
         * @param response Received response
         * @param error Error (Empty if not a CallError)
         * @param message Error message (Empty if not a CallError)
         * @return true if the request has been sent and a response has been received, false otherwise
         */
        virtual bool call(const ocpp::messages::ocpp20::GetDisplayMessagesReq& request,
                          ocpp::messages::ocpp20::GetDisplayMessagesConf&      response,
                          std::string&                                         error,
                          std::string&                                         message) = 0;
        /**
         * @brief Send a GetInstalledCertificateIds message to the charge point
         * @param request Request to send
         * @param response Received response
         * @param error Error (Empty if not a CallError)
         * @param message Error message (Empty if not a CallError)
         * @return true if the request has been sent and a response has been received, false otherwise
         */
        virtual bool call(const ocpp::messages::ocpp20::GetInstalledCertificateIdsReq& request,
                          ocpp::messages::ocpp20::GetInstalledCertificateIdsConf&      response,
                          std::string&                                                 error,
                          std::string&                                                 message) = 0;
        /**
         * @brief Send a GetLocalListVersion message to the charge point
         * @param request Request to send
         * @param response Received response
         * @param error Error (Empty if not a CallError)
         * @param message Error message (Empty if not a CallError)
         * @return true if the request has been sent and a response has been received, false otherwise
         */
        virtual bool call(const ocpp::messages::ocpp20::GetLocalListVersionReq& request,
                          ocpp::messages::ocpp20::GetLocalListVersionConf&      response,
                          std::string&                                          error,
                          std::string&                                          message) = 0;
        /**
         * @brief Send a GetLog message to the charge point
         * @param request Request to send
         * @param response Received response
         * @param error Error (Empty if not a CallError)
         * @param message Error message (Empty if not a CallError)
         * @return true if the request has been sent and a response has been received, false otherwise
         */
        virtual bool call(const ocpp::messages::ocpp20::GetLogReq& request,
                          ocpp::messages::ocpp20::GetLogConf&      response,
                          std::string&                             error,
                          std::string&                             message) = 0;
        /**
         * @brief Send a GetMonitoringReport message to the charge point
         * @param request Request to send
         * @param response Received response
         * @param error Error (Empty if not a CallError)
         * @param message Error message (Empty if not a CallError)
         * @return true if the request has been sent and a response has been received, false otherwise
         */
        virtual bool call(const ocpp::messages::ocpp20::GetMonitoringReportReq& request,
                          ocpp::messages::ocpp20::GetMonitoringReportConf&      response,
                          std::string&                                          error,
                          std::string&                                          message) = 0;
        /**
         * @brief Send a GetReport message to the charge point
         * @param request Request to send
         * @param response Received response
         * @param error Error (Empty if not a CallError)
         * @param message Error message (Empty if not a CallError)
         * @return true if the request has been sent and a response has been received, false otherwise
         */
        virtual bool call(const ocpp::messages::ocpp20::GetReportReq& request,
                          ocpp::messages::ocpp20::GetReportConf&      response,
                          std::string&                                error,
                          std::string&                                message) = 0;
        /**
         * @brief Send a GetTransactionStatus message to the charge point
         * @param request Request to send
         * @param response Received response
         * @param error Error (Empty if not a CallError)
         * @param message Error message (Empty if not a CallError)
         * @return true if the request has been sent and a response has been received, false otherwise
         */
        virtual bool call(const ocpp::messages::ocpp20::GetTransactionStatusReq& request,
                          ocpp::messages::ocpp20::GetTransactionStatusConf&      response,
                          std::string&                                           error,
                          std::string&                                           message) = 0;
        /**
         * @brief Send a GetVariables message to the charge point
         * @param request Request to send
         * @param response Received response
         * @param error Error (Empty if not a CallError)
         * @param message Error message (Empty if not a CallError)
         * @return true if the request has been sent and a response has been received, false otherwise
         */
        virtual bool call(const ocpp::messages::ocpp20::GetVariablesReq& request,
                          ocpp::messages::ocpp20::GetVariablesConf&      response,
                          std::string&                                   error,
                          std::string&                                   message) = 0;
        /**
         * @brief Send a InstallCertificate message to the charge point
         * @param request Request to send
         * @param response Received response
         * @param error Error (Empty if not a CallError)
         * @param message Error message (Empty if not a CallError)
         * @return true if the request has been sent and a response has been received, false otherwise
         */
        virtual bool call(const ocpp::messages::ocpp20::InstallCertificateReq& request,
                          ocpp::messages::ocpp20::InstallCertificateConf&      response,
                          std::string&                                         error,
                          std::string&                                         message) = 0;
        /**
         * @brief Send a PublishFirmware message to the charge point
         * @param request Request to send
         * @param response Received response
         * @param error Error (Empty if not a CallError)
         * @param message Error message (Empty if not a CallError)
         * @return true if the request has been sent and a response has been received, false otherwise
         */
        virtual bool call(const ocpp::messages::ocpp20::PublishFirmwareReq& request,
                          ocpp::messages::ocpp20::PublishFirmwareConf&      response,
                          std::string&                                      error,
                          std::string&                                      message) = 0;
        /**
         * @brief Send a RequestStartTransaction message to the charge point
         * @param request Request to send
         * @param response Received response
         * @param error Error (Empty if not a CallError)
         * @param message Error message (Empty if not a CallError)
         * @return true if the request has been sent and a response has been received, false otherwise
         */
        virtual bool call(const ocpp::messages::ocpp20::RequestStartTransactionReq& request,
                          ocpp::messages::ocpp20::RequestStartTransactionConf&      response,
                          std::string&                                              error,
                          std::string&                                              message) = 0;
        /**
         * @brief Send a RequestStopTransaction message to the charge point
         * @param request Request to send
         * @param response Received response
         * @param error Error (Empty if not a CallError)
         * @param message Error message (Empty if not a CallError)
         * @return true if the request has been sent and a response has been received, false otherwise
         */
        virtual bool call(const ocpp::messages::ocpp20::RequestStopTransactionReq& request,
                          ocpp::messages::ocpp20::RequestStopTransactionConf&      response,
                          std::string&                                             error,
                          std::string&                                             message) = 0;
        /**
         * @brief Send a ReserveNow message to the charge point
         * @param request Request to send
         * @param response Received response
         * @param error Error (Empty if not a CallError)
         * @param message Error message (Empty if not a CallError)
         * @return true if the request has been sent and a response has been received, false otherwise
         */
        virtual bool call(const ocpp::messages::ocpp20::ReserveNowReq& request,
                          ocpp::messages::ocpp20::ReserveNowConf&      response,
                          std::string&                                 error,
                          std::string&                                 message) = 0;
        /**
         * @brief Send a Reset message to the charge point
         * @param request Request to send
         * @param response Received response
         * @param error Error (Empty if not a CallError)
         * @param message Error message (Empty if not a CallError)
         * @return true if the request has been sent and a response has been received, false otherwise
         */
        virtual bool call(const ocpp::messages::ocpp20::ResetReq& request,
                          ocpp::messages::ocpp20::ResetConf&      response,
                          std::string&                            error,
                          std::string&                            message) = 0;
        /**
         * @brief Send a SendLocalList message to the charge point
         * @param request Request to send
         * @param response Received response
         * @param error Error (Empty if not a CallError)
         * @param message Error message (Empty if not a CallError)
         * @return true if the request has been sent and a response has been received, false otherwise
         */
        virtual bool call(const ocpp::messages::ocpp20::SendLocalListReq& request,
                          ocpp::messages::ocpp20::SendLocalListConf&      response,
                          std::string&                                    error,
                          std::string&                                    message) = 0;
        /**
         * @brief Send a SetChargingProfile message to the charge point
         * @param request Request to send
         * @param response Received response
         * @param error Error (Empty if not a CallError)
         * @param message Error message (Empty if not a CallError)
         * @return true if the request has been sent and a response has been received, false otherwise
         */
        virtual bool call(const ocpp::messages::ocpp20::SetChargingProfileReq& request,
                          ocpp::messages::ocpp20::SetChargingProfileConf&      response,
                          std::string&                                         error,
                          std::string&                                         message) = 0;
        /**
         * @brief Send a SetDisplayMessage message to the charge point
         * @param request Request to send
         * @param response Received response
         * @param error Error (Empty if not a CallError)
         * @param message Error message (Empty if not a CallError)
         * @return true if the request has been sent and a response has been received, false otherwise
         */
        virtual bool call(const ocpp::messages::ocpp20::SetDisplayMessageReq& request,
                          ocpp::messages::ocpp20::SetDisplayMessageConf&      response,
                          std::string&                                        error,
                          std::string&                                        message) = 0;
        /**
         * @brief Send a SetMonitoringBase message to the charge point
         * @param request Request to send
         * @param response Received response
         * @param error Error (Empty if not a CallError)
         * @param message Error message (Empty if not a CallError)
         * @return true if the request has been sent and a response has been received, false otherwise
         */
        virtual bool call(const ocpp::messages::ocpp20::SetMonitoringBaseReq& request,
                          ocpp::messages::ocpp20::SetMonitoringBaseConf&      response,
                          std::string&                                        error,
                          std::string&                                        message) = 0;
        /**
         * @brief Send a SetMonitoringLevel message to the charge point
         * @param request Request to send
         * @param response Received response
         * @param error Error (Empty if not a CallError)
         * @param message Error message (Empty if not a CallError)
         * @return true if the request has been sent and a response has been received, false otherwise
         */
        virtual bool call(const ocpp::messages::ocpp20::SetMonitoringLevelReq& request,
                          ocpp::messages::ocpp20::SetMonitoringLevelConf&      response,
                          std::string&                                         error,
                          std::string&                                         message) = 0;
        /**
         * @brief Send a SetNetworkProfile message to the charge point
         * @param request Request to send
         * @param response Received response
         * @param error Error (Empty if not a CallError)
         * @param message Error message (Empty if not a CallError)
         * @return true if the request has been sent and a response has been received, false otherwise
         */
        virtual bool call(const ocpp::messages::ocpp20::SetNetworkProfileReq& request,
                          ocpp::messages::ocpp20::SetNetworkProfileConf&      response,
                          std::string&                                        error,
                          std::string&                                        message) = 0;
        /**
         * @brief Send a SetVariableMonitoring message to the charge point
         * @param request Request to send
         * @param response Received response
         * @param error Error (Empty if not a CallError)
         * @param message Error message (Empty if not a CallError)
         * @return true if the request has been sent and a response has been received, false otherwise
         */
        virtual bool call(const ocpp::messages::ocpp20::SetVariableMonitoringReq& request,
                          ocpp::messages::ocpp20::SetVariableMonitoringConf&      response,
                          std::string&                                            error,
                          std::string&                                            message) = 0;
        /**
         * @brief Send a SetVariables message to the charge point
         * @param request Request to send
         * @param response Received response
         * @param error Error (Empty if not a CallError)
         * @param message Error message (Empty if not a CallError)
         * @return true if the request has been sent and a response has been received, false otherwise
         */
        virtual bool call(const ocpp::messages::ocpp20::SetVariablesReq& request,
                          ocpp::messages::ocpp20::SetVariablesConf&      response,
                          std::string&                                   error,
                          std::string&                                   message) = 0;
        /**
         * @brief Send a TriggerMessage message to the charge point
         * @param request Request to send
         * @param response Received response
         * @param error Error (Empty if not a CallError)
         * @param message Error message (Empty if not a CallError)
         * @return true if the request has been sent and a response has been received, false otherwise
         */
        virtual bool call(const ocpp::messages::ocpp20::TriggerMessageReq& request,
                          ocpp::messages::ocpp20::TriggerMessageConf&      response,
                          std::string&                                     error,
                          std::string&                                     message) = 0;
        /**
         * @brief Send a UnlockConnector message to the charge point
         * @param request Request to send
         * @param response Received response
         * @param error Error (Empty if not a CallError)
         * @param message Error message (Empty if not a CallError)
         * @return true if the request has been sent and a response has been received, false otherwise
         */
        virtual bool call(const ocpp::messages::ocpp20::UnlockConnectorReq& request,
                          ocpp::messages::ocpp20::UnlockConnectorConf&      response,
                          std::string&                                      error,
                          std::string&                                      message) = 0;
        /**
         * @brief Send a UnpublishFirmware message to the charge point
         * @param request Request to send
         * @param response Received response
         * @param error Error (Empty if not a CallError)
         * @param message Error message (Empty if not a CallError)
         * @return true if the request has been sent and a response has been received, false otherwise
         */
        virtual bool call(const ocpp::messages::ocpp20::UnpublishFirmwareReq& request,
                          ocpp::messages::ocpp20::UnpublishFirmwareConf&      response,
                          std::string&                                        error,
                          std::string&                                        message) = 0;
        /**
         * @brief Send a UpdateFirmware message to the charge point
         * @param request Request to send
         * @param response Received response
         * @param error Error (Empty if not a CallError)
         * @param message Error message (Empty if not a CallError)
         * @return true if the request has been sent and a response has been received, false otherwise
         */
        virtual bool call(const ocpp::messages::ocpp20::UpdateFirmwareReq& request,
                          ocpp::messages::ocpp20::UpdateFirmwareConf&      response,
                          std::string&                                     error,
                          std::string&                                     message) = 0;
    };
};

} // namespace ocpp20
} // namespace centralsystem
} // namespace ocpp

#endif // OPENOCPP_OCPP20_ICENTRALSYSTEM20_H