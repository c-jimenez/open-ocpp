/*
Copyright (c) 2020 Cedric Jimenez
This file is part of OpenOCPP.

OpenOCPP is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 2.1 of the License, or
(at your option) any later version.

OpenOCPP is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OpenOCPP. If not, see <http://www.gnu.org/licenses/>.
*/

/* Generated by json2cpp */

#ifndef OPENOCPP_OCPP20_ICHARGEPOINTREQUESTHANDLER20_H
#define OPENOCPP_OCPP20_ICHARGEPOINTREQUESTHANDLER20_H
#include "Authorize.h"
#include "BootNotification.h"
#include "ClearedChargingLimit.h"
#include "CostUpdated.h"
#include "DataTransfer.h"
#include "FirmwareStatusNotification.h"
#include "Heartbeat.h"
#include "LogStatusNotification.h"
#include "MeterValues.h"
#include "NotifyChargingLimit.h"
#include "NotifyCustomerInformation.h"
#include "NotifyDisplayMessages.h"
#include "NotifyEVChargingNeeds.h"
#include "NotifyEVChargingSchedule.h"
#include "NotifyEvent.h"
#include "NotifyMonitoringReport.h"
#include "NotifyReport.h"
#include "PublishFirmwareStatusNotification.h"
#include "ReportChargingProfiles.h"
#include "ReservationStatusUpdate.h"
#include "SecurityEventNotification.h"
#include "SignCertificate.h"
#include "StatusNotification.h"
#include "TransactionEvent.h"

#include <vector>

namespace ocpp
{
namespace centralsystem
{
namespace ocpp20
{

/** @brief Interface for charge point requests implementations */
class IChargePointRequestHandler20
{
  public:
    /** @brief Destructor */
    virtual ~IChargePointRequestHandler20() { }

    /** @brief Called to notify the disconnection of the charge point */
    virtual void disconnected() = 0;
    /**
     * @brief Called on reception of a BootNotification request from the charge point
     * @param request Request to received
     * @param response Response to send
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been handled and a response must be sent, false otherwise
     */
    virtual bool onBootNotification(const ocpp::messages::ocpp20::BootNotificationReq& request,
                                    ocpp::messages::ocpp20::BootNotificationConf&      response,
                                    std::string&                                       error,
                                    std::string&                                       message) = 0;
    /**
     * @brief Called on reception of a Authorize request from the charge point
     * @param request Request to received
     * @param response Response to send
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been handled and a response must be sent, false otherwise
     */
    virtual bool onAuthorize(const ocpp::messages::ocpp20::AuthorizeReq& request,
                             ocpp::messages::ocpp20::AuthorizeConf&      response,
                             std::string&                                error,
                             std::string&                                message) = 0;
    /**
     * @brief Called on reception of a ClearedChargingLimit request from the charge point
     * @param request Request to received
     * @param response Response to send
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been handled and a response must be sent, false otherwise
     */
    virtual bool onClearedChargingLimit(const ocpp::messages::ocpp20::ClearedChargingLimitReq& request,
                                        ocpp::messages::ocpp20::ClearedChargingLimitConf&      response,
                                        std::string&                                           error,
                                        std::string&                                           message) = 0;
    /**
     * @brief Called on reception of a CostUpdated request from the charge point
     * @param request Request to received
     * @param response Response to send
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been handled and a response must be sent, false otherwise
     */
    virtual bool onCostUpdated(const ocpp::messages::ocpp20::CostUpdatedReq& request,
                               ocpp::messages::ocpp20::CostUpdatedConf&      response,
                               std::string&                                  error,
                               std::string&                                  message) = 0;
    /**
     * @brief Called on reception of a DataTransfer request from the charge point
     * @param request Request to received
     * @param response Response to send
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been handled and a response must be sent, false otherwise
     */
    virtual bool onDataTransfer(const ocpp::messages::ocpp20::DataTransferReq& request,
                                ocpp::messages::ocpp20::DataTransferConf&      response,
                                std::string&                                   error,
                                std::string&                                   message) = 0;
    /**
     * @brief Called on reception of a FirmwareStatusNotification request from the charge point
     * @param request Request to received
     * @param response Response to send
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been handled and a response must be sent, false otherwise
     */
    virtual bool onFirmwareStatusNotification(const ocpp::messages::ocpp20::FirmwareStatusNotificationReq& request,
                                              ocpp::messages::ocpp20::FirmwareStatusNotificationConf&      response,
                                              std::string&                                                 error,
                                              std::string&                                                 message) = 0;
    /**
     * @brief Called on reception of a Heartbeat request from the charge point
     * @param request Request to received
     * @param response Response to send
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been handled and a response must be sent, false otherwise
     */
    virtual bool onHeartbeat(const ocpp::messages::ocpp20::HeartbeatReq& request,
                             ocpp::messages::ocpp20::HeartbeatConf&      response,
                             std::string&                                error,
                             std::string&                                message) = 0;
    /**
     * @brief Called on reception of a LogStatusNotification request from the charge point
     * @param request Request to received
     * @param response Response to send
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been handled and a response must be sent, false otherwise
     */
    virtual bool onLogStatusNotification(const ocpp::messages::ocpp20::LogStatusNotificationReq& request,
                                         ocpp::messages::ocpp20::LogStatusNotificationConf&      response,
                                         std::string&                                            error,
                                         std::string&                                            message) = 0;
    /**
     * @brief Called on reception of a MeterValues request from the charge point
     * @param request Request to received
     * @param response Response to send
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been handled and a response must be sent, false otherwise
     */
    virtual bool onMeterValues(const ocpp::messages::ocpp20::MeterValuesReq& request,
                               ocpp::messages::ocpp20::MeterValuesConf&      response,
                               std::string&                                  error,
                               std::string&                                  message) = 0;
    /**
     * @brief Called on reception of a NotifyChargingLimit request from the charge point
     * @param request Request to received
     * @param response Response to send
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been handled and a response must be sent, false otherwise
     */
    virtual bool onNotifyChargingLimit(const ocpp::messages::ocpp20::NotifyChargingLimitReq& request,
                                       ocpp::messages::ocpp20::NotifyChargingLimitConf&      response,
                                       std::string&                                          error,
                                       std::string&                                          message) = 0;
    /**
     * @brief Called on reception of a NotifyCustomerInformation request from the charge point
     * @param request Request to received
     * @param response Response to send
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been handled and a response must be sent, false otherwise
     */
    virtual bool onNotifyCustomerInformation(const ocpp::messages::ocpp20::NotifyCustomerInformationReq& request,
                                             ocpp::messages::ocpp20::NotifyCustomerInformationConf&      response,
                                             std::string&                                                error,
                                             std::string&                                                message) = 0;
    /**
     * @brief Called on reception of a NotifyDisplayMessages request from the charge point
     * @param request Request to received
     * @param response Response to send
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been handled and a response must be sent, false otherwise
     */
    virtual bool onNotifyDisplayMessages(const ocpp::messages::ocpp20::NotifyDisplayMessagesReq& request,
                                         ocpp::messages::ocpp20::NotifyDisplayMessagesConf&      response,
                                         std::string&                                            error,
                                         std::string&                                            message) = 0;
    /**
     * @brief Called on reception of a NotifyEVChargingNeeds request from the charge point
     * @param request Request to received
     * @param response Response to send
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been handled and a response must be sent, false otherwise
     */
    virtual bool onNotifyEVChargingNeeds(const ocpp::messages::ocpp20::NotifyEVChargingNeedsReq& request,
                                         ocpp::messages::ocpp20::NotifyEVChargingNeedsConf&      response,
                                         std::string&                                            error,
                                         std::string&                                            message) = 0;
    /**
     * @brief Called on reception of a NotifyEVChargingSchedule request from the charge point
     * @param request Request to received
     * @param response Response to send
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been handled and a response must be sent, false otherwise
     */
    virtual bool onNotifyEVChargingSchedule(const ocpp::messages::ocpp20::NotifyEVChargingScheduleReq& request,
                                            ocpp::messages::ocpp20::NotifyEVChargingScheduleConf&      response,
                                            std::string&                                               error,
                                            std::string&                                               message) = 0;
    /**
     * @brief Called on reception of a NotifyEvent request from the charge point
     * @param request Request to received
     * @param response Response to send
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been handled and a response must be sent, false otherwise
     */
    virtual bool onNotifyEvent(const ocpp::messages::ocpp20::NotifyEventReq& request,
                               ocpp::messages::ocpp20::NotifyEventConf&      response,
                               std::string&                                  error,
                               std::string&                                  message) = 0;
    /**
     * @brief Called on reception of a NotifyMonitoringReport request from the charge point
     * @param request Request to received
     * @param response Response to send
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been handled and a response must be sent, false otherwise
     */
    virtual bool onNotifyMonitoringReport(const ocpp::messages::ocpp20::NotifyMonitoringReportReq& request,
                                          ocpp::messages::ocpp20::NotifyMonitoringReportConf&      response,
                                          std::string&                                             error,
                                          std::string&                                             message) = 0;
    /**
     * @brief Called on reception of a NotifyReport request from the charge point
     * @param request Request to received
     * @param response Response to send
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been handled and a response must be sent, false otherwise
     */
    virtual bool onNotifyReport(const ocpp::messages::ocpp20::NotifyReportReq& request,
                                ocpp::messages::ocpp20::NotifyReportConf&      response,
                                std::string&                                   error,
                                std::string&                                   message) = 0;
    /**
     * @brief Called on reception of a PublishFirmwareStatusNotification request from the charge point
     * @param request Request to received
     * @param response Response to send
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been handled and a response must be sent, false otherwise
     */
    virtual bool onPublishFirmwareStatusNotification(const ocpp::messages::ocpp20::PublishFirmwareStatusNotificationReq& request,
                                                     ocpp::messages::ocpp20::PublishFirmwareStatusNotificationConf&      response,
                                                     std::string&                                                        error,
                                                     std::string&                                                        message) = 0;
    /**
     * @brief Called on reception of a ReportChargingProfiles request from the charge point
     * @param request Request to received
     * @param response Response to send
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been handled and a response must be sent, false otherwise
     */
    virtual bool onReportChargingProfiles(const ocpp::messages::ocpp20::ReportChargingProfilesReq& request,
                                          ocpp::messages::ocpp20::ReportChargingProfilesConf&      response,
                                          std::string&                                             error,
                                          std::string&                                             message) = 0;
    /**
     * @brief Called on reception of a ReservationStatusUpdate request from the charge point
     * @param request Request to received
     * @param response Response to send
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been handled and a response must be sent, false otherwise
     */
    virtual bool onReservationStatusUpdate(const ocpp::messages::ocpp20::ReservationStatusUpdateReq& request,
                                           ocpp::messages::ocpp20::ReservationStatusUpdateConf&      response,
                                           std::string&                                              error,
                                           std::string&                                              message) = 0;
    /**
     * @brief Called on reception of a SecurityEventNotification request from the charge point
     * @param request Request to received
     * @param response Response to send
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been handled and a response must be sent, false otherwise
     */
    virtual bool onSecurityEventNotification(const ocpp::messages::ocpp20::SecurityEventNotificationReq& request,
                                             ocpp::messages::ocpp20::SecurityEventNotificationConf&      response,
                                             std::string&                                                error,
                                             std::string&                                                message) = 0;
    /**
     * @brief Called on reception of a SignCertificate request from the charge point
     * @param request Request to received
     * @param response Response to send
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been handled and a response must be sent, false otherwise
     */
    virtual bool onSignCertificate(const ocpp::messages::ocpp20::SignCertificateReq& request,
                                   ocpp::messages::ocpp20::SignCertificateConf&      response,
                                   std::string&                                      error,
                                   std::string&                                      message) = 0;
    /**
     * @brief Called on reception of a StatusNotification request from the charge point
     * @param request Request to received
     * @param response Response to send
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been handled and a response must be sent, false otherwise
     */
    virtual bool onStatusNotification(const ocpp::messages::ocpp20::StatusNotificationReq& request,
                                      ocpp::messages::ocpp20::StatusNotificationConf&      response,
                                      std::string&                                         error,
                                      std::string&                                         message) = 0;
    /**
     * @brief Called on reception of a TransactionEvent request from the charge point
     * @param request Request to received
     * @param response Response to send
     * @param error Error (Empty if not a CallError)
     * @param message Error message (Empty if not a CallError)
     * @return true if the request has been handled and a response must be sent, false otherwise
     */
    virtual bool onTransactionEvent(const ocpp::messages::ocpp20::TransactionEventReq& request,
                                    ocpp::messages::ocpp20::TransactionEventConf&      response,
                                    std::string&                                       error,
                                    std::string&                                       message) = 0;
};

} // namespace ocpp20
} // namespace centralsystem
} // namespace ocpp

#endif // OPENOCPP_OCPP20_ICHARGEPOINTREQUESTHANDLER20_H