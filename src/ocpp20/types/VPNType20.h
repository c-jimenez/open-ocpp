/*
Copyright (c) 2020 Cedric Jimenez
This file is part of OpenOCPP.

OpenOCPP is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 2.1 of the License, or
(at your option) any later version.

OpenOCPP is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OpenOCPP. If not, see <http://www.gnu.org/licenses/>.
*/

/*
    Generated by json2cpp from : urn:OCPP:Cp:2:2020:3:SetNetworkProfileRequest
                                 OCPP 2.0.1 FINAL
*/

#ifndef OPENOCPP_OCPP20_VPNTYPE_H
#define OPENOCPP_OCPP20_VPNTYPE_H

#include "CustomDataType20.h"
#include "VPNEnumType20.h"

#include "CiStringType.h"
#include "IMessageConverter.h"
#include "Optional.h"

namespace ocpp
{
namespace types
{
namespace ocpp20
{

/** @brief VPN
urn:x-oca:ocpp:uid:2:233268
VPN Configuration settings
 */
struct VPNType
{
    /** @brief  */
    ocpp::types::Optional<CustomDataType> customData;
    /** @brief VPN. Server. URI
urn:x-oca:ocpp:uid:1:569272
VPN Server Address */
    ocpp::types::CiStringType<512u> server;
    /** @brief VPN. User. User_ Name
urn:x-oca:ocpp:uid:1:569273
VPN User */
    ocpp::types::CiStringType<20u> user;
    /** @brief VPN. Group. Group_ Name
urn:x-oca:ocpp:uid:1:569274
VPN group. */
    ocpp::types::Optional<ocpp::types::CiStringType<20u>> group;
    /** @brief VPN. Password. Password
urn:x-oca:ocpp:uid:1:569275
VPN Password. */
    ocpp::types::CiStringType<20u> password;
    /** @brief VPN. Key. VPN_ Key
urn:x-oca:ocpp:uid:1:569276
VPN shared secret. */
    ocpp::types::CiStringType<255u> key;
    /** @brief  */
    VPNEnumType type;
};

/** @brief Converter class for VPNType type */
class VPNTypeConverter : public ocpp::messages::IMessageConverter<VPNType>
{
  public:
    /** @brief Clone the converter */
    ocpp::messages::IMessageConverter<VPNType>* clone() const override { return new VPNTypeConverter(); }

    /** @brief Convert a VPNType from a JSON representation */
    bool fromJson(const rapidjson::Value&       json,
                  VPNType&                      data,
                  std::string&                  error_code,
                  [[maybe_unused]] std::string& error_message) override;

    /** @brief Convert a VPNType to a JSON representation */
    bool toJson(const VPNType& data, rapidjson::Document& json) override;
};

} // namespace ocpp20
} // namespace types
} // namespace ocpp

#endif // OPENOCPP_OCPP20_VPNTYPE_H