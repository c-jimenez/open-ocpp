/*
Copyright (c) 2020 Cedric Jimenez
This file is part of OpenOCPP.

OpenOCPP is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 2.1 of the License, or
(at your option) any later version.

OpenOCPP is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OpenOCPP. If not, see <http://www.gnu.org/licenses/>.
*/

/*
    Generated by json2cpp from : urn:OCPP:Cp:2:2020:3:SetNetworkProfileRequest
                                 OCPP 2.0.1 FINAL
*/

#ifndef OPENOCPP_OCPP20_NETWORKCONNECTIONPROFILETYPE_H
#define OPENOCPP_OCPP20_NETWORKCONNECTIONPROFILETYPE_H

#include "APNType20.h"
#include "CustomDataType20.h"
#include "OCPPInterfaceEnumType20.h"
#include "OCPPTransportEnumType20.h"
#include "OCPPVersionEnumType20.h"
#include "VPNType20.h"

#include "CiStringType.h"
#include "IMessageConverter.h"
#include "Optional.h"

namespace ocpp
{
namespace types
{
namespace ocpp20
{

/** @brief Communication_ Function
urn:x-oca:ocpp:uid:2:233304
The NetworkConnectionProfile defines the functional and technical parameters of a communication link.
 */
struct NetworkConnectionProfileType
{
    /** @brief  */
    ocpp::types::Optional<CustomDataType> customData;
    /** @brief  */
    ocpp::types::Optional<APNType> apn;
    /** @brief  */
    OCPPVersionEnumType ocppVersion;
    /** @brief  */
    OCPPTransportEnumType ocppTransport;
    /** @brief Communication_ Function. OCPP_ Central_ System_ URL. URI
urn:x-oca:ocpp:uid:1:569357
URL of the CSMS(s) that this Charging Station  communicates with. */
    ocpp::types::CiStringType<512u> ocppCsmsUrl;
    /** @brief Duration in seconds before a message send by the Charging Station via this network connection times-out.
The best setting depends on the underlying network and response times of the CSMS.
If you are looking for a some guideline: use 30 seconds as a starting point. */
    int messageTimeout;
    /** @brief This field specifies the security profile used when connecting to the CSMS with this NetworkConnectionProfile. */
    int securityProfile;
    /** @brief  */
    OCPPInterfaceEnumType ocppInterface;
    /** @brief  */
    ocpp::types::Optional<VPNType> vpn;
};

/** @brief Converter class for NetworkConnectionProfileType type */
class NetworkConnectionProfileTypeConverter : public ocpp::messages::IMessageConverter<NetworkConnectionProfileType>
{
  public:
    /** @brief Clone the converter */
    ocpp::messages::IMessageConverter<NetworkConnectionProfileType>* clone() const override
    {
        return new NetworkConnectionProfileTypeConverter();
    }

    /** @brief Convert a NetworkConnectionProfileType from a JSON representation */
    bool fromJson(const rapidjson::Value&       json,
                  NetworkConnectionProfileType& data,
                  std::string&                  error_code,
                  [[maybe_unused]] std::string& error_message) override;

    /** @brief Convert a NetworkConnectionProfileType to a JSON representation */
    bool toJson(const NetworkConnectionProfileType& data, rapidjson::Document& json) override;
};

} // namespace ocpp20
} // namespace types
} // namespace ocpp

#endif // OPENOCPP_OCPP20_NETWORKCONNECTIONPROFILETYPE_H