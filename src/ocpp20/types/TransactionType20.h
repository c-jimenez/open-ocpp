/*
Copyright (c) 2020 Cedric Jimenez
This file is part of OpenOCPP.

OpenOCPP is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 2.1 of the License, or
(at your option) any later version.

OpenOCPP is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OpenOCPP. If not, see <http://www.gnu.org/licenses/>.
*/

/*
    Generated by json2cpp from : urn:OCPP:Cp:2:2020:3:TransactionEventRequest
                                 OCPP 2.0.1 FINAL
*/

#ifndef OPENOCPP_TRANSACTIONTYPE20_H
#define OPENOCPP_TRANSACTIONTYPE20_H

#include "ChargingStateEnumType20.h"
#include "CustomDataType20.h"
#include "ReasonEnumType20.h"

#include "CiStringType.h"
#include "IMessageConverter.h"
#include "Optional.h"

namespace ocpp
{
namespace types
{
namespace ocpp20
{

/** @brief Transaction
urn:x-oca:ocpp:uid:2:233318
 */
struct TransactionType20
{
    /** @brief  */
    ocpp::types::Optional<CustomDataType20> customData;
    /** @brief This contains the Id of the transaction. */
    ocpp::types::CiStringType<36u> transactionId;
    /** @brief  */
    ocpp::types::Optional<ChargingStateEnumType20> chargingState;
    /** @brief Transaction. Time_ Spent_ Charging. Elapsed_ Time
urn:x-oca:ocpp:uid:1:569415
Contains the total time that energy flowed from EVSE to EV during the transaction (in seconds). Note that timeSpentCharging is smaller or equal to the duration of the transaction. */
    ocpp::types::Optional<int> timeSpentCharging;
    /** @brief  */
    ocpp::types::Optional<ReasonEnumType20> stoppedReason;
    /** @brief The ID given to remote start request (&lt;&lt;requeststarttransactionrequest, RequestStartTransactionRequest&gt;&gt;. This enables to CSMS to match the started transaction to the given start request. */
    ocpp::types::Optional<int> remoteStartId;
};

/** @brief Converter class for TransactionType20 type */
class TransactionType20Converter : public ocpp::messages::IMessageConverter<TransactionType20>
{
  public:
    /** @brief Clone the converter */
    ocpp::messages::IMessageConverter<TransactionType20>* clone() const override { return new TransactionType20Converter(); }

    /** @brief Convert a TransactionType20 from a JSON representation */
    bool fromJson(const rapidjson::Value&       json,
                  TransactionType20&            data,
                  std::string&                  error_code,
                  [[maybe_unused]] std::string& error_message) override;

    /** @brief Convert a TransactionType20 to a JSON representation */
    bool toJson(const TransactionType20& data, rapidjson::Document& json) override;
};

} // namespace ocpp20
} // namespace types
} // namespace ocpp

#endif // OPENOCPP_TRANSACTIONTYPE20_H