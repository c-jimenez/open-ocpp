/*
Copyright (c) 2020 Cedric Jimenez
This file is part of OpenOCPP.

OpenOCPP is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 2.1 of the License, or
(at your option) any later version.

OpenOCPP is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OpenOCPP. If not, see <http://www.gnu.org/licenses/>.
*/

/*
    Generated by json2cpp from : urn:OCPP:Cp:2:2020:3:NotifyReportRequest
                                 OCPP 2.0.1 FINAL
*/

#include "ReportDataType20.h"

#include "IRpc.h"

namespace ocpp
{
namespace types
{
namespace ocpp20
{

/** @brief Convert a ReportDataType from a JSON representation */
bool ReportDataTypeConverter::fromJson(const rapidjson::Value&       json,
                                       ReportDataType&               data,
                                       std::string&                  error_code,
                                       [[maybe_unused]] std::string& error_message)
{
    bool ret = true;

    // customData
    if (json.HasMember("customData"))
    {
        CustomDataTypeConverter customData_converter;
        ret = ret && customData_converter.fromJson(json["customData"], data.customData, error_code, error_message);
    }

    // component
    ComponentTypeConverter component_converter;
    ret = ret && component_converter.fromJson(json["component"], data.component, error_code, error_message);

    // variable
    VariableTypeConverter variable_converter;
    ret = ret && variable_converter.fromJson(json["variable"], data.variable, error_code, error_message);

    // variableAttribute
    if (json.HasMember("variableAttribute"))
    {
        const rapidjson::Value&        variableAttribute_json = json["variableAttribute"];
        VariableAttributeTypeConverter variableAttribute_converter;
        for (auto it = variableAttribute_json.Begin(); ret && (it != variableAttribute_json.End()); ++it)
        {
            VariableAttributeType& item = data.variableAttribute.emplace_back();
            ret                         = ret && variableAttribute_converter.fromJson(*it, item, error_code, error_message);
        }
    }

    // variableCharacteristics
    if (json.HasMember("variableCharacteristics"))
    {
        VariableCharacteristicsTypeConverter variableCharacteristics_converter;
        ret = ret && variableCharacteristics_converter.fromJson(
                         json["variableCharacteristics"], data.variableCharacteristics, error_code, error_message);
    }

    if (!ret)
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_TYPE_CONSTRAINT_VIOLATION;
    }

    return ret;
}

/** @brief Convert a ReportDataType to a JSON representation */
bool ReportDataTypeConverter::toJson(const ReportDataType& data, rapidjson::Document& json)
{
    bool ret = true;

    // customData
    if (data.customData.isSet())
    {
        CustomDataTypeConverter customData_converter;
        customData_converter.setAllocator(allocator);
        rapidjson::Document customData_doc(rapidjson::kObjectType);
        ret = ret && customData_converter.toJson(data.customData, customData_doc);
        json.AddMember(rapidjson::StringRef("customData"), customData_doc.Move(), *allocator);
    }

    // component
    ComponentTypeConverter component_converter;
    component_converter.setAllocator(allocator);
    rapidjson::Document component_doc(rapidjson::kObjectType);
    ret = ret && component_converter.toJson(data.component, component_doc);
    json.AddMember(rapidjson::StringRef("component"), component_doc.Move(), *allocator);

    // variable
    VariableTypeConverter variable_converter;
    variable_converter.setAllocator(allocator);
    rapidjson::Document variable_doc(rapidjson::kObjectType);
    ret = ret && variable_converter.toJson(data.variable, variable_doc);
    json.AddMember(rapidjson::StringRef("variable"), variable_doc.Move(), *allocator);

    // variableAttribute

    rapidjson::Value               variableAttribute_json(rapidjson::kArrayType);
    VariableAttributeTypeConverter variableAttribute_converter;
    variableAttribute_converter.setAllocator(allocator);
    for (const VariableAttributeType& item : data.variableAttribute)
    {
        rapidjson::Document item_doc(rapidjson::kObjectType);
        ret = ret && variableAttribute_converter.toJson(item, item_doc);
        variableAttribute_json.PushBack(item_doc.Move(), *allocator);
    }
    json.AddMember(rapidjson::StringRef("variableAttribute"), variableAttribute_json.Move(), *allocator);

    // variableCharacteristics
    if (data.variableCharacteristics.isSet())
    {
        VariableCharacteristicsTypeConverter variableCharacteristics_converter;
        variableCharacteristics_converter.setAllocator(allocator);
        rapidjson::Document variableCharacteristics_doc(rapidjson::kObjectType);
        ret = ret && variableCharacteristics_converter.toJson(data.variableCharacteristics, variableCharacteristics_doc);
        json.AddMember(rapidjson::StringRef("variableCharacteristics"), variableCharacteristics_doc.Move(), *allocator);
    }

    return ret;
}

} // namespace ocpp20
} // namespace types
} // namespace ocpp