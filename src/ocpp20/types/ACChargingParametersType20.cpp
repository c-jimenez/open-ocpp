/*
Copyright (c) 2020 Cedric Jimenez
This file is part of OpenOCPP.

OpenOCPP is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 2.1 of the License, or
(at your option) any later version.

OpenOCPP is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OpenOCPP. If not, see <http://www.gnu.org/licenses/>.
*/

/*
    Generated by json2cpp from : urn:OCPP:Cp:2:2020:3:NotifyEVChargingNeedsRequest
                                 OCPP 2.0.1 FINAL
*/

#include "ACChargingParametersType20.h"

#include "IRpc.h"

namespace ocpp
{
namespace types
{
namespace ocpp20
{

/** @brief Convert a ACChargingParametersType20 from a JSON representation */
bool ACChargingParametersType20Converter::fromJson(const rapidjson::Value&       json,
                                                   ACChargingParametersType20&   data,
                                                   std::string&                  error_code,
                                                   [[maybe_unused]] std::string& error_message)
{
    bool ret = true;

    // customData
    if (json.HasMember("customData"))
    {
        CustomDataType20Converter customData_converter;
        ret = ret && customData_converter.fromJson(json["customData"], data.customData, error_code, error_message);
    }

    // energyAmount
    extract(json, "energyAmount", data.energyAmount);

    // evMinCurrent
    extract(json, "evMinCurrent", data.evMinCurrent);

    // evMaxCurrent
    extract(json, "evMaxCurrent", data.evMaxCurrent);

    // evMaxVoltage
    extract(json, "evMaxVoltage", data.evMaxVoltage);

    if (!ret)
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_TYPE_CONSTRAINT_VIOLATION;
    }

    return ret;
}

/** @brief Convert a ACChargingParametersType20 to a JSON representation */
bool ACChargingParametersType20Converter::toJson(const ACChargingParametersType20& data, rapidjson::Document& json)
{
    bool ret = true;

    // customData
    if (data.customData.isSet())
    {
        CustomDataType20Converter customData_converter;
        customData_converter.setAllocator(allocator);
        rapidjson::Document customData_doc;
        customData_doc.Parse("{}");
        ret = ret && customData_converter.toJson(data.customData, customData_doc);
        json.AddMember(rapidjson::StringRef("customData"), customData_doc.Move(), *allocator);
    }

    // energyAmount
    fill(json, "energyAmount", data.energyAmount);

    // evMinCurrent
    fill(json, "evMinCurrent", data.evMinCurrent);

    // evMaxCurrent
    fill(json, "evMaxCurrent", data.evMaxCurrent);

    // evMaxVoltage
    fill(json, "evMaxVoltage", data.evMaxVoltage);

    return ret;
}

} // namespace ocpp20
} // namespace types
} // namespace ocpp