/*
Copyright (c) 2020 Cedric Jimenez
This file is part of OpenOCPP.

OpenOCPP is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 2.1 of the License, or
(at your option) any later version.

OpenOCPP is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OpenOCPP. If not, see <http://www.gnu.org/licenses/>.
*/

/*
    Generated by json2cpp from : urn:OCPP:Cp:2:2020:3:RequestStartTransactionRequest
                                 OCPP 2.0.1 FINAL
*/

#ifndef OPENOCPP_CHARGINGSCHEDULETYPE_H
#define OPENOCPP_CHARGINGSCHEDULETYPE_H

#include "CustomDataType.h"
#include "ChargingRateUnitEnumType.h"
#include "ChargingSchedulePeriodType.h"
#include "SalesTariffType.h"

#include "Optional.h"
#include "DateTime.h"
#include <vector>
#include "IMessageConverter.h"

namespace ocpp
{
namespace types
{
namespace ocpp20
{

/** @brief Charging_ Schedule
urn:x-oca:ocpp:uid:2:233256
Charging schedule structure defines a list of charging periods, as used in: GetCompositeSchedule.conf and ChargingProfile. 
 */
struct ChargingScheduleType
{
    /** @brief  */
    ocpp::types::Optional<CustomDataType> customData;
    /** @brief Identifies the ChargingSchedule. */
    int id;
    /** @brief Charging_ Schedule. Start_ Schedule. Date_ Time
urn:x-oca:ocpp:uid:1:569237
Starting point of an absolute schedule. If absent the schedule will be relative to start of charging. */
    ocpp::types::Optional<ocpp::types::DateTime> startSchedule;
    /** @brief Charging_ Schedule. Duration. Elapsed_ Time
urn:x-oca:ocpp:uid:1:569236
Duration of the charging schedule in seconds. If the duration is left empty, the last period will continue indefinitely or until end of the transaction if chargingProfilePurpose = TxProfile. */
    ocpp::types::Optional<int> duration;
    /** @brief  */
    ChargingRateUnitEnumType chargingRateUnit;
    /** @brief  */
    std::vector<ChargingSchedulePeriodType> chargingSchedulePeriod;
    /** @brief Charging_ Schedule. Min_ Charging_ Rate. Numeric
urn:x-oca:ocpp:uid:1:569239
Minimum charging rate supported by the EV. The unit of measure is defined by the chargingRateUnit. This parameter is intended to be used by a local smart charging algorithm to optimize the power allocation for in the case a charging process is inefficient at lower charging rates. Accepts at most one digit fraction (e.g. 8.1) */
    ocpp::types::Optional<float> minChargingRate;
    /** @brief  */
    ocpp::types::Optional<SalesTariffType> salesTariff;
};

/** @brief Converter class for ChargingScheduleType type */
class ChargingScheduleTypeConverter : public ocpp::messages::IMessageConverter<ChargingScheduleType>
{
  public:
    /** @brief Clone the converter */
    ocpp::messages::IMessageConverter<ChargingScheduleType>* clone() const override { return new ChargingScheduleTypeConverter(); }

    /** @brief Convert a ChargingScheduleType from a JSON representation */
    bool fromJson(const rapidjson::Value&       json,
                  ChargingScheduleType&                data,
                  std::string&                  error_code,
                  [[maybe_unused]] std::string& error_message) override;

    /** @brief Convert a ChargingScheduleType to a JSON representation */
    bool toJson(const ChargingScheduleType& data, rapidjson::Document& json) override;
};

} // namespace ocpp20
} // namespace types
} // namespace ocpp

#endif // OPENOCPP_CHARGINGSCHEDULETYPE_H