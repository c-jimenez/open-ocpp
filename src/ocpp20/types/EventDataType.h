/*
Copyright (c) 2020 Cedric Jimenez
This file is part of OpenOCPP.

OpenOCPP is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 2.1 of the License, or
(at your option) any later version.

OpenOCPP is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OpenOCPP. If not, see <http://www.gnu.org/licenses/>.
*/

/*
    Generated by json2cpp from : urn:OCPP:Cp:2:2020:3:NotifyEventRequest
                                 OCPP 2.0.1 FINAL
*/

#ifndef OPENOCPP_EVENTDATATYPE_H
#define OPENOCPP_EVENTDATATYPE_H

#include "ComponentType.h"
#include "CustomDataType.h"
#include "EventNotificationEnumType.h"
#include "EventTriggerEnumType.h"
#include "VariableType.h"

#include "CiStringType.h"
#include "DateTime.h"
#include "IMessageConverter.h"
#include "Optional.h"

namespace ocpp
{
namespace types
{
namespace ocpp20
{

/** @brief Class to report an event notification for a component-variable.
 */
struct EventDataType
{
    /** @brief  */
    ocpp::types::Optional<CustomDataType> customData;
    /** @brief Identifies the event. This field can be referred to as a cause by other events. */
    int eventId;
    /** @brief Timestamp of the moment the report was generated. */
    ocpp::types::DateTime timestamp;
    /** @brief  */
    EventTriggerEnumType trigger;
    /** @brief Refers to the Id of an event that is considered to be the cause for this event. */
    ocpp::types::Optional<int> cause;
    /** @brief Actual value (_attributeType_ Actual) of the variable.

The Configuration Variable &lt;&lt;configkey-reporting-value-size,ReportingValueSize&gt;&gt; can be used to limit GetVariableResult.attributeValue, VariableAttribute.value and EventData.actualValue. The max size of these values will always remain equal. */
    ocpp::types::CiStringType<2500u> actualValue;
    /** @brief Technical (error) code as reported by component. */
    ocpp::types::Optional<ocpp::types::CiStringType<50u>> techCode;
    /** @brief Technical detail information as reported by component. */
    ocpp::types::Optional<ocpp::types::CiStringType<500u>> techInfo;
    /** @brief _Cleared_ is set to true to report the clearing of a monitored situation, i.e. a 'return to normal'. */
    ocpp::types::Optional<bool> cleared;
    /** @brief If an event notification is linked to a specific transaction, this field can be used to specify its transactionId. */
    ocpp::types::Optional<ocpp::types::CiStringType<36u>> transactionId;
    /** @brief  */
    ComponentType component;
    /** @brief Identifies the VariableMonitoring which triggered the event. */
    ocpp::types::Optional<int> variableMonitoringId;
    /** @brief  */
    EventNotificationEnumType eventNotificationType;
    /** @brief  */
    VariableType variable;
};

/** @brief Converter class for EventDataType type */
class EventDataTypeConverter : public ocpp::messages::IMessageConverter<EventDataType>
{
  public:
    /** @brief Clone the converter */
    ocpp::messages::IMessageConverter<EventDataType>* clone() const override { return new EventDataTypeConverter(); }

    /** @brief Convert a EventDataType from a JSON representation */
    bool fromJson(const rapidjson::Value&       json,
                  EventDataType&                data,
                  std::string&                  error_code,
                  [[maybe_unused]] std::string& error_message) override;

    /** @brief Convert a EventDataType to a JSON representation */
    bool toJson(const EventDataType& data, rapidjson::Document& json) override;
};

} // namespace ocpp20
} // namespace types
} // namespace ocpp

#endif // OPENOCPP_EVENTDATATYPE_H