/*
Copyright (c) 2020 Cedric Jimenez
This file is part of OpenOCPP.

OpenOCPP is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 2.1 of the License, or
(at your option) any later version.

OpenOCPP is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OpenOCPP. If not, see <http://www.gnu.org/licenses/>.
*/

/*
    Generated by json2cpp from : urn:OCPP:Cp:2:2020:3:RequestStartTransactionRequest
                                 OCPP 2.0.1 FINAL
*/

#ifndef OPENOCPP_RELATIVETIMEINTERVALTYPE20_H
#define OPENOCPP_RELATIVETIMEINTERVALTYPE20_H

#include "CustomDataType20.h"

#include "IMessageConverter.h"
#include "Optional.h"

namespace ocpp
{
namespace types
{
namespace ocpp20
{

/** @brief Relative_ Timer_ Interval
urn:x-oca:ocpp:uid:2:233270
 */
struct RelativeTimeIntervalType20
{
    /** @brief  */
    ocpp::types::Optional<CustomDataType20> customData;
    /** @brief Relative_ Timer_ Interval. Start. Elapsed_ Time
urn:x-oca:ocpp:uid:1:569279
Start of the interval, in seconds from NOW. */
    int start;
    /** @brief Relative_ Timer_ Interval. Duration. Elapsed_ Time
urn:x-oca:ocpp:uid:1:569280
Duration of the interval, in seconds. */
    ocpp::types::Optional<int> duration;
};

/** @brief Converter class for RelativeTimeIntervalType20 type */
class RelativeTimeIntervalType20Converter : public ocpp::messages::IMessageConverter<RelativeTimeIntervalType20>
{
  public:
    /** @brief Clone the converter */
    ocpp::messages::IMessageConverter<RelativeTimeIntervalType20>* clone() const override
    {
        return new RelativeTimeIntervalType20Converter();
    }

    /** @brief Convert a RelativeTimeIntervalType20 from a JSON representation */
    bool fromJson(const rapidjson::Value&       json,
                  RelativeTimeIntervalType20&   data,
                  std::string&                  error_code,
                  [[maybe_unused]] std::string& error_message) override;

    /** @brief Convert a RelativeTimeIntervalType20 to a JSON representation */
    bool toJson(const RelativeTimeIntervalType20& data, rapidjson::Document& json) override;
};

} // namespace ocpp20
} // namespace types
} // namespace ocpp

#endif // OPENOCPP_RELATIVETIMEINTERVALTYPE20_H