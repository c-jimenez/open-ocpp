/*
Copyright (c) 2020 Cedric Jimenez
This file is part of OpenOCPP.

OpenOCPP is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 2.1 of the License, or
(at your option) any later version.

OpenOCPP is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OpenOCPP. If not, see <http://www.gnu.org/licenses/>.
*/

/*
    Generated by json2cpp from : urn:OCPP:Cp:2:2020:3:NotifyDisplayMessagesRequest
                                 OCPP 2.0.1 FINAL
*/

#include "ComponentType20.h"

#include "IRpc.h"

namespace ocpp
{
namespace types
{
namespace ocpp20
{

/** @brief Convert a ComponentType from a JSON representation */
bool ComponentTypeConverter::fromJson(const rapidjson::Value&       json,
                                      ComponentType&                data,
                                      std::string&                  error_code,
                                      [[maybe_unused]] std::string& error_message)
{
    bool ret = true;

    // customData
    if (json.HasMember("customData"))
    {
        CustomDataTypeConverter customData_converter;
        ret = ret && customData_converter.fromJson(json["customData"], data.customData, error_code, error_message);
    }

    // evse
    if (json.HasMember("evse"))
    {
        EVSETypeConverter evse_converter;
        ret = ret && evse_converter.fromJson(json["evse"], data.evse, error_code, error_message);
    }

    // name
    extract(json, "name", data.name);

    // instance
    extract(json, "instance", data.instance);

    if (!ret)
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_TYPE_CONSTRAINT_VIOLATION;
    }

    return ret;
}

/** @brief Convert a ComponentType to a JSON representation */
bool ComponentTypeConverter::toJson(const ComponentType& data, rapidjson::Document& json)
{
    bool ret = true;

    // customData
    if (data.customData.isSet())
    {
        CustomDataTypeConverter customData_converter;
        customData_converter.setAllocator(allocator);
        rapidjson::Document customData_doc(rapidjson::kObjectType);
        ret = ret && customData_converter.toJson(data.customData, customData_doc);
        json.AddMember(rapidjson::StringRef("customData"), customData_doc.Move(), *allocator);
    }

    // evse
    if (data.evse.isSet())
    {
        EVSETypeConverter evse_converter;
        evse_converter.setAllocator(allocator);
        rapidjson::Document evse_doc(rapidjson::kObjectType);
        ret = ret && evse_converter.toJson(data.evse, evse_doc);
        json.AddMember(rapidjson::StringRef("evse"), evse_doc.Move(), *allocator);
    }

    // name
    fill(json, "name", data.name);

    // instance
    fill(json, "instance", data.instance);

    return ret;
}

} // namespace ocpp20
} // namespace types
} // namespace ocpp