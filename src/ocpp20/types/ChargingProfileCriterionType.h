/*
Copyright (c) 2020 Cedric Jimenez
This file is part of OpenOCPP.

OpenOCPP is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 2.1 of the License, or
(at your option) any later version.

OpenOCPP is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OpenOCPP. If not, see <http://www.gnu.org/licenses/>.
*/

/*
    Generated by json2cpp from : urn:OCPP:Cp:2:2020:3:GetChargingProfilesRequest
                                 OCPP 2.0.1 FINAL
*/

#ifndef OPENOCPP_CHARGINGPROFILECRITERIONTYPE_H
#define OPENOCPP_CHARGINGPROFILECRITERIONTYPE_H

#include "CustomDataType.h"
#include "ChargingProfilePurposeEnumType.h"
#include "ChargingLimitSourceEnumType.h"

#include "Optional.h"
#include <vector>
#include "IMessageConverter.h"

namespace ocpp
{
namespace types
{
namespace ocpp20
{

/** @brief Charging_ Profile
urn:x-oca:ocpp:uid:2:233255
A ChargingProfile consists of ChargingSchedule, describing the amount of power or current that can be delivered per time interval.
 */
struct ChargingProfileCriterionType
{
    /** @brief  */
    ocpp::types::Optional<CustomDataType> customData;
    /** @brief  */
    ocpp::types::Optional<ChargingProfilePurposeEnumType> chargingProfilePurpose;
    /** @brief Charging_ Profile. Stack_ Level. Counter
urn:x-oca:ocpp:uid:1:569230
Value determining level in hierarchy stack of profiles. Higher values have precedence over lower values. Lowest level is 0. */
    ocpp::types::Optional<int> stackLevel;
    /** @brief List of all the chargingProfileIds requested. Any ChargingProfile that matches one of these profiles will be reported. If omitted, the Charging Station SHALL not filter on chargingProfileId. This field SHALL NOT contain more ids than set in &lt;&lt;configkey-charging-profile-entries,ChargingProfileEntries.maxLimit&gt;&gt; */
    std::vector<int> chargingProfileId;
    /** @brief For which charging limit sources, charging profiles SHALL be reported. If omitted, the Charging Station SHALL not filter on chargingLimitSource. */
    std::vector<ChargingLimitSourceEnumType> chargingLimitSource;
};

/** @brief Converter class for ChargingProfileCriterionType type */
class ChargingProfileCriterionTypeConverter : public ocpp::messages::IMessageConverter<ChargingProfileCriterionType>
{
  public:
    /** @brief Clone the converter */
    ocpp::messages::IMessageConverter<ChargingProfileCriterionType>* clone() const override { return new ChargingProfileCriterionTypeConverter(); }

    /** @brief Convert a ChargingProfileCriterionType from a JSON representation */
    bool fromJson(const rapidjson::Value&       json,
                  ChargingProfileCriterionType&                data,
                  std::string&                  error_code,
                  [[maybe_unused]] std::string& error_message) override;

    /** @brief Convert a ChargingProfileCriterionType to a JSON representation */
    bool toJson(const ChargingProfileCriterionType& data, rapidjson::Document& json) override;
};

} // namespace ocpp20
} // namespace types
} // namespace ocpp

#endif // OPENOCPP_CHARGINGPROFILECRITERIONTYPE_H