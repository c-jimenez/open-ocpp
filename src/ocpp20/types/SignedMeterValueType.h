/*
Copyright (c) 2020 Cedric Jimenez
This file is part of OpenOCPP.

OpenOCPP is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 2.1 of the License, or
(at your option) any later version.

OpenOCPP is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OpenOCPP. If not, see <http://www.gnu.org/licenses/>.
*/

/*
    Generated by json2cpp from : urn:OCPP:Cp:2:2020:3:MeterValuesRequest
                                 OCPP 2.0.1 FINAL
*/

#ifndef OPENOCPP_SIGNEDMETERVALUETYPE_H
#define OPENOCPP_SIGNEDMETERVALUETYPE_H

#include "CustomDataType.h"

#include "CiStringType.h"
#include "IMessageConverter.h"
#include "Optional.h"

namespace ocpp
{
namespace types
{
namespace ocpp20
{

/** @brief Represent a signed version of the meter value.
 */
struct SignedMeterValueType
{
    /** @brief  */
    ocpp::types::Optional<CustomDataType> customData;
    /** @brief Base64 encoded, contains the signed data which might contain more then just the meter value. It can contain information like timestamps, reference to a customer etc. */
    ocpp::types::CiStringType<2500u> signedMeterData;
    /** @brief Method used to create the digital signature. */
    ocpp::types::CiStringType<50u> signingMethod;
    /** @brief Method used to encode the meter values before applying the digital signature algorithm. */
    ocpp::types::CiStringType<50u> encodingMethod;
    /** @brief Base64 encoded, sending depends on configuration variable _PublicKeyWithSignedMeterValue_. */
    ocpp::types::CiStringType<2500u> publicKey;
};

/** @brief Converter class for SignedMeterValueType type */
class SignedMeterValueTypeConverter : public ocpp::messages::IMessageConverter<SignedMeterValueType>
{
  public:
    /** @brief Clone the converter */
    ocpp::messages::IMessageConverter<SignedMeterValueType>* clone() const override { return new SignedMeterValueTypeConverter(); }

    /** @brief Convert a SignedMeterValueType from a JSON representation */
    bool fromJson(const rapidjson::Value&       json,
                  SignedMeterValueType&         data,
                  std::string&                  error_code,
                  [[maybe_unused]] std::string& error_message) override;

    /** @brief Convert a SignedMeterValueType to a JSON representation */
    bool toJson(const SignedMeterValueType& data, rapidjson::Document& json) override;
};

} // namespace ocpp20
} // namespace types
} // namespace ocpp

#endif // OPENOCPP_SIGNEDMETERVALUETYPE_H