/*
Copyright (c) 2020 Cedric Jimenez
This file is part of OpenOCPP.

OpenOCPP is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 2.1 of the License, or
(at your option) any later version.

OpenOCPP is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OpenOCPP. If not, see <http://www.gnu.org/licenses/>.
*/

/*
    Generated by json2cpp from : urn:OCPP:Cp:2:2020:3:RequestStartTransactionRequest
                                 OCPP 2.0.1 FINAL
*/

#ifndef OPENOCPP_CONSUMPTIONCOSTTYPE_H
#define OPENOCPP_CONSUMPTIONCOSTTYPE_H

#include "CostType.h"
#include "CustomDataType.h"

#include "IMessageConverter.h"
#include "Optional.h"
#include <vector>

namespace ocpp
{
namespace types
{
namespace ocpp20
{

/** @brief Consumption_ Cost
urn:x-oca:ocpp:uid:2:233259
 */
struct ConsumptionCostType
{
    /** @brief  */
    ocpp::types::Optional<CustomDataType> customData;
    /** @brief Consumption_ Cost. Start_ Value. Numeric
urn:x-oca:ocpp:uid:1:569246
The lowest level of consumption that defines the starting point of this consumption block. The block interval extends to the start of the next interval. */
    float startValue;
    /** @brief  */
    std::vector<CostType> cost;
};

/** @brief Converter class for ConsumptionCostType type */
class ConsumptionCostTypeConverter : public ocpp::messages::IMessageConverter<ConsumptionCostType>
{
  public:
    /** @brief Clone the converter */
    ocpp::messages::IMessageConverter<ConsumptionCostType>* clone() const override { return new ConsumptionCostTypeConverter(); }

    /** @brief Convert a ConsumptionCostType from a JSON representation */
    bool fromJson(const rapidjson::Value&       json,
                  ConsumptionCostType&          data,
                  std::string&                  error_code,
                  [[maybe_unused]] std::string& error_message) override;

    /** @brief Convert a ConsumptionCostType to a JSON representation */
    bool toJson(const ConsumptionCostType& data, rapidjson::Document& json) override;
};

} // namespace ocpp20
} // namespace types
} // namespace ocpp

#endif // OPENOCPP_CONSUMPTIONCOSTTYPE_H