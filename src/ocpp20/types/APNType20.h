/*
Copyright (c) 2020 Cedric Jimenez
This file is part of OpenOCPP.

OpenOCPP is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 2.1 of the License, or
(at your option) any later version.

OpenOCPP is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OpenOCPP. If not, see <http://www.gnu.org/licenses/>.
*/

/*
    Generated by json2cpp from : urn:OCPP:Cp:2:2020:3:SetNetworkProfileRequest
                                 OCPP 2.0.1 FINAL
*/

#ifndef OPENOCPP_OCPP20_APNTYPE_H
#define OPENOCPP_OCPP20_APNTYPE_H

#include "APNAuthenticationEnumType20.h"
#include "CustomDataType20.h"

#include "CiStringType.h"
#include "IMessageConverter.h"
#include "Optional.h"

namespace ocpp
{
namespace types
{
namespace ocpp20
{

/** @brief APN
urn:x-oca:ocpp:uid:2:233134
Collection of configuration data needed to make a data-connection over a cellular network.

NOTE: When asking a GSM modem to dial in, it is possible to specify which mobile operator should be used. This can be done with the mobile country code (MCC) in combination with a mobile network code (MNC). Example: If your preferred network is Vodafone Netherlands, the MCC=204 and the MNC=04 which means the key PreferredNetwork = 20404 Some modems allows to specify a preferred network, which means, if this network is not available, a different network is used. If you specify UseOnlyPreferredNetwork and this network is not available, the modem will not dial in.
 */
struct APNType
{
    /** @brief  */
    ocpp::types::Optional<CustomDataType> customData;
    /** @brief APN. APN. URI
urn:x-oca:ocpp:uid:1:568814
The Access Point Name as an URL. */
    ocpp::types::CiStringType<512u> apn;
    /** @brief APN. APN. User_ Name
urn:x-oca:ocpp:uid:1:568818
APN username. */
    ocpp::types::Optional<ocpp::types::CiStringType<20u>> apnUserName;
    /** @brief APN. APN. Password
urn:x-oca:ocpp:uid:1:568819
APN Password. */
    ocpp::types::Optional<ocpp::types::CiStringType<20u>> apnPassword;
    /** @brief APN. SIMPIN. PIN_ Code
urn:x-oca:ocpp:uid:1:568821
SIM card pin code. */
    ocpp::types::Optional<int> simPin;
    /** @brief APN. Preferred_ Network. Mobile_ Network_ ID
urn:x-oca:ocpp:uid:1:568822
Preferred network, written as MCC and MNC concatenated. See note. */
    ocpp::types::Optional<ocpp::types::CiStringType<6u>> preferredNetwork;
    /** @brief APN. Use_ Only_ Preferred_ Network. Indicator
urn:x-oca:ocpp:uid:1:568824
Default: false. Use only the preferred Network, do
not dial in when not available. See Note. */
    ocpp::types::Optional<bool> useOnlyPreferredNetwork;
    /** @brief  */
    APNAuthenticationEnumType apnAuthentication;
};

/** @brief Converter class for APNType type */
class APNTypeConverter : public ocpp::messages::IMessageConverter<APNType>
{
  public:
    /** @brief Clone the converter */
    ocpp::messages::IMessageConverter<APNType>* clone() const override { return new APNTypeConverter(); }

    /** @brief Convert a APNType from a JSON representation */
    bool fromJson(const rapidjson::Value&       json,
                  APNType&                      data,
                  std::string&                  error_code,
                  [[maybe_unused]] std::string& error_message) override;

    /** @brief Convert a APNType to a JSON representation */
    bool toJson(const APNType& data, rapidjson::Document& json) override;
};

} // namespace ocpp20
} // namespace types
} // namespace ocpp

#endif // OPENOCPP_OCPP20_APNTYPE_H