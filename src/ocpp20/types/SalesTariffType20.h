/*
Copyright (c) 2020 Cedric Jimenez
This file is part of OpenOCPP.

OpenOCPP is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 2.1 of the License, or
(at your option) any later version.

OpenOCPP is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OpenOCPP. If not, see <http://www.gnu.org/licenses/>.
*/

/*
    Generated by json2cpp from : urn:OCPP:Cp:2:2020:3:RequestStartTransactionRequest
                                 OCPP 2.0.1 FINAL
*/

#ifndef OPENOCPP_SALESTARIFFTYPE20_H
#define OPENOCPP_SALESTARIFFTYPE20_H

#include "CustomDataType20.h"
#include "SalesTariffEntryType20.h"

#include "CiStringType.h"
#include "IMessageConverter.h"
#include "Optional.h"
#include <vector>

namespace ocpp
{
namespace types
{
namespace ocpp20
{

/** @brief Sales_ Tariff
urn:x-oca:ocpp:uid:2:233272
NOTE: This dataType is based on dataTypes from &lt;&lt;ref-ISOIEC15118-2,ISO 15118-2&gt;&gt;.
 */
struct SalesTariffType20
{
    /** @brief  */
    ocpp::types::Optional<CustomDataType20> customData;
    /** @brief Identified_ Object. MRID. Numeric_ Identifier
urn:x-enexis:ecdm:uid:1:569198
SalesTariff identifier used to identify one sales tariff. An SAID remains a unique identifier for one schedule throughout a charging session. */
    int id;
    /** @brief Sales_ Tariff. Sales. Tariff_ Description
urn:x-oca:ocpp:uid:1:569283
A human readable title/short description of the sales tariff e.g. for HMI display purposes. */
    ocpp::types::Optional<ocpp::types::CiStringType<32u>> salesTariffDescription;
    /** @brief Sales_ Tariff. Num_ E_ Price_ Levels. Counter
urn:x-oca:ocpp:uid:1:569284
Defines the overall number of distinct price levels used across all provided SalesTariff elements. */
    ocpp::types::Optional<int> numEPriceLevels;
    /** @brief  */
    std::vector<SalesTariffEntryType20> salesTariffEntry;
};

/** @brief Converter class for SalesTariffType20 type */
class SalesTariffType20Converter : public ocpp::messages::IMessageConverter<SalesTariffType20>
{
  public:
    /** @brief Clone the converter */
    ocpp::messages::IMessageConverter<SalesTariffType20>* clone() const override { return new SalesTariffType20Converter(); }

    /** @brief Convert a SalesTariffType20 from a JSON representation */
    bool fromJson(const rapidjson::Value&       json,
                  SalesTariffType20&            data,
                  std::string&                  error_code,
                  [[maybe_unused]] std::string& error_message) override;

    /** @brief Convert a SalesTariffType20 to a JSON representation */
    bool toJson(const SalesTariffType20& data, rapidjson::Document& json) override;
};

} // namespace ocpp20
} // namespace types
} // namespace ocpp

#endif // OPENOCPP_SALESTARIFFTYPE20_H