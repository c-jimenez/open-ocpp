/*
Copyright (c) 2020 Cedric Jimenez
This file is part of OpenOCPP.

OpenOCPP is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 2.1 of the License, or
(at your option) any later version.

OpenOCPP is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OpenOCPP. If not, see <http://www.gnu.org/licenses/>.
*/

/*
    Generated by json2cpp from : urn:OCPP:Cp:2:2020:3:RequestStartTransactionRequest
                                 OCPP 2.0.1 FINAL
*/

#ifndef OPENOCPP_STATUSINFOTYPE_H
#define OPENOCPP_STATUSINFOTYPE_H

#include "CustomDataType.h"

#include "Optional.h"
#include "CiStringType.h"
#include "IMessageConverter.h"

namespace ocpp
{
namespace types
{
namespace ocpp20
{

/** @brief Element providing more information about the status.
 */
struct StatusInfoType
{
    /** @brief  */
    ocpp::types::Optional<CustomDataType> customData;
    /** @brief A predefined code for the reason why the status is returned in this response. The string is case-insensitive. */
    ocpp::types::CiStringType<20u> reasonCode;
    /** @brief Additional text to provide detailed information. */
    ocpp::types::Optional<ocpp::types::CiStringType<512u>> additionalInfo;
};

/** @brief Converter class for StatusInfoType type */
class StatusInfoTypeConverter : public ocpp::messages::IMessageConverter<StatusInfoType>
{
  public:
    /** @brief Clone the converter */
    ocpp::messages::IMessageConverter<StatusInfoType>* clone() const override { return new StatusInfoTypeConverter(); }

    /** @brief Convert a StatusInfoType from a JSON representation */
    bool fromJson(const rapidjson::Value&       json,
                  StatusInfoType&                data,
                  std::string&                  error_code,
                  [[maybe_unused]] std::string& error_message) override;

    /** @brief Convert a StatusInfoType to a JSON representation */
    bool toJson(const StatusInfoType& data, rapidjson::Document& json) override;
};

} // namespace ocpp20
} // namespace types
} // namespace ocpp

#endif // OPENOCPP_STATUSINFOTYPE_H