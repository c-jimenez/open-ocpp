/*
Copyright (c) 2020 Cedric Jimenez
This file is part of OpenOCPP.

OpenOCPP is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 2.1 of the License, or
(at your option) any later version.

OpenOCPP is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OpenOCPP. If not, see <http://www.gnu.org/licenses/>.
*/

/*
    Generated by json2cpp from : urn:OCPP:Cp:2:2020:3:RequestStartTransactionRequest
                                 OCPP 2.0.1 FINAL
*/

#include "SalesTariffEntryType.h"

#include "IRpc.h"

namespace ocpp
{
namespace types
{
namespace ocpp20
{

/** @brief Convert a SalesTariffEntryType from a JSON representation */
bool SalesTariffEntryTypeConverter::fromJson(const rapidjson::Value&       json,
                                      SalesTariffEntryType&                data,
                                      std::string&                  error_code,
                                      [[maybe_unused]] std::string& error_message)
{
    bool ret = true;

    // customData
    if (json.HasMember("customData"))
    {
    CustomDataTypeConverter customData_converter;
    ret = ret && customData_converter.fromJson(json["customData"], data.customData, error_code, error_message);
    }

    // relativeTimeInterval
    RelativeTimeIntervalTypeConverter relativeTimeInterval_converter;
    ret = ret && relativeTimeInterval_converter.fromJson(json["relativeTimeInterval"], data.relativeTimeInterval, error_code, error_message);

    // ePriceLevel
    extract(json, "ePriceLevel", data.ePriceLevel);

    // consumptionCost
    const rapidjson::Value& consumptionCost_json = json["consumptionCost"];
    ConsumptionCostTypeConverter consumptionCost_converter;
    for (auto it = consumptionCost_json.Begin(); ret && (it != consumptionCost_json.End()); ++it)
    {
        ConsumptionCostType& item = data.consumptionCost.emplace_back();
        ret = ret && consumptionCost_converter.fromJson(*it, item, error_code, error_message);
    }

    if (!ret)
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_TYPE_CONSTRAINT_VIOLATION;
    }

    return ret;
}

/** @brief Convert a SalesTariffEntryType to a JSON representation */
bool SalesTariffEntryTypeConverter::toJson(const SalesTariffEntryType& data, rapidjson::Document& json) 
{
    bool ret = true;

    // customData
    if (data.customData.isSet())
    {
    CustomDataTypeConverter customData_converter;
    customData_converter.setAllocator(allocator);
    rapidjson::Document customData_doc;
    customData_doc.Parse("{}");
    ret = ret && customData_converter.toJson(data.customData, customData_doc);
    json.AddMember(rapidjson::StringRef("customData"), customData_doc.Move(), *allocator);
    }

    // relativeTimeInterval
    RelativeTimeIntervalTypeConverter relativeTimeInterval_converter;
    relativeTimeInterval_converter.setAllocator(allocator);
    rapidjson::Document relativeTimeInterval_doc;
    relativeTimeInterval_doc.Parse("{}");
    ret = ret && relativeTimeInterval_converter.toJson(data.relativeTimeInterval, relativeTimeInterval_doc);
    json.AddMember(rapidjson::StringRef("relativeTimeInterval"), relativeTimeInterval_doc.Move(), *allocator);

    // ePriceLevel
    fill(json, "ePriceLevel", data.ePriceLevel);

    // consumptionCost
    if (!data.consumptionCost.empty())
    {
        rapidjson::Value consumptionCost_json(rapidjson::kArrayType);
        ConsumptionCostTypeConverter consumptionCost_converter;
        consumptionCost_converter.setAllocator(allocator);
        for (const ConsumptionCostType& item : data.consumptionCost)
        {
            rapidjson::Document item_doc;
            item_doc.Parse("{}");
            ret = ret && consumptionCost_converter.toJson(item, item_doc);
            consumptionCost_json.PushBack(item_doc.Move(), *allocator);
        }
        json.AddMember(rapidjson::StringRef("consumptionCost"), consumptionCost_json.Move(), *allocator);
    }

    return ret;
}

} // namespace ocpp20
} // namespace types
} // namespace ocpp