/*
Copyright (c) 2020 Cedric Jimenez
This file is part of OpenOCPP.

OpenOCPP is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 2.1 of the License, or
(at your option) any later version.

OpenOCPP is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OpenOCPP. If not, see <http://www.gnu.org/licenses/>.
*/

/*
    Generated by json2cpp from : urn:OCPP:Cp:2:2020:3:RequestStartTransactionRequest
                                 OCPP 2.0.1 FINAL
*/

#ifndef OPENOCPP_ADDITIONALINFOTYPE_H
#define OPENOCPP_ADDITIONALINFOTYPE_H

#include "CustomDataType.h"

#include "Optional.h"
#include "CiStringType.h"
#include "IMessageConverter.h"

namespace ocpp
{
namespace types
{
namespace ocpp20
{

/** @brief Contains a case insensitive identifier to use for the authorization and the type of authorization to support multiple forms of identifiers.
 */
struct AdditionalInfoType
{
    /** @brief  */
    ocpp::types::Optional<CustomDataType> customData;
    /** @brief This field specifies the additional IdToken. */
    ocpp::types::CiStringType<36u> additionalIdToken;
    /** @brief This defines the type of the additionalIdToken. This is a custom type, so the implementation needs to be agreed upon by all involved parties. */
    ocpp::types::CiStringType<50u> type;
};

/** @brief Converter class for AdditionalInfoType type */
class AdditionalInfoTypeConverter : public ocpp::messages::IMessageConverter<AdditionalInfoType>
{
  public:
    /** @brief Clone the converter */
    ocpp::messages::IMessageConverter<AdditionalInfoType>* clone() const override { return new AdditionalInfoTypeConverter(); }

    /** @brief Convert a AdditionalInfoType from a JSON representation */
    bool fromJson(const rapidjson::Value&       json,
                  AdditionalInfoType&                data,
                  std::string&                  error_code,
                  [[maybe_unused]] std::string& error_message) override;

    /** @brief Convert a AdditionalInfoType to a JSON representation */
    bool toJson(const AdditionalInfoType& data, rapidjson::Document& json) override;
};

} // namespace ocpp20
} // namespace types
} // namespace ocpp

#endif // OPENOCPP_ADDITIONALINFOTYPE_H