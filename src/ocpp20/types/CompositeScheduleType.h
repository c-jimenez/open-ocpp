/*
Copyright (c) 2020 Cedric Jimenez
This file is part of OpenOCPP.

OpenOCPP is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 2.1 of the License, or
(at your option) any later version.

OpenOCPP is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OpenOCPP. If not, see <http://www.gnu.org/licenses/>.
*/

/*
    Generated by json2cpp from : urn:OCPP:Cp:2:2020:3:GetCompositeScheduleRequest
                                 OCPP 2.0.1 FINAL
*/

#ifndef OPENOCPP_COMPOSITESCHEDULETYPE_H
#define OPENOCPP_COMPOSITESCHEDULETYPE_H

#include "ChargingRateUnitEnumType.h"
#include "ChargingSchedulePeriodType.h"
#include "CustomDataType.h"

#include "DateTime.h"
#include "IMessageConverter.h"
#include "Optional.h"
#include <vector>

namespace ocpp
{
namespace types
{
namespace ocpp20
{

/** @brief Composite_ Schedule
urn:x-oca:ocpp:uid:2:233362
 */
struct CompositeScheduleType
{
    /** @brief  */
    ocpp::types::Optional<CustomDataType> customData;
    /** @brief  */
    std::vector<ChargingSchedulePeriodType> chargingSchedulePeriod;
    /** @brief The ID of the EVSE for which the
schedule is requested. When evseid=0, the
Charging Station calculated the expected
consumption for the grid connection. */
    int evseId;
    /** @brief Duration of the schedule in seconds. */
    int duration;
    /** @brief Composite_ Schedule. Start. Date_ Time
urn:x-oca:ocpp:uid:1:569456
Date and time at which the schedule becomes active. All time measurements within the schedule are relative to this timestamp. */
    ocpp::types::DateTime scheduleStart;
    /** @brief  */
    ChargingRateUnitEnumType chargingRateUnit;
};

/** @brief Converter class for CompositeScheduleType type */
class CompositeScheduleTypeConverter : public ocpp::messages::IMessageConverter<CompositeScheduleType>
{
  public:
    /** @brief Clone the converter */
    ocpp::messages::IMessageConverter<CompositeScheduleType>* clone() const override { return new CompositeScheduleTypeConverter(); }

    /** @brief Convert a CompositeScheduleType from a JSON representation */
    bool fromJson(const rapidjson::Value&       json,
                  CompositeScheduleType&        data,
                  std::string&                  error_code,
                  [[maybe_unused]] std::string& error_message) override;

    /** @brief Convert a CompositeScheduleType to a JSON representation */
    bool toJson(const CompositeScheduleType& data, rapidjson::Document& json) override;
};

} // namespace ocpp20
} // namespace types
} // namespace ocpp

#endif // OPENOCPP_COMPOSITESCHEDULETYPE_H