/*
Copyright (c) 2020 Cedric Jimenez
This file is part of OpenOCPP.

OpenOCPP is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 2.1 of the License, or
(at your option) any later version.

OpenOCPP is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OpenOCPP. If not, see <http://www.gnu.org/licenses/>.
*/

/*
    Generated by json2cpp from : urn:OCPP:Cp:2:2020:3:SetVariableMonitoringRequest
                                 OCPP 2.0.1 FINAL
*/

#ifndef OPENOCPP_SETMONITORINGRESULTTYPE_H
#define OPENOCPP_SETMONITORINGRESULTTYPE_H

#include "ComponentType.h"
#include "CustomDataType.h"
#include "MonitorEnumType.h"
#include "SetMonitoringStatusEnumType.h"
#include "StatusInfoType.h"
#include "VariableType.h"

#include "IMessageConverter.h"
#include "Optional.h"

namespace ocpp
{
namespace types
{
namespace ocpp20
{

/** @brief Class to hold result of SetVariableMonitoring request.
 */
struct SetMonitoringResultType
{
    /** @brief  */
    ocpp::types::Optional<CustomDataType> customData;
    /** @brief Id given to the VariableMonitor by the Charging Station. The Id is only returned when status is accepted. Installed VariableMonitors should have unique id's but the id's of removed Installed monitors should have unique id's but the id's of removed monitors MAY be reused. */
    ocpp::types::Optional<int> id;
    /** @brief  */
    ocpp::types::Optional<StatusInfoType> statusInfo;
    /** @brief  */
    SetMonitoringStatusEnumType status;
    /** @brief  */
    MonitorEnumType type;
    /** @brief  */
    ComponentType component;
    /** @brief  */
    VariableType variable;
    /** @brief The severity that will be assigned to an event that is triggered by this monitor. The severity range is 0-9, with 0 as the highest and 9 as the lowest severity level.

The severity levels have the following meaning: +
*0-Danger* +
Indicates lives are potentially in danger. Urgent attention is needed and action should be taken immediately. +
*1-Hardware Failure* +
Indicates that the Charging Station is unable to continue regular operations due to Hardware issues. Action is required. +
*2-System Failure* +
Indicates that the Charging Station is unable to continue regular operations due to software or minor hardware issues. Action is required. +
*3-Critical* +
Indicates a critical error. Action is required. +
*4-Error* +
Indicates a non-urgent error. Action is required. +
*5-Alert* +
Indicates an alert event. Default severity for any type of monitoring event.  +
*6-Warning* +
Indicates a warning event. Action may be required. +
*7-Notice* +
Indicates an unusual event. No immediate action is required. +
*8-Informational* +
Indicates a regular operational event. May be used for reporting, measuring throughput, etc. No action is required. +
*9-Debug* +
Indicates information useful to developers for debugging, not useful during operations. */
    int severity;
};

/** @brief Converter class for SetMonitoringResultType type */
class SetMonitoringResultTypeConverter : public ocpp::messages::IMessageConverter<SetMonitoringResultType>
{
  public:
    /** @brief Clone the converter */
    ocpp::messages::IMessageConverter<SetMonitoringResultType>* clone() const override { return new SetMonitoringResultTypeConverter(); }

    /** @brief Convert a SetMonitoringResultType from a JSON representation */
    bool fromJson(const rapidjson::Value&       json,
                  SetMonitoringResultType&      data,
                  std::string&                  error_code,
                  [[maybe_unused]] std::string& error_message) override;

    /** @brief Convert a SetMonitoringResultType to a JSON representation */
    bool toJson(const SetMonitoringResultType& data, rapidjson::Document& json) override;
};

} // namespace ocpp20
} // namespace types
} // namespace ocpp

#endif // OPENOCPP_SETMONITORINGRESULTTYPE_H