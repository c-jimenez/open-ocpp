/*
Copyright (c) 2020 Cedric Jimenez
This file is part of OpenOCPP.

OpenOCPP is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 2.1 of the License, or
(at your option) any later version.

OpenOCPP is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OpenOCPP. If not, see <http://www.gnu.org/licenses/>.
*/

/*
    Generated by json2cpp from : urn:OCPP:Cp:2:2020:3:GetVariablesRequest
                                 OCPP 2.0.1 FINAL
*/

#ifndef OPENOCPP_GETVARIABLEDATATYPE_H
#define OPENOCPP_GETVARIABLEDATATYPE_H

#include "AttributeEnumType.h"
#include "ComponentType.h"
#include "CustomDataType.h"
#include "VariableType.h"

#include "IMessageConverter.h"
#include "Optional.h"

namespace ocpp
{
namespace types
{
namespace ocpp20
{

/** @brief Class to hold parameters for GetVariables request.
 */
struct GetVariableDataType
{
    /** @brief  */
    ocpp::types::Optional<CustomDataType> customData;
    /** @brief  */
    ocpp::types::Optional<AttributeEnumType> attributeType;
    /** @brief  */
    ComponentType component;
    /** @brief  */
    VariableType variable;
};

/** @brief Converter class for GetVariableDataType type */
class GetVariableDataTypeConverter : public ocpp::messages::IMessageConverter<GetVariableDataType>
{
  public:
    /** @brief Clone the converter */
    ocpp::messages::IMessageConverter<GetVariableDataType>* clone() const override { return new GetVariableDataTypeConverter(); }

    /** @brief Convert a GetVariableDataType from a JSON representation */
    bool fromJson(const rapidjson::Value&       json,
                  GetVariableDataType&          data,
                  std::string&                  error_code,
                  [[maybe_unused]] std::string& error_message) override;

    /** @brief Convert a GetVariableDataType to a JSON representation */
    bool toJson(const GetVariableDataType& data, rapidjson::Document& json) override;
};

} // namespace ocpp20
} // namespace types
} // namespace ocpp

#endif // OPENOCPP_GETVARIABLEDATATYPE_H