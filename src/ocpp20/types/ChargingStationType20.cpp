/*
Copyright (c) 2020 Cedric Jimenez
This file is part of OpenOCPP.

OpenOCPP is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 2.1 of the License, or
(at your option) any later version.

OpenOCPP is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OpenOCPP. If not, see <http://www.gnu.org/licenses/>.
*/

/*
    Generated by json2cpp from : urn:OCPP:Cp:2:2020:3:BootNotificationRequest
                                 OCPP 2.0.1 FINAL
*/

#include "ChargingStationType20.h"

#include "IRpc.h"

namespace ocpp
{
namespace types
{
namespace ocpp20
{

/** @brief Convert a ChargingStationType from a JSON representation */
bool ChargingStationTypeConverter::fromJson(const rapidjson::Value&       json,
                                            ChargingStationType&          data,
                                            std::string&                  error_code,
                                            [[maybe_unused]] std::string& error_message)
{
    bool ret = true;

    // customData
    if (json.HasMember("customData"))
    {
        CustomDataTypeConverter customData_converter;
        ret = ret && customData_converter.fromJson(json["customData"], data.customData, error_code, error_message);
    }

    // serialNumber
    extract(json, "serialNumber", data.serialNumber);

    // model
    extract(json, "model", data.model);

    // modem
    if (json.HasMember("modem"))
    {
        ModemTypeConverter modem_converter;
        ret = ret && modem_converter.fromJson(json["modem"], data.modem, error_code, error_message);
    }

    // vendorName
    extract(json, "vendorName", data.vendorName);

    // firmwareVersion
    extract(json, "firmwareVersion", data.firmwareVersion);

    if (!ret)
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_TYPE_CONSTRAINT_VIOLATION;
    }

    return ret;
}

/** @brief Convert a ChargingStationType to a JSON representation */
bool ChargingStationTypeConverter::toJson(const ChargingStationType& data, rapidjson::Document& json)
{
    bool ret = true;

    // customData
    if (data.customData.isSet())
    {
        CustomDataTypeConverter customData_converter;
        customData_converter.setAllocator(allocator);
        rapidjson::Document customData_doc(rapidjson::kObjectType);
        ret = ret && customData_converter.toJson(data.customData, customData_doc);
        json.AddMember(rapidjson::StringRef("customData"), customData_doc.Move(), *allocator);
    }

    // serialNumber
    fill(json, "serialNumber", data.serialNumber);

    // model
    fill(json, "model", data.model);

    // modem
    if (data.modem.isSet())
    {
        ModemTypeConverter modem_converter;
        modem_converter.setAllocator(allocator);
        rapidjson::Document modem_doc(rapidjson::kObjectType);
        ret = ret && modem_converter.toJson(data.modem, modem_doc);
        json.AddMember(rapidjson::StringRef("modem"), modem_doc.Move(), *allocator);
    }

    // vendorName
    fill(json, "vendorName", data.vendorName);

    // firmwareVersion
    fill(json, "firmwareVersion", data.firmwareVersion);

    return ret;
}

} // namespace ocpp20
} // namespace types
} // namespace ocpp