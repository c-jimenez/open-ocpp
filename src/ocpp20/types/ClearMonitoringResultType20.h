/*
Copyright (c) 2020 Cedric Jimenez
This file is part of OpenOCPP.

OpenOCPP is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 2.1 of the License, or
(at your option) any later version.

OpenOCPP is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OpenOCPP. If not, see <http://www.gnu.org/licenses/>.
*/

/*
    Generated by json2cpp from : urn:OCPP:Cp:2:2020:3:ClearVariableMonitoringRequest
                                 OCPP 2.0.1 FINAL
*/

#ifndef OPENOCPP_CLEARMONITORINGRESULTTYPE20_H
#define OPENOCPP_CLEARMONITORINGRESULTTYPE20_H

#include "ClearMonitoringStatusEnumType20.h"
#include "CustomDataType20.h"
#include "StatusInfoType20.h"

#include "IMessageConverter.h"
#include "Optional.h"

namespace ocpp
{
namespace types
{
namespace ocpp20
{

/** @brief  */
struct ClearMonitoringResultType20
{
    /** @brief  */
    ocpp::types::Optional<CustomDataType20> customData;
    /** @brief  */
    ClearMonitoringStatusEnumType20 status;
    /** @brief Id of the monitor of which a clear was requested. */
    int id;
    /** @brief  */
    ocpp::types::Optional<StatusInfoType20> statusInfo;
};

/** @brief Converter class for ClearMonitoringResultType20 type */
class ClearMonitoringResultType20Converter : public ocpp::messages::IMessageConverter<ClearMonitoringResultType20>
{
  public:
    /** @brief Clone the converter */
    ocpp::messages::IMessageConverter<ClearMonitoringResultType20>* clone() const override
    {
        return new ClearMonitoringResultType20Converter();
    }

    /** @brief Convert a ClearMonitoringResultType20 from a JSON representation */
    bool fromJson(const rapidjson::Value&       json,
                  ClearMonitoringResultType20&  data,
                  std::string&                  error_code,
                  [[maybe_unused]] std::string& error_message) override;

    /** @brief Convert a ClearMonitoringResultType20 to a JSON representation */
    bool toJson(const ClearMonitoringResultType20& data, rapidjson::Document& json) override;
};

} // namespace ocpp20
} // namespace types
} // namespace ocpp

#endif // OPENOCPP_CLEARMONITORINGRESULTTYPE20_H