/*
Copyright (c) 2020 Cedric Jimenez
This file is part of OpenOCPP.

OpenOCPP is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 2.1 of the License, or
(at your option) any later version.

OpenOCPP is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OpenOCPP. If not, see <http://www.gnu.org/licenses/>.
*/

/*
    Generated by json2cpp from : urn:OCPP:Cp:2:2020:3:ClearChargingProfileRequest
                                 OCPP 2.0.1 FINAL
*/

#ifndef OPENOCPP_OCPP20_CLEARCHARGINGPROFILETYPE_H
#define OPENOCPP_OCPP20_CLEARCHARGINGPROFILETYPE_H

#include "ChargingProfilePurposeEnumType20.h"
#include "CustomDataType20.h"

#include "IMessageConverter.h"
#include "Optional.h"

namespace ocpp
{
namespace types
{
namespace ocpp20
{

/** @brief Charging_ Profile
urn:x-oca:ocpp:uid:2:233255
A ChargingProfile consists of a ChargingSchedule, describing the amount of power or current that can be delivered per time interval.
 */
struct ClearChargingProfileType
{
    /** @brief  */
    ocpp::types::Optional<CustomDataType> customData;
    /** @brief Identified_ Object. MRID. Numeric_ Identifier
urn:x-enexis:ecdm:uid:1:569198
Specifies the id of the EVSE for which to clear charging profiles. An evseId of zero (0) specifies the charging profile for the overall Charging Station. Absence of this parameter means the clearing applies to all charging profiles that match the other criteria in the request. */
    ocpp::types::Optional<int> evseId;
    /** @brief  */
    ocpp::types::Optional<ChargingProfilePurposeEnumType> chargingProfilePurpose;
    /** @brief Charging_ Profile. Stack_ Level. Counter
urn:x-oca:ocpp:uid:1:569230
Specifies the stackLevel for which charging profiles will be cleared, if they meet the other criteria in the request. */
    ocpp::types::Optional<int> stackLevel;
};

/** @brief Converter class for ClearChargingProfileType type */
class ClearChargingProfileTypeConverter : public ocpp::messages::IMessageConverter<ClearChargingProfileType>
{
  public:
    /** @brief Clone the converter */
    ocpp::messages::IMessageConverter<ClearChargingProfileType>* clone() const override { return new ClearChargingProfileTypeConverter(); }

    /** @brief Convert a ClearChargingProfileType from a JSON representation */
    bool fromJson(const rapidjson::Value&       json,
                  ClearChargingProfileType&     data,
                  std::string&                  error_code,
                  [[maybe_unused]] std::string& error_message) override;

    /** @brief Convert a ClearChargingProfileType to a JSON representation */
    bool toJson(const ClearChargingProfileType& data, rapidjson::Document& json) override;
};

} // namespace ocpp20
} // namespace types
} // namespace ocpp

#endif // OPENOCPP_OCPP20_CLEARCHARGINGPROFILETYPE_H