/*
Copyright (c) 2020 Cedric Jimenez
This file is part of OpenOCPP.

OpenOCPP is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 2.1 of the License, or
(at your option) any later version.

OpenOCPP is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OpenOCPP. If not, see <http://www.gnu.org/licenses/>.
*/

/*
    Generated by json2cpp from : urn:OCPP:Cp:2:2020:3:NotifyChargingLimitRequest
                                 OCPP 2.0.1 FINAL
*/

#ifndef OPENOCPP_CHARGINGLIMITTYPE20_H
#define OPENOCPP_CHARGINGLIMITTYPE20_H

#include "ChargingLimitSourceEnumType20.h"
#include "CustomDataType20.h"

#include "IMessageConverter.h"
#include "Optional.h"

namespace ocpp
{
namespace types
{
namespace ocpp20
{

/** @brief Charging_ Limit
urn:x-enexis:ecdm:uid:2:234489
 */
struct ChargingLimitType20
{
    /** @brief  */
    ocpp::types::Optional<CustomDataType20> customData;
    /** @brief  */
    ChargingLimitSourceEnumType20 chargingLimitSource;
    /** @brief Charging_ Limit. Is_ Grid_ Critical. Indicator
urn:x-enexis:ecdm:uid:1:570847
Indicates whether the charging limit is critical for the grid. */
    ocpp::types::Optional<bool> isGridCritical;
};

/** @brief Converter class for ChargingLimitType20 type */
class ChargingLimitType20Converter : public ocpp::messages::IMessageConverter<ChargingLimitType20>
{
  public:
    /** @brief Clone the converter */
    ocpp::messages::IMessageConverter<ChargingLimitType20>* clone() const override { return new ChargingLimitType20Converter(); }

    /** @brief Convert a ChargingLimitType20 from a JSON representation */
    bool fromJson(const rapidjson::Value&       json,
                  ChargingLimitType20&          data,
                  std::string&                  error_code,
                  [[maybe_unused]] std::string& error_message) override;

    /** @brief Convert a ChargingLimitType20 to a JSON representation */
    bool toJson(const ChargingLimitType20& data, rapidjson::Document& json) override;
};

} // namespace ocpp20
} // namespace types
} // namespace ocpp

#endif // OPENOCPP_CHARGINGLIMITTYPE20_H