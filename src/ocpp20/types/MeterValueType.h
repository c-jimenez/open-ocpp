/*
Copyright (c) 2020 Cedric Jimenez
This file is part of OpenOCPP.

OpenOCPP is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 2.1 of the License, or
(at your option) any later version.

OpenOCPP is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OpenOCPP. If not, see <http://www.gnu.org/licenses/>.
*/

/*
    Generated by json2cpp from : urn:OCPP:Cp:2:2020:3:MeterValuesRequest
                                 OCPP 2.0.1 FINAL
*/

#ifndef OPENOCPP_METERVALUETYPE_H
#define OPENOCPP_METERVALUETYPE_H

#include "CustomDataType.h"
#include "SampledValueType.h"

#include "DateTime.h"
#include "IMessageConverter.h"
#include "Optional.h"
#include <vector>

namespace ocpp
{
namespace types
{
namespace ocpp20
{

/** @brief Meter_ Value
urn:x-oca:ocpp:uid:2:233265
Collection of one or more sampled values in MeterValuesRequest and TransactionEvent. All sampled values in a MeterValue are sampled at the same point in time.
 */
struct MeterValueType
{
    /** @brief  */
    ocpp::types::Optional<CustomDataType> customData;
    /** @brief  */
    std::vector<SampledValueType> sampledValue;
    /** @brief Meter_ Value. Timestamp. Date_ Time
urn:x-oca:ocpp:uid:1:569259
Timestamp for measured value(s). */
    ocpp::types::DateTime timestamp;
};

/** @brief Converter class for MeterValueType type */
class MeterValueTypeConverter : public ocpp::messages::IMessageConverter<MeterValueType>
{
  public:
    /** @brief Clone the converter */
    ocpp::messages::IMessageConverter<MeterValueType>* clone() const override { return new MeterValueTypeConverter(); }

    /** @brief Convert a MeterValueType from a JSON representation */
    bool fromJson(const rapidjson::Value&       json,
                  MeterValueType&               data,
                  std::string&                  error_code,
                  [[maybe_unused]] std::string& error_message) override;

    /** @brief Convert a MeterValueType to a JSON representation */
    bool toJson(const MeterValueType& data, rapidjson::Document& json) override;
};

} // namespace ocpp20
} // namespace types
} // namespace ocpp

#endif // OPENOCPP_METERVALUETYPE_H