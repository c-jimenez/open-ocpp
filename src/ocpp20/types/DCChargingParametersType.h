/*
Copyright (c) 2020 Cedric Jimenez
This file is part of OpenOCPP.

OpenOCPP is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 2.1 of the License, or
(at your option) any later version.

OpenOCPP is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OpenOCPP. If not, see <http://www.gnu.org/licenses/>.
*/

/*
    Generated by json2cpp from : urn:OCPP:Cp:2:2020:3:NotifyEVChargingNeedsRequest
                                 OCPP 2.0.1 FINAL
*/

#ifndef OPENOCPP_DCCHARGINGPARAMETERSTYPE_H
#define OPENOCPP_DCCHARGINGPARAMETERSTYPE_H

#include "CustomDataType.h"

#include "IMessageConverter.h"
#include "Optional.h"

namespace ocpp
{
namespace types
{
namespace ocpp20
{

/** @brief DC_ Charging_ Parameters
urn:x-oca:ocpp:uid:2:233251
EV DC charging parameters


 */
struct DCChargingParametersType
{
    /** @brief  */
    ocpp::types::Optional<CustomDataType> customData;
    /** @brief DC_ Charging_ Parameters. EV_ Max. Current
urn:x-oca:ocpp:uid:1:569215
Maximum current (amps) supported by the electric vehicle. Includes cable capacity. */
    int evMaxCurrent;
    /** @brief DC_ Charging_ Parameters. EV_ Max. Voltage
urn:x-oca:ocpp:uid:1:569216
Maximum voltage supported by the electric vehicle */
    int evMaxVoltage;
    /** @brief DC_ Charging_ Parameters. Energy_ Amount. Energy_ Amount
urn:x-oca:ocpp:uid:1:569217
Amount of energy requested (in Wh). This inludes energy required for preconditioning. */
    ocpp::types::Optional<int> energyAmount;
    /** @brief DC_ Charging_ Parameters. EV_ Max. Power
urn:x-oca:ocpp:uid:1:569218
Maximum power (in W) supported by the electric vehicle. Required for DC charging. */
    ocpp::types::Optional<int> evMaxPower;
    /** @brief DC_ Charging_ Parameters. State_ Of_ Charge. Numeric
urn:x-oca:ocpp:uid:1:569219
Energy available in the battery (in percent of the battery capacity) */
    ocpp::types::Optional<int> stateOfCharge;
    /** @brief DC_ Charging_ Parameters. EV_ Energy_ Capacity. Numeric
urn:x-oca:ocpp:uid:1:569220
Capacity of the electric vehicle battery (in Wh) */
    ocpp::types::Optional<int> evEnergyCapacity;
    /** @brief DC_ Charging_ Parameters. Full_ SOC. Percentage
urn:x-oca:ocpp:uid:1:569221
Percentage of SoC at which the EV considers the battery fully charged. (possible values: 0 - 100) */
    ocpp::types::Optional<int> fullSoC;
    /** @brief DC_ Charging_ Parameters. Bulk_ SOC. Percentage
urn:x-oca:ocpp:uid:1:569222
Percentage of SoC at which the EV considers a fast charging process to end. (possible values: 0 - 100) */
    ocpp::types::Optional<int> bulkSoC;
};

/** @brief Converter class for DCChargingParametersType type */
class DCChargingParametersTypeConverter : public ocpp::messages::IMessageConverter<DCChargingParametersType>
{
  public:
    /** @brief Clone the converter */
    ocpp::messages::IMessageConverter<DCChargingParametersType>* clone() const override { return new DCChargingParametersTypeConverter(); }

    /** @brief Convert a DCChargingParametersType from a JSON representation */
    bool fromJson(const rapidjson::Value&       json,
                  DCChargingParametersType&     data,
                  std::string&                  error_code,
                  [[maybe_unused]] std::string& error_message) override;

    /** @brief Convert a DCChargingParametersType to a JSON representation */
    bool toJson(const DCChargingParametersType& data, rapidjson::Document& json) override;
};

} // namespace ocpp20
} // namespace types
} // namespace ocpp

#endif // OPENOCPP_DCCHARGINGPARAMETERSTYPE_H