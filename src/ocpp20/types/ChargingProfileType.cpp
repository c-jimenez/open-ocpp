/*
Copyright (c) 2020 Cedric Jimenez
This file is part of OpenOCPP.

OpenOCPP is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 2.1 of the License, or
(at your option) any later version.

OpenOCPP is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OpenOCPP. If not, see <http://www.gnu.org/licenses/>.
*/

/*
    Generated by json2cpp from : urn:OCPP:Cp:2:2020:3:RequestStartTransactionRequest
                                 OCPP 2.0.1 FINAL
*/

#include "ChargingProfileType.h"

#include "IRpc.h"

namespace ocpp
{
namespace types
{
namespace ocpp20
{

/** @brief Convert a ChargingProfileType from a JSON representation */
bool ChargingProfileTypeConverter::fromJson(const rapidjson::Value&       json,
                                            ChargingProfileType&          data,
                                            std::string&                  error_code,
                                            [[maybe_unused]] std::string& error_message)
{
    bool ret = true;

    // customData
    if (json.HasMember("customData"))
    {
        CustomDataTypeConverter customData_converter;
        ret = ret && customData_converter.fromJson(json["customData"], data.customData, error_code, error_message);
    }

    // id
    extract(json, "id", data.id);

    // stackLevel
    extract(json, "stackLevel", data.stackLevel);

    // chargingProfilePurpose
    data.chargingProfilePurpose = ChargingProfilePurposeEnumTypeHelper.fromString(json["chargingProfilePurpose"].GetString());

    // chargingProfileKind
    data.chargingProfileKind = ChargingProfileKindEnumTypeHelper.fromString(json["chargingProfileKind"].GetString());

    // recurrencyKind
    if (json.HasMember("recurrencyKind"))
    {
        data.recurrencyKind = RecurrencyKindEnumTypeHelper.fromString(json["recurrencyKind"].GetString());
    }

    // validFrom
    ret = ret && extract(json, "validFrom", data.validFrom, error_message);

    // validTo
    ret = ret && extract(json, "validTo", data.validTo, error_message);

    // chargingSchedule
    const rapidjson::Value&       chargingSchedule_json = json["chargingSchedule"];
    ChargingScheduleTypeConverter chargingSchedule_converter;
    for (auto it = chargingSchedule_json.Begin(); ret && (it != chargingSchedule_json.End()); ++it)
    {
        ChargingScheduleType& item = data.chargingSchedule.emplace_back();
        ret                        = ret && chargingSchedule_converter.fromJson(*it, item, error_code, error_message);
    }

    // transactionId
    extract(json, "transactionId", data.transactionId);

    if (!ret)
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_TYPE_CONSTRAINT_VIOLATION;
    }

    return ret;
}

/** @brief Convert a ChargingProfileType to a JSON representation */
bool ChargingProfileTypeConverter::toJson(const ChargingProfileType& data, rapidjson::Document& json)
{
    bool ret = true;

    // customData
    if (data.customData.isSet())
    {
        CustomDataTypeConverter customData_converter;
        customData_converter.setAllocator(allocator);
        rapidjson::Document customData_doc;
        customData_doc.Parse("{}");
        ret = ret && customData_converter.toJson(data.customData, customData_doc);
        json.AddMember(rapidjson::StringRef("customData"), customData_doc.Move(), *allocator);
    }

    // id
    fill(json, "id", data.id);

    // stackLevel
    fill(json, "stackLevel", data.stackLevel);

    // chargingProfilePurpose
    fill(json, "chargingProfilePurpose", ChargingProfilePurposeEnumTypeHelper.toString(data.chargingProfilePurpose));

    // chargingProfileKind
    fill(json, "chargingProfileKind", ChargingProfileKindEnumTypeHelper.toString(data.chargingProfileKind));

    // recurrencyKind
    if (data.recurrencyKind.isSet())
    {
        fill(json, "recurrencyKind", RecurrencyKindEnumTypeHelper.toString(data.recurrencyKind));
    }

    // validFrom
    fill(json, "validFrom", data.validFrom);

    // validTo
    fill(json, "validTo", data.validTo);

    // chargingSchedule
    if (!data.chargingSchedule.empty())
    {
        rapidjson::Value              chargingSchedule_json(rapidjson::kArrayType);
        ChargingScheduleTypeConverter chargingSchedule_converter;
        chargingSchedule_converter.setAllocator(allocator);
        for (const ChargingScheduleType& item : data.chargingSchedule)
        {
            rapidjson::Document item_doc;
            item_doc.Parse("{}");
            ret = ret && chargingSchedule_converter.toJson(item, item_doc);
            chargingSchedule_json.PushBack(item_doc.Move(), *allocator);
        }
        json.AddMember(rapidjson::StringRef("chargingSchedule"), chargingSchedule_json.Move(), *allocator);
    }

    // transactionId
    fill(json, "transactionId", data.transactionId);

    return ret;
}

} // namespace ocpp20
} // namespace types
} // namespace ocpp