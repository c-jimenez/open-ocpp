/*
Copyright (c) 2020 Cedric Jimenez
This file is part of OpenOCPP.

OpenOCPP is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 2.1 of the License, or
(at your option) any later version.

OpenOCPP is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OpenOCPP. If not, see <http://www.gnu.org/licenses/>.
*/

/*
    Generated by json2cpp from : urn:OCPP:Cp:2:2020:3:RequestStartTransactionRequest
                                 OCPP 2.0.1 FINAL
*/

#include "ChargingScheduleType20.h"

#include "IRpc.h"

namespace ocpp
{
namespace types
{
namespace ocpp20
{

/** @brief Convert a ChargingScheduleType from a JSON representation */
bool ChargingScheduleTypeConverter::fromJson(const rapidjson::Value&       json,
                                             ChargingScheduleType&         data,
                                             std::string&                  error_code,
                                             [[maybe_unused]] std::string& error_message)
{
    bool ret = true;

    // customData
    if (json.HasMember("customData"))
    {
        CustomDataTypeConverter customData_converter;
        ret = ret && customData_converter.fromJson(json["customData"], data.customData, error_code, error_message);
    }

    // id
    extract(json, "id", data.id);

    // startSchedule
    ret = ret && extract(json, "startSchedule", data.startSchedule, error_message);

    // duration
    extract(json, "duration", data.duration);

    // chargingRateUnit
    data.chargingRateUnit = ChargingRateUnitEnumTypeHelper.fromString(json["chargingRateUnit"].GetString());

    // chargingSchedulePeriod
    if (json.HasMember("chargingSchedulePeriod"))
    {
        const rapidjson::Value&             chargingSchedulePeriod_json = json["chargingSchedulePeriod"];
        ChargingSchedulePeriodTypeConverter chargingSchedulePeriod_converter;
        for (auto it = chargingSchedulePeriod_json.Begin(); ret && (it != chargingSchedulePeriod_json.End()); ++it)
        {
            ChargingSchedulePeriodType& item = data.chargingSchedulePeriod.emplace_back();
            ret                              = ret && chargingSchedulePeriod_converter.fromJson(*it, item, error_code, error_message);
        }
    }

    // minChargingRate
    extract(json, "minChargingRate", data.minChargingRate);

    // salesTariff
    if (json.HasMember("salesTariff"))
    {
        SalesTariffTypeConverter salesTariff_converter;
        ret = ret && salesTariff_converter.fromJson(json["salesTariff"], data.salesTariff, error_code, error_message);
    }

    if (!ret)
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_TYPE_CONSTRAINT_VIOLATION;
    }

    return ret;
}

/** @brief Convert a ChargingScheduleType to a JSON representation */
bool ChargingScheduleTypeConverter::toJson(const ChargingScheduleType& data, rapidjson::Document& json)
{
    bool ret = true;

    // customData
    if (data.customData.isSet())
    {
        CustomDataTypeConverter customData_converter;
        customData_converter.setAllocator(allocator);
        rapidjson::Document customData_doc(rapidjson::kObjectType);
        ret = ret && customData_converter.toJson(data.customData, customData_doc);
        json.AddMember(rapidjson::StringRef("customData"), customData_doc.Move(), *allocator);
    }

    // id
    fill(json, "id", data.id);

    // startSchedule
    fill(json, "startSchedule", data.startSchedule);

    // duration
    fill(json, "duration", data.duration);

    // chargingRateUnit
    fill(json, "chargingRateUnit", ChargingRateUnitEnumTypeHelper.toString(data.chargingRateUnit));

    // chargingSchedulePeriod

    rapidjson::Value                    chargingSchedulePeriod_json(rapidjson::kArrayType);
    ChargingSchedulePeriodTypeConverter chargingSchedulePeriod_converter;
    chargingSchedulePeriod_converter.setAllocator(allocator);
    for (const ChargingSchedulePeriodType& item : data.chargingSchedulePeriod)
    {
        rapidjson::Document item_doc(rapidjson::kObjectType);
        ret = ret && chargingSchedulePeriod_converter.toJson(item, item_doc);
        chargingSchedulePeriod_json.PushBack(item_doc.Move(), *allocator);
    }
    json.AddMember(rapidjson::StringRef("chargingSchedulePeriod"), chargingSchedulePeriod_json.Move(), *allocator);

    // minChargingRate
    fill(json, "minChargingRate", data.minChargingRate);

    // salesTariff
    if (data.salesTariff.isSet())
    {
        SalesTariffTypeConverter salesTariff_converter;
        salesTariff_converter.setAllocator(allocator);
        rapidjson::Document salesTariff_doc(rapidjson::kObjectType);
        ret = ret && salesTariff_converter.toJson(data.salesTariff, salesTariff_doc);
        json.AddMember(rapidjson::StringRef("salesTariff"), salesTariff_doc.Move(), *allocator);
    }

    return ret;
}

} // namespace ocpp20
} // namespace types
} // namespace ocpp