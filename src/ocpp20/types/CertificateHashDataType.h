/*
Copyright (c) 2020 Cedric Jimenez
This file is part of OpenOCPP.

OpenOCPP is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 2.1 of the License, or
(at your option) any later version.

OpenOCPP is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OpenOCPP. If not, see <http://www.gnu.org/licenses/>.
*/

/*
    Generated by json2cpp from : urn:OCPP:Cp:2:2020:3:GetInstalledCertificateIdsRequest
                                 OCPP 2.0.1 FINAL
*/

#ifndef OPENOCPP_CERTIFICATEHASHDATATYPE_H
#define OPENOCPP_CERTIFICATEHASHDATATYPE_H

#include "CustomDataType.h"
#include "HashAlgorithmEnumType.h"

#include "CiStringType.h"
#include "IMessageConverter.h"
#include "Optional.h"

namespace ocpp
{
namespace types
{
namespace ocpp20
{

/** @brief  */
struct CertificateHashDataType
{
    /** @brief  */
    ocpp::types::Optional<CustomDataType> customData;
    /** @brief  */
    HashAlgorithmEnumType hashAlgorithm;
    /** @brief Hashed value of the Issuer DN (Distinguished Name). */
    ocpp::types::CiStringType<128u> issuerNameHash;
    /** @brief Hashed value of the issuers public key */
    ocpp::types::CiStringType<128u> issuerKeyHash;
    /** @brief The serial number of the certificate. */
    ocpp::types::CiStringType<40u> serialNumber;
};

/** @brief Converter class for CertificateHashDataType type */
class CertificateHashDataTypeConverter : public ocpp::messages::IMessageConverter<CertificateHashDataType>
{
  public:
    /** @brief Clone the converter */
    ocpp::messages::IMessageConverter<CertificateHashDataType>* clone() const override { return new CertificateHashDataTypeConverter(); }

    /** @brief Convert a CertificateHashDataType from a JSON representation */
    bool fromJson(const rapidjson::Value&       json,
                  CertificateHashDataType&      data,
                  std::string&                  error_code,
                  [[maybe_unused]] std::string& error_message) override;

    /** @brief Convert a CertificateHashDataType to a JSON representation */
    bool toJson(const CertificateHashDataType& data, rapidjson::Document& json) override;
};

} // namespace ocpp20
} // namespace types
} // namespace ocpp

#endif // OPENOCPP_CERTIFICATEHASHDATATYPE_H