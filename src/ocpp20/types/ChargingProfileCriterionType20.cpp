/*
Copyright (c) 2020 Cedric Jimenez
This file is part of OpenOCPP.

OpenOCPP is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 2.1 of the License, or
(at your option) any later version.

OpenOCPP is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OpenOCPP. If not, see <http://www.gnu.org/licenses/>.
*/

/*
    Generated by json2cpp from : urn:OCPP:Cp:2:2020:3:GetChargingProfilesRequest
                                 OCPP 2.0.1 FINAL
*/

#include "ChargingProfileCriterionType20.h"

#include "IRpc.h"

namespace ocpp
{
namespace types
{
namespace ocpp20
{

/** @brief Convert a ChargingProfileCriterionType from a JSON representation */
bool ChargingProfileCriterionTypeConverter::fromJson(const rapidjson::Value&       json,
                                                     ChargingProfileCriterionType& data,
                                                     std::string&                  error_code,
                                                     [[maybe_unused]] std::string& error_message)
{
    bool ret = true;

    // customData
    if (json.HasMember("customData"))
    {
        CustomDataTypeConverter customData_converter;
        ret = ret && customData_converter.fromJson(json["customData"], data.customData, error_code, error_message);
    }

    // chargingProfilePurpose
    if (json.HasMember("chargingProfilePurpose"))
    {
        data.chargingProfilePurpose = ChargingProfilePurposeEnumTypeHelper.fromString(json["chargingProfilePurpose"].GetString());
    }

    // stackLevel
    extract(json, "stackLevel", data.stackLevel);

    // chargingProfileId
    if (json.HasMember("chargingProfileId"))
    {
        const rapidjson::Value& chargingProfileId_json = json["chargingProfileId"];
        for (auto it = chargingProfileId_json.Begin(); ret && (it != chargingProfileId_json.End()); ++it)
        {
            int& item = data.chargingProfileId.emplace_back();
            item      = it->GetInt();
        }
    }

    // chargingLimitSource
    if (json.HasMember("chargingLimitSource"))
    {
        const rapidjson::Value& chargingLimitSource_json = json["chargingLimitSource"];
        for (auto it = chargingLimitSource_json.Begin(); ret && (it != chargingLimitSource_json.End()); ++it)
        {
            ChargingLimitSourceEnumType& item = data.chargingLimitSource.emplace_back();
            item                              = ChargingLimitSourceEnumTypeHelper.fromString(it->GetString());
        }
    }

    if (!ret)
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_TYPE_CONSTRAINT_VIOLATION;
    }

    return ret;
}

/** @brief Convert a ChargingProfileCriterionType to a JSON representation */
bool ChargingProfileCriterionTypeConverter::toJson(const ChargingProfileCriterionType& data, rapidjson::Document& json)
{
    bool ret = true;

    // customData
    if (data.customData.isSet())
    {
        CustomDataTypeConverter customData_converter;
        customData_converter.setAllocator(allocator);
        rapidjson::Document customData_doc;
        customData_doc.Parse("{}");
        ret = ret && customData_converter.toJson(data.customData, customData_doc);
        json.AddMember(rapidjson::StringRef("customData"), customData_doc.Move(), *allocator);
    }

    // chargingProfilePurpose
    if (data.chargingProfilePurpose.isSet())
    {
        fill(json, "chargingProfilePurpose", ChargingProfilePurposeEnumTypeHelper.toString(data.chargingProfilePurpose));
    }

    // stackLevel
    fill(json, "stackLevel", data.stackLevel);

    // chargingProfileId
    if (!data.chargingProfileId.empty())
    {

        rapidjson::Value chargingProfileId_json(rapidjson::kArrayType);
        for (const int& item : data.chargingProfileId)
        {
            chargingProfileId_json.PushBack(rapidjson::Value(item), *allocator);
        }
        json.AddMember(rapidjson::StringRef("chargingProfileId"), chargingProfileId_json.Move(), *allocator);
    }

    // chargingLimitSource
    if (!data.chargingLimitSource.empty())
    {

        rapidjson::Value chargingLimitSource_json(rapidjson::kArrayType);
        for (const ChargingLimitSourceEnumType& item : data.chargingLimitSource)
        {
            chargingLimitSource_json.PushBack(rapidjson::Value(ChargingLimitSourceEnumTypeHelper.toString(item).c_str(), *allocator).Move(),
                                              *allocator);
        }
        json.AddMember(rapidjson::StringRef("chargingLimitSource"), chargingLimitSource_json.Move(), *allocator);
    }

    return ret;
}

} // namespace ocpp20
} // namespace types
} // namespace ocpp