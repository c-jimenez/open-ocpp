/*
Copyright (c) 2020 Cedric Jimenez
This file is part of OpenOCPP.

OpenOCPP is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 2.1 of the License, or
(at your option) any later version.

OpenOCPP is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OpenOCPP. If not, see <http://www.gnu.org/licenses/>.
*/

/*
    Generated by json2cpp from : urn:OCPP:Cp:2:2020:3:RequestStartTransactionRequest
                                 OCPP 2.0.1 FINAL
*/

#ifndef OPENOCPP_CHARGINGPROFILETYPE20_H
#define OPENOCPP_CHARGINGPROFILETYPE20_H

#include "ChargingProfileKindEnumType20.h"
#include "ChargingProfilePurposeEnumType20.h"
#include "ChargingScheduleType20.h"
#include "CustomDataType20.h"
#include "RecurrencyKindEnumType20.h"

#include "CiStringType.h"
#include "DateTime.h"
#include "IMessageConverter.h"
#include "Optional.h"
#include <vector>

namespace ocpp
{
namespace types
{
namespace ocpp20
{

/** @brief Charging_ Profile
urn:x-oca:ocpp:uid:2:233255
A ChargingProfile consists of ChargingSchedule, describing the amount of power or current that can be delivered per time interval.
 */
struct ChargingProfileType20
{
    /** @brief  */
    ocpp::types::Optional<CustomDataType20> customData;
    /** @brief Identified_ Object. MRID. Numeric_ Identifier
urn:x-enexis:ecdm:uid:1:569198
Id of ChargingProfile. */
    int id;
    /** @brief Charging_ Profile. Stack_ Level. Counter
urn:x-oca:ocpp:uid:1:569230
Value determining level in hierarchy stack of profiles. Higher values have precedence over lower values. Lowest level is 0. */
    int stackLevel;
    /** @brief  */
    ChargingProfilePurposeEnumType20 chargingProfilePurpose;
    /** @brief  */
    ChargingProfileKindEnumType20 chargingProfileKind;
    /** @brief  */
    ocpp::types::Optional<RecurrencyKindEnumType20> recurrencyKind;
    /** @brief Charging_ Profile. Valid_ From. Date_ Time
urn:x-oca:ocpp:uid:1:569234
Point in time at which the profile starts to be valid. If absent, the profile is valid as soon as it is received by the Charging Station. */
    ocpp::types::Optional<ocpp::types::DateTime> validFrom;
    /** @brief Charging_ Profile. Valid_ To. Date_ Time
urn:x-oca:ocpp:uid:1:569235
Point in time at which the profile stops to be valid. If absent, the profile is valid until it is replaced by another profile. */
    ocpp::types::Optional<ocpp::types::DateTime> validTo;
    /** @brief  */
    std::vector<ChargingScheduleType20> chargingSchedule;
    /** @brief SHALL only be included if ChargingProfilePurpose is set to TxProfile. The transactionId is used to match the profile to a specific transaction. */
    ocpp::types::Optional<ocpp::types::CiStringType<36u>> transactionId;
};

/** @brief Converter class for ChargingProfileType20 type */
class ChargingProfileType20Converter : public ocpp::messages::IMessageConverter<ChargingProfileType20>
{
  public:
    /** @brief Clone the converter */
    ocpp::messages::IMessageConverter<ChargingProfileType20>* clone() const override { return new ChargingProfileType20Converter(); }

    /** @brief Convert a ChargingProfileType20 from a JSON representation */
    bool fromJson(const rapidjson::Value&       json,
                  ChargingProfileType20&        data,
                  std::string&                  error_code,
                  [[maybe_unused]] std::string& error_message) override;

    /** @brief Convert a ChargingProfileType20 to a JSON representation */
    bool toJson(const ChargingProfileType20& data, rapidjson::Document& json) override;
};

} // namespace ocpp20
} // namespace types
} // namespace ocpp

#endif // OPENOCPP_CHARGINGPROFILETYPE20_H