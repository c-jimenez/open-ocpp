/*
Copyright (c) 2020 Cedric Jimenez
This file is part of OpenOCPP.

OpenOCPP is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 2.1 of the License, or
(at your option) any later version.

OpenOCPP is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OpenOCPP. If not, see <http://www.gnu.org/licenses/>.
*/

/*
    Generated by json2cpp from : urn:OCPP:Cp:2:2020:3:RequestStartTransactionRequest
                                 OCPP 2.0.1 FINAL
*/

#include "IdTokenType20.h"

#include "IRpc.h"

namespace ocpp
{
namespace types
{
namespace ocpp20
{

/** @brief Convert a IdTokenType from a JSON representation */
bool IdTokenTypeConverter::fromJson(const rapidjson::Value&       json,
                                    IdTokenType&                  data,
                                    std::string&                  error_code,
                                    [[maybe_unused]] std::string& error_message)
{
    bool ret = true;

    // customData
    if (json.HasMember("customData"))
    {
        CustomDataTypeConverter customData_converter;
        ret = ret && customData_converter.fromJson(json["customData"], data.customData, error_code, error_message);
    }

    // additionalInfo
    if (json.HasMember("additionalInfo"))
    {
        const rapidjson::Value&     additionalInfo_json = json["additionalInfo"];
        AdditionalInfoTypeConverter additionalInfo_converter;
        for (auto it = additionalInfo_json.Begin(); ret && (it != additionalInfo_json.End()); ++it)
        {
            AdditionalInfoType& item = data.additionalInfo.emplace_back();
            ret                      = ret && additionalInfo_converter.fromJson(*it, item, error_code, error_message);
        }
    }

    // idToken
    extract(json, "idToken", data.idToken);

    // type
    data.type = IdTokenEnumTypeHelper.fromString(json["type"].GetString());

    if (!ret)
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_TYPE_CONSTRAINT_VIOLATION;
    }

    return ret;
}

/** @brief Convert a IdTokenType to a JSON representation */
bool IdTokenTypeConverter::toJson(const IdTokenType& data, rapidjson::Document& json)
{
    bool ret = true;

    // customData
    if (data.customData.isSet())
    {
        CustomDataTypeConverter customData_converter;
        customData_converter.setAllocator(allocator);
        rapidjson::Document customData_doc;
        customData_doc.Parse("{}");
        ret = ret && customData_converter.toJson(data.customData, customData_doc);
        json.AddMember(rapidjson::StringRef("customData"), customData_doc.Move(), *allocator);
    }

    // additionalInfo
    if (!data.additionalInfo.empty())
    {

        rapidjson::Value            additionalInfo_json(rapidjson::kArrayType);
        AdditionalInfoTypeConverter additionalInfo_converter;
        additionalInfo_converter.setAllocator(allocator);
        for (const AdditionalInfoType& item : data.additionalInfo)
        {
            rapidjson::Document item_doc;
            item_doc.Parse("{}");
            ret = ret && additionalInfo_converter.toJson(item, item_doc);
            additionalInfo_json.PushBack(item_doc.Move(), *allocator);
        }
        json.AddMember(rapidjson::StringRef("additionalInfo"), additionalInfo_json.Move(), *allocator);
    }

    // idToken
    fill(json, "idToken", data.idToken);

    // type
    fill(json, "type", IdTokenEnumTypeHelper.toString(data.type));

    return ret;
}

} // namespace ocpp20
} // namespace types
} // namespace ocpp