/*
Copyright (c) 2020 Cedric Jimenez
This file is part of OpenOCPP.

OpenOCPP is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 2.1 of the License, or
(at your option) any later version.

OpenOCPP is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OpenOCPP. If not, see <http://www.gnu.org/licenses/>.
*/

/*
    Generated by json2cpp from : urn:OCPP:Cp:2:2020:3:MeterValuesRequest
                                 OCPP 2.0.1 FINAL
*/

#ifndef OPENOCPP_SAMPLEDVALUETYPE_H
#define OPENOCPP_SAMPLEDVALUETYPE_H

#include "CustomDataType.h"
#include "ReadingContextEnumType.h"
#include "MeasurandEnumType.h"
#include "PhaseEnumType.h"
#include "LocationEnumType.h"
#include "SignedMeterValueType.h"
#include "UnitOfMeasureType.h"

#include "Optional.h"
#include "IMessageConverter.h"

namespace ocpp
{
namespace types
{
namespace ocpp20
{

/** @brief Sampled_ Value
urn:x-oca:ocpp:uid:2:233266
Single sampled value in MeterValues. Each value can be accompanied by optional fields.

To save on mobile data usage, default values of all of the optional fields are such that. The value without any additional fields will be interpreted, as a register reading of active import energy in Wh (Watt-hour) units.
 */
struct SampledValueType
{
    /** @brief  */
    ocpp::types::Optional<CustomDataType> customData;
    /** @brief Sampled_ Value. Value. Measure
urn:x-oca:ocpp:uid:1:569260
Indicates the measured value. */
    float value;
    /** @brief  */
    ocpp::types::Optional<ReadingContextEnumType> context;
    /** @brief  */
    ocpp::types::Optional<MeasurandEnumType> measurand;
    /** @brief  */
    ocpp::types::Optional<PhaseEnumType> phase;
    /** @brief  */
    ocpp::types::Optional<LocationEnumType> location;
    /** @brief  */
    ocpp::types::Optional<SignedMeterValueType> signedMeterValue;
    /** @brief  */
    ocpp::types::Optional<UnitOfMeasureType> unitOfMeasure;
};

/** @brief Converter class for SampledValueType type */
class SampledValueTypeConverter : public ocpp::messages::IMessageConverter<SampledValueType>
{
  public:
    /** @brief Clone the converter */
    ocpp::messages::IMessageConverter<SampledValueType>* clone() const override { return new SampledValueTypeConverter(); }

    /** @brief Convert a SampledValueType from a JSON representation */
    bool fromJson(const rapidjson::Value&       json,
                  SampledValueType&                data,
                  std::string&                  error_code,
                  [[maybe_unused]] std::string& error_message) override;

    /** @brief Convert a SampledValueType to a JSON representation */
    bool toJson(const SampledValueType& data, rapidjson::Document& json) override;
};

} // namespace ocpp20
} // namespace types
} // namespace ocpp

#endif // OPENOCPP_SAMPLEDVALUETYPE_H