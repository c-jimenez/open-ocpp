/*
Copyright (c) 2020 Cedric Jimenez
This file is part of OpenOCPP.

OpenOCPP is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 2.1 of the License, or
(at your option) any later version.

OpenOCPP is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OpenOCPP. If not, see <http://www.gnu.org/licenses/>.
*/

/*
    Generated by json2cpp from : urn:OCPP:Cp:2:2020:3:NotifyMonitoringReportRequest
                                 OCPP 2.0.1 FINAL
*/

#include "MonitoringDataType20.h"

#include "IRpc.h"

namespace ocpp
{
namespace types
{
namespace ocpp20
{

/** @brief Convert a MonitoringDataType20 from a JSON representation */
bool MonitoringDataType20Converter::fromJson(const rapidjson::Value&       json,
                                             MonitoringDataType20&         data,
                                             std::string&                  error_code,
                                             [[maybe_unused]] std::string& error_message)
{
    bool ret = true;

    // customData
    if (json.HasMember("customData"))
    {
        CustomDataType20Converter customData_converter;
        ret = ret && customData_converter.fromJson(json["customData"], data.customData, error_code, error_message);
    }

    // component
    ComponentType20Converter component_converter;
    ret = ret && component_converter.fromJson(json["component"], data.component, error_code, error_message);

    // variable
    VariableType20Converter variable_converter;
    ret = ret && variable_converter.fromJson(json["variable"], data.variable, error_code, error_message);

    // variableMonitoring
    const rapidjson::Value&           variableMonitoring_json = json["variableMonitoring"];
    VariableMonitoringType20Converter variableMonitoring_converter;
    for (auto it = variableMonitoring_json.Begin(); ret && (it != variableMonitoring_json.End()); ++it)
    {
        VariableMonitoringType20& item = data.variableMonitoring.emplace_back();
        ret                            = ret && variableMonitoring_converter.fromJson(*it, item, error_code, error_message);
    }

    if (!ret)
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_TYPE_CONSTRAINT_VIOLATION;
    }

    return ret;
}

/** @brief Convert a MonitoringDataType20 to a JSON representation */
bool MonitoringDataType20Converter::toJson(const MonitoringDataType20& data, rapidjson::Document& json)
{
    bool ret = true;

    // customData
    if (data.customData.isSet())
    {
        CustomDataType20Converter customData_converter;
        customData_converter.setAllocator(allocator);
        rapidjson::Document customData_doc;
        customData_doc.Parse("{}");
        ret = ret && customData_converter.toJson(data.customData, customData_doc);
        json.AddMember(rapidjson::StringRef("customData"), customData_doc.Move(), *allocator);
    }

    // component
    ComponentType20Converter component_converter;
    component_converter.setAllocator(allocator);
    rapidjson::Document component_doc;
    component_doc.Parse("{}");
    ret = ret && component_converter.toJson(data.component, component_doc);
    json.AddMember(rapidjson::StringRef("component"), component_doc.Move(), *allocator);

    // variable
    VariableType20Converter variable_converter;
    variable_converter.setAllocator(allocator);
    rapidjson::Document variable_doc;
    variable_doc.Parse("{}");
    ret = ret && variable_converter.toJson(data.variable, variable_doc);
    json.AddMember(rapidjson::StringRef("variable"), variable_doc.Move(), *allocator);

    // variableMonitoring
    if (!data.variableMonitoring.empty())
    {
        rapidjson::Value                  variableMonitoring_json(rapidjson::kArrayType);
        VariableMonitoringType20Converter variableMonitoring_converter;
        variableMonitoring_converter.setAllocator(allocator);
        for (const VariableMonitoringType20& item : data.variableMonitoring)
        {
            rapidjson::Document item_doc;
            item_doc.Parse("{}");
            ret = ret && variableMonitoring_converter.toJson(item, item_doc);
            variableMonitoring_json.PushBack(item_doc.Move(), *allocator);
        }
        json.AddMember(rapidjson::StringRef("variableMonitoring"), variableMonitoring_json.Move(), *allocator);
    }

    return ret;
}

} // namespace ocpp20
} // namespace types
} // namespace ocpp