/*
Copyright (c) 2020 Cedric Jimenez
This file is part of OpenOCPP.

OpenOCPP is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 2.1 of the License, or
(at your option) any later version.

OpenOCPP is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OpenOCPP. If not, see <http://www.gnu.org/licenses/>.
*/

/*
    Generated by json2cpp from : urn:OCPP:Cp:2:2020:3:NotifyEventRequest
                                 OCPP 2.0.1 FINAL
*/

#include "EventDataType.h"

#include "IRpc.h"

namespace ocpp
{
namespace types
{
namespace ocpp20
{

/** @brief Convert a EventDataType from a JSON representation */
bool EventDataTypeConverter::fromJson(const rapidjson::Value&       json,
                                      EventDataType&                data,
                                      std::string&                  error_code,
                                      [[maybe_unused]] std::string& error_message)
{
    bool ret = true;

    // customData
    if (json.HasMember("customData"))
    {
        CustomDataTypeConverter customData_converter;
        ret = ret && customData_converter.fromJson(json["customData"], data.customData, error_code, error_message);
    }

    // eventId
    extract(json, "eventId", data.eventId);

    // timestamp
    ret = ret && extract(json, "timestamp", data.timestamp, error_message);

    // trigger
    data.trigger = EventTriggerEnumTypeHelper.fromString(json["trigger"].GetString());

    // cause
    extract(json, "cause", data.cause);

    // actualValue
    extract(json, "actualValue", data.actualValue);

    // techCode
    extract(json, "techCode", data.techCode);

    // techInfo
    extract(json, "techInfo", data.techInfo);

    // cleared
    extract(json, "cleared", data.cleared);

    // transactionId
    extract(json, "transactionId", data.transactionId);

    // component
    ComponentTypeConverter component_converter;
    ret = ret && component_converter.fromJson(json["component"], data.component, error_code, error_message);

    // variableMonitoringId
    extract(json, "variableMonitoringId", data.variableMonitoringId);

    // eventNotificationType
    data.eventNotificationType = EventNotificationEnumTypeHelper.fromString(json["eventNotificationType"].GetString());

    // variable
    VariableTypeConverter variable_converter;
    ret = ret && variable_converter.fromJson(json["variable"], data.variable, error_code, error_message);

    if (!ret)
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_TYPE_CONSTRAINT_VIOLATION;
    }

    return ret;
}

/** @brief Convert a EventDataType to a JSON representation */
bool EventDataTypeConverter::toJson(const EventDataType& data, rapidjson::Document& json)
{
    bool ret = true;

    // customData
    if (data.customData.isSet())
    {
        CustomDataTypeConverter customData_converter;
        customData_converter.setAllocator(allocator);
        rapidjson::Document customData_doc;
        customData_doc.Parse("{}");
        ret = ret && customData_converter.toJson(data.customData, customData_doc);
        json.AddMember(rapidjson::StringRef("customData"), customData_doc.Move(), *allocator);
    }

    // eventId
    fill(json, "eventId", data.eventId);

    // timestamp
    fill(json, "timestamp", data.timestamp);

    // trigger
    fill(json, "trigger", EventTriggerEnumTypeHelper.toString(data.trigger));

    // cause
    fill(json, "cause", data.cause);

    // actualValue
    fill(json, "actualValue", data.actualValue);

    // techCode
    fill(json, "techCode", data.techCode);

    // techInfo
    fill(json, "techInfo", data.techInfo);

    // cleared
    fill(json, "cleared", data.cleared);

    // transactionId
    fill(json, "transactionId", data.transactionId);

    // component
    ComponentTypeConverter component_converter;
    component_converter.setAllocator(allocator);
    rapidjson::Document component_doc;
    component_doc.Parse("{}");
    ret = ret && component_converter.toJson(data.component, component_doc);
    json.AddMember(rapidjson::StringRef("component"), component_doc.Move(), *allocator);

    // variableMonitoringId
    fill(json, "variableMonitoringId", data.variableMonitoringId);

    // eventNotificationType
    fill(json, "eventNotificationType", EventNotificationEnumTypeHelper.toString(data.eventNotificationType));

    // variable
    VariableTypeConverter variable_converter;
    variable_converter.setAllocator(allocator);
    rapidjson::Document variable_doc;
    variable_doc.Parse("{}");
    ret = ret && variable_converter.toJson(data.variable, variable_doc);
    json.AddMember(rapidjson::StringRef("variable"), variable_doc.Move(), *allocator);

    return ret;
}

} // namespace ocpp20
} // namespace types
} // namespace ocpp