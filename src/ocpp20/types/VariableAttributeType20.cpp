/*
Copyright (c) 2020 Cedric Jimenez
This file is part of OpenOCPP.

OpenOCPP is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 2.1 of the License, or
(at your option) any later version.

OpenOCPP is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OpenOCPP. If not, see <http://www.gnu.org/licenses/>.
*/

/*
    Generated by json2cpp from : urn:OCPP:Cp:2:2020:3:NotifyReportRequest
                                 OCPP 2.0.1 FINAL
*/

#include "VariableAttributeType20.h"

#include "IRpc.h"

namespace ocpp
{
namespace types
{
namespace ocpp20
{

/** @brief Convert a VariableAttributeType20 from a JSON representation */
bool VariableAttributeType20Converter::fromJson(const rapidjson::Value&       json,
                                                VariableAttributeType20&      data,
                                                std::string&                  error_code,
                                                [[maybe_unused]] std::string& error_message)
{
    bool ret = true;

    // customData
    if (json.HasMember("customData"))
    {
        CustomDataType20Converter customData_converter;
        ret = ret && customData_converter.fromJson(json["customData"], data.customData, error_code, error_message);
    }

    // type
    if (json.HasMember("type"))
    {
        data.type = AttributeEnumType20Helper.fromString(json["type"].GetString());
    }

    // value
    extract(json, "value", data.value);

    // mutability
    if (json.HasMember("mutability"))
    {
        data.mutability = MutabilityEnumType20Helper.fromString(json["mutability"].GetString());
    }

    // persistent
    extract(json, "persistent", data.persistent);

    // constant
    extract(json, "constant", data.constant);

    if (!ret)
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_TYPE_CONSTRAINT_VIOLATION;
    }

    return ret;
}

/** @brief Convert a VariableAttributeType20 to a JSON representation */
bool VariableAttributeType20Converter::toJson(const VariableAttributeType20& data, rapidjson::Document& json)
{
    bool ret = true;

    // customData
    if (data.customData.isSet())
    {
        CustomDataType20Converter customData_converter;
        customData_converter.setAllocator(allocator);
        rapidjson::Document customData_doc;
        customData_doc.Parse("{}");
        ret = ret && customData_converter.toJson(data.customData, customData_doc);
        json.AddMember(rapidjson::StringRef("customData"), customData_doc.Move(), *allocator);
    }

    // type
    if (data.type.isSet())
    {
        fill(json, "type", AttributeEnumType20Helper.toString(data.type));
    }

    // value
    fill(json, "value", data.value);

    // mutability
    if (data.mutability.isSet())
    {
        fill(json, "mutability", MutabilityEnumType20Helper.toString(data.mutability));
    }

    // persistent
    fill(json, "persistent", data.persistent);

    // constant
    fill(json, "constant", data.constant);

    return ret;
}

} // namespace ocpp20
} // namespace types
} // namespace ocpp