/*
Copyright (c) 2020 Cedric Jimenez
This file is part of OpenOCPP.

OpenOCPP is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 2.1 of the License, or
(at your option) any later version.

OpenOCPP is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OpenOCPP. If not, see <http://www.gnu.org/licenses/>.
*/

/*
    Generated by json2cpp from : urn:OCPP:Cp:2:2020:3:GetInstalledCertificateIdsRequest
                                 OCPP 2.0.1 FINAL
*/

#include "CertificateHashDataChainType20.h"

#include "IRpc.h"

namespace ocpp
{
namespace types
{
namespace ocpp20
{

/** @brief Convert a CertificateHashDataChainType20 from a JSON representation */
bool CertificateHashDataChainType20Converter::fromJson(const rapidjson::Value&         json,
                                                       CertificateHashDataChainType20& data,
                                                       std::string&                    error_code,
                                                       [[maybe_unused]] std::string&   error_message)
{
    bool ret = true;

    // customData
    if (json.HasMember("customData"))
    {
        CustomDataType20Converter customData_converter;
        ret = ret && customData_converter.fromJson(json["customData"], data.customData, error_code, error_message);
    }

    // certificateHashData
    CertificateHashDataType20Converter certificateHashData_converter;
    ret = ret && certificateHashData_converter.fromJson(json["certificateHashData"], data.certificateHashData, error_code, error_message);

    // certificateType
    data.certificateType = GetCertificateIdUseEnumType20Helper.fromString(json["certificateType"].GetString());

    // childCertificateHashData
    const rapidjson::Value&            childCertificateHashData_json = json["childCertificateHashData"];
    CertificateHashDataType20Converter childCertificateHashData_converter;
    for (auto it = childCertificateHashData_json.Begin(); ret && (it != childCertificateHashData_json.End()); ++it)
    {
        CertificateHashDataType20& item = data.childCertificateHashData.emplace_back();
        ret                             = ret && childCertificateHashData_converter.fromJson(*it, item, error_code, error_message);
    }

    if (!ret)
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_TYPE_CONSTRAINT_VIOLATION;
    }

    return ret;
}

/** @brief Convert a CertificateHashDataChainType20 to a JSON representation */
bool CertificateHashDataChainType20Converter::toJson(const CertificateHashDataChainType20& data, rapidjson::Document& json)
{
    bool ret = true;

    // customData
    if (data.customData.isSet())
    {
        CustomDataType20Converter customData_converter;
        customData_converter.setAllocator(allocator);
        rapidjson::Document customData_doc;
        customData_doc.Parse("{}");
        ret = ret && customData_converter.toJson(data.customData, customData_doc);
        json.AddMember(rapidjson::StringRef("customData"), customData_doc.Move(), *allocator);
    }

    // certificateHashData
    CertificateHashDataType20Converter certificateHashData_converter;
    certificateHashData_converter.setAllocator(allocator);
    rapidjson::Document certificateHashData_doc;
    certificateHashData_doc.Parse("{}");
    ret = ret && certificateHashData_converter.toJson(data.certificateHashData, certificateHashData_doc);
    json.AddMember(rapidjson::StringRef("certificateHashData"), certificateHashData_doc.Move(), *allocator);

    // certificateType
    fill(json, "certificateType", GetCertificateIdUseEnumType20Helper.toString(data.certificateType));

    // childCertificateHashData
    if (!data.childCertificateHashData.empty())
    {
        rapidjson::Value                   childCertificateHashData_json(rapidjson::kArrayType);
        CertificateHashDataType20Converter childCertificateHashData_converter;
        childCertificateHashData_converter.setAllocator(allocator);
        for (const CertificateHashDataType20& item : data.childCertificateHashData)
        {
            rapidjson::Document item_doc;
            item_doc.Parse("{}");
            ret = ret && childCertificateHashData_converter.toJson(item, item_doc);
            childCertificateHashData_json.PushBack(item_doc.Move(), *allocator);
        }
        json.AddMember(rapidjson::StringRef("childCertificateHashData"), childCertificateHashData_json.Move(), *allocator);
    }

    return ret;
}

} // namespace ocpp20
} // namespace types
} // namespace ocpp