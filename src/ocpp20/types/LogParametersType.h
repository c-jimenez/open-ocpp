/*
Copyright (c) 2020 Cedric Jimenez
This file is part of OpenOCPP.

OpenOCPP is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 2.1 of the License, or
(at your option) any later version.

OpenOCPP is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OpenOCPP. If not, see <http://www.gnu.org/licenses/>.
*/

/*
    Generated by json2cpp from : urn:OCPP:Cp:2:2020:3:GetLogRequest
                                 OCPP 2.0.1 FINAL
*/

#ifndef OPENOCPP_LOGPARAMETERSTYPE_H
#define OPENOCPP_LOGPARAMETERSTYPE_H

#include "CustomDataType.h"

#include "CiStringType.h"
#include "DateTime.h"
#include "IMessageConverter.h"
#include "Optional.h"

namespace ocpp
{
namespace types
{
namespace ocpp20
{

/** @brief Log
urn:x-enexis:ecdm:uid:2:233373
Generic class for the configuration of logging entries.
 */
struct LogParametersType
{
    /** @brief  */
    ocpp::types::Optional<CustomDataType> customData;
    /** @brief Log. Remote_ Location. URI
urn:x-enexis:ecdm:uid:1:569484
The URL of the location at the remote system where the log should be stored. */
    ocpp::types::CiStringType<512u> remoteLocation;
    /** @brief Log. Oldest_ Timestamp. Date_ Time
urn:x-enexis:ecdm:uid:1:569477
This contains the date and time of the oldest logging information to include in the diagnostics. */
    ocpp::types::Optional<ocpp::types::DateTime> oldestTimestamp;
    /** @brief Log. Latest_ Timestamp. Date_ Time
urn:x-enexis:ecdm:uid:1:569482
This contains the date and time of the latest logging information to include in the diagnostics. */
    ocpp::types::Optional<ocpp::types::DateTime> latestTimestamp;
};

/** @brief Converter class for LogParametersType type */
class LogParametersTypeConverter : public ocpp::messages::IMessageConverter<LogParametersType>
{
  public:
    /** @brief Clone the converter */
    ocpp::messages::IMessageConverter<LogParametersType>* clone() const override { return new LogParametersTypeConverter(); }

    /** @brief Convert a LogParametersType from a JSON representation */
    bool fromJson(const rapidjson::Value&       json,
                  LogParametersType&            data,
                  std::string&                  error_code,
                  [[maybe_unused]] std::string& error_message) override;

    /** @brief Convert a LogParametersType to a JSON representation */
    bool toJson(const LogParametersType& data, rapidjson::Document& json) override;
};

} // namespace ocpp20
} // namespace types
} // namespace ocpp

#endif // OPENOCPP_LOGPARAMETERSTYPE_H