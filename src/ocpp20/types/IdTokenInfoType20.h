/*
Copyright (c) 2020 Cedric Jimenez
This file is part of OpenOCPP.

OpenOCPP is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 2.1 of the License, or
(at your option) any later version.

OpenOCPP is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OpenOCPP. If not, see <http://www.gnu.org/licenses/>.
*/

/*
    Generated by json2cpp from : urn:OCPP:Cp:2:2020:3:AuthorizeRequest
                                 OCPP 2.0.1 FINAL
*/

#ifndef OPENOCPP_IDTOKENINFOTYPE20_H
#define OPENOCPP_IDTOKENINFOTYPE20_H

#include "AuthorizationStatusEnumType20.h"
#include "CustomDataType20.h"
#include "IdTokenType20.h"
#include "MessageContentType20.h"

#include "CiStringType.h"
#include "DateTime.h"
#include "IMessageConverter.h"
#include "Optional.h"
#include <vector>

namespace ocpp
{
namespace types
{
namespace ocpp20
{

/** @brief ID_ Token
urn:x-oca:ocpp:uid:2:233247
Contains status information about an identifier.
It is advised to not stop charging for a token that expires during charging, as ExpiryDate is only used for caching purposes. If ExpiryDate is not given, the status has no end date.
 */
struct IdTokenInfoType20
{
    /** @brief  */
    ocpp::types::Optional<CustomDataType20> customData;
    /** @brief  */
    AuthorizationStatusEnumType20 status;
    /** @brief ID_ Token. Expiry. Date_ Time
urn:x-oca:ocpp:uid:1:569373
Date and Time after which the token must be considered invalid. */
    ocpp::types::Optional<ocpp::types::DateTime> cacheExpiryDateTime;
    /** @brief Priority from a business point of view. Default priority is 0, The range is from -9 to 9. Higher values indicate a higher priority. The chargingPriority in &lt;&lt;transactioneventresponse,TransactionEventResponse&gt;&gt; overrules this one. */
    ocpp::types::Optional<int> chargingPriority;
    /** @brief ID_ Token. Language1. Language_ Code
urn:x-oca:ocpp:uid:1:569374
Preferred user interface language of identifier user. Contains a language code as defined in &lt;&lt;ref-RFC5646,[RFC5646]&gt;&gt;. */
    ocpp::types::Optional<ocpp::types::CiStringType<8u>> language1;
    /** @brief Only used when the IdToken is only valid for one or more specific EVSEs, not for the entire Charging Station. */
    std::vector<int> evseId;
    /** @brief  */
    ocpp::types::Optional<IdTokenType20> groupIdToken;
    /** @brief ID_ Token. Language2. Language_ Code
urn:x-oca:ocpp:uid:1:569375
Second preferred user interface language of identifier user. Donâ€™t use when language1 is omitted, has to be different from language1. Contains a language code as defined in &lt;&lt;ref-RFC5646,[RFC5646]&gt;&gt;. */
    ocpp::types::Optional<ocpp::types::CiStringType<8u>> language2;
    /** @brief  */
    ocpp::types::Optional<MessageContentType20> personalMessage;
};

/** @brief Converter class for IdTokenInfoType20 type */
class IdTokenInfoType20Converter : public ocpp::messages::IMessageConverter<IdTokenInfoType20>
{
  public:
    /** @brief Clone the converter */
    ocpp::messages::IMessageConverter<IdTokenInfoType20>* clone() const override { return new IdTokenInfoType20Converter(); }

    /** @brief Convert a IdTokenInfoType20 from a JSON representation */
    bool fromJson(const rapidjson::Value&       json,
                  IdTokenInfoType20&            data,
                  std::string&                  error_code,
                  [[maybe_unused]] std::string& error_message) override;

    /** @brief Convert a IdTokenInfoType20 to a JSON representation */
    bool toJson(const IdTokenInfoType20& data, rapidjson::Document& json) override;
};

} // namespace ocpp20
} // namespace types
} // namespace ocpp

#endif // OPENOCPP_IDTOKENINFOTYPE20_H