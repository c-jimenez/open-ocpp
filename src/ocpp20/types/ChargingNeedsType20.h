/*
Copyright (c) 2020 Cedric Jimenez
This file is part of OpenOCPP.

OpenOCPP is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 2.1 of the License, or
(at your option) any later version.

OpenOCPP is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OpenOCPP. If not, see <http://www.gnu.org/licenses/>.
*/

/*
    Generated by json2cpp from : urn:OCPP:Cp:2:2020:3:NotifyEVChargingNeedsRequest
                                 OCPP 2.0.1 FINAL
*/

#ifndef OPENOCPP_OCPP20_CHARGINGNEEDSTYPE_H
#define OPENOCPP_OCPP20_CHARGINGNEEDSTYPE_H

#include "ACChargingParametersType20.h"
#include "CustomDataType20.h"
#include "DCChargingParametersType20.h"
#include "EnergyTransferModeEnumType20.h"

#include "DateTime.h"
#include "IMessageConverter.h"
#include "Optional.h"

namespace ocpp
{
namespace types
{
namespace ocpp20
{

/** @brief Charging_ Needs
urn:x-oca:ocpp:uid:2:233249
 */
struct ChargingNeedsType
{
    /** @brief  */
    ocpp::types::Optional<CustomDataType> customData;
    /** @brief  */
    ocpp::types::Optional<ACChargingParametersType> acChargingParameters;
    /** @brief  */
    ocpp::types::Optional<DCChargingParametersType> dcChargingParameters;
    /** @brief  */
    EnergyTransferModeEnumType requestedEnergyTransfer;
    /** @brief Charging_ Needs. Departure_ Time. Date_ Time
urn:x-oca:ocpp:uid:1:569223
Estimated departure time of the EV. */
    ocpp::types::Optional<ocpp::types::DateTime> departureTime;
};

/** @brief Converter class for ChargingNeedsType type */
class ChargingNeedsTypeConverter : public ocpp::messages::IMessageConverter<ChargingNeedsType>
{
  public:
    /** @brief Clone the converter */
    ocpp::messages::IMessageConverter<ChargingNeedsType>* clone() const override { return new ChargingNeedsTypeConverter(); }

    /** @brief Convert a ChargingNeedsType from a JSON representation */
    bool fromJson(const rapidjson::Value&       json,
                  ChargingNeedsType&            data,
                  std::string&                  error_code,
                  [[maybe_unused]] std::string& error_message) override;

    /** @brief Convert a ChargingNeedsType to a JSON representation */
    bool toJson(const ChargingNeedsType& data, rapidjson::Document& json) override;
};

} // namespace ocpp20
} // namespace types
} // namespace ocpp

#endif // OPENOCPP_OCPP20_CHARGINGNEEDSTYPE_H