/*
Copyright (c) 2020 Cedric Jimenez
This file is part of OpenOCPP.

OpenOCPP is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 2.1 of the License, or
(at your option) any later version.

OpenOCPP is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OpenOCPP. If not, see <http://www.gnu.org/licenses/>.
*/

/*
    Generated by json2cpp from : urn:OCPP:Cp:2:2020:3:SetNetworkProfileRequest
                                 OCPP 2.0.1 FINAL
*/

#include "NetworkConnectionProfileType.h"

#include "IRpc.h"

namespace ocpp
{
namespace types
{
namespace ocpp20
{

/** @brief Convert a NetworkConnectionProfileType from a JSON representation */
bool NetworkConnectionProfileTypeConverter::fromJson(const rapidjson::Value&       json,
                                      NetworkConnectionProfileType&                data,
                                      std::string&                  error_code,
                                      [[maybe_unused]] std::string& error_message)
{
    bool ret = true;

    // customData
    if (json.HasMember("customData"))
    {
    CustomDataTypeConverter customData_converter;
    ret = ret && customData_converter.fromJson(json["customData"], data.customData, error_code, error_message);
    }

    // apn
    if (json.HasMember("apn"))
    {
    APNTypeConverter apn_converter;
    ret = ret && apn_converter.fromJson(json["apn"], data.apn, error_code, error_message);
    }

    // ocppVersion
    data.ocppVersion = OCPPVersionEnumTypeHelper.fromString(json["ocppVersion"].GetString());

    // ocppTransport
    data.ocppTransport = OCPPTransportEnumTypeHelper.fromString(json["ocppTransport"].GetString());

    // ocppCsmsUrl
    extract(json, "ocppCsmsUrl", data.ocppCsmsUrl);

    // messageTimeout
    extract(json, "messageTimeout", data.messageTimeout);

    // securityProfile
    extract(json, "securityProfile", data.securityProfile);

    // ocppInterface
    data.ocppInterface = OCPPInterfaceEnumTypeHelper.fromString(json["ocppInterface"].GetString());

    // vpn
    if (json.HasMember("vpn"))
    {
    VPNTypeConverter vpn_converter;
    ret = ret && vpn_converter.fromJson(json["vpn"], data.vpn, error_code, error_message);
    }

    if (!ret)
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_TYPE_CONSTRAINT_VIOLATION;
    }

    return ret;
}

/** @brief Convert a NetworkConnectionProfileType to a JSON representation */
bool NetworkConnectionProfileTypeConverter::toJson(const NetworkConnectionProfileType& data, rapidjson::Document& json) 
{
    bool ret = true;

    // customData
    if (data.customData.isSet())
    {
    CustomDataTypeConverter customData_converter;
    customData_converter.setAllocator(allocator);
    rapidjson::Document customData_doc;
    customData_doc.Parse("{}");
    ret = ret && customData_converter.toJson(data.customData, customData_doc);
    json.AddMember(rapidjson::StringRef("customData"), customData_doc.Move(), *allocator);
    }

    // apn
    if (data.apn.isSet())
    {
    APNTypeConverter apn_converter;
    apn_converter.setAllocator(allocator);
    rapidjson::Document apn_doc;
    apn_doc.Parse("{}");
    ret = ret && apn_converter.toJson(data.apn, apn_doc);
    json.AddMember(rapidjson::StringRef("apn"), apn_doc.Move(), *allocator);
    }

    // ocppVersion
    fill(json, "ocppVersion", OCPPVersionEnumTypeHelper.toString(data.ocppVersion));

    // ocppTransport
    fill(json, "ocppTransport", OCPPTransportEnumTypeHelper.toString(data.ocppTransport));

    // ocppCsmsUrl
    fill(json, "ocppCsmsUrl", data.ocppCsmsUrl);

    // messageTimeout
    fill(json, "messageTimeout", data.messageTimeout);

    // securityProfile
    fill(json, "securityProfile", data.securityProfile);

    // ocppInterface
    fill(json, "ocppInterface", OCPPInterfaceEnumTypeHelper.toString(data.ocppInterface));

    // vpn
    if (data.vpn.isSet())
    {
    VPNTypeConverter vpn_converter;
    vpn_converter.setAllocator(allocator);
    rapidjson::Document vpn_doc;
    vpn_doc.Parse("{}");
    ret = ret && vpn_converter.toJson(data.vpn, vpn_doc);
    json.AddMember(rapidjson::StringRef("vpn"), vpn_doc.Move(), *allocator);
    }

    return ret;
}

} // namespace ocpp20
} // namespace types
} // namespace ocpp