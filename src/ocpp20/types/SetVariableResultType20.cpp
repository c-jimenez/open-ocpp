/*
Copyright (c) 2020 Cedric Jimenez
This file is part of OpenOCPP.

OpenOCPP is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 2.1 of the License, or
(at your option) any later version.

OpenOCPP is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OpenOCPP. If not, see <http://www.gnu.org/licenses/>.
*/

/*
    Generated by json2cpp from : urn:OCPP:Cp:2:2020:3:SetVariablesRequest
                                 OCPP 2.0.1 FINAL
*/

#include "SetVariableResultType20.h"

#include "IRpc.h"

namespace ocpp
{
namespace types
{
namespace ocpp20
{

/** @brief Convert a SetVariableResultType from a JSON representation */
bool SetVariableResultTypeConverter::fromJson(const rapidjson::Value&       json,
                                              SetVariableResultType&        data,
                                              std::string&                  error_code,
                                              [[maybe_unused]] std::string& error_message)
{
    bool ret = true;

    // customData
    if (json.HasMember("customData"))
    {
        CustomDataTypeConverter customData_converter;
        ret = ret && customData_converter.fromJson(json["customData"], data.customData, error_code, error_message);
    }

    // attributeType
    if (json.HasMember("attributeType"))
    {
        data.attributeType = AttributeEnumTypeHelper.fromString(json["attributeType"].GetString());
    }

    // attributeStatus
    data.attributeStatus = SetVariableStatusEnumTypeHelper.fromString(json["attributeStatus"].GetString());

    // attributeStatusInfo
    if (json.HasMember("attributeStatusInfo"))
    {
        StatusInfoTypeConverter attributeStatusInfo_converter;
        ret =
            ret && attributeStatusInfo_converter.fromJson(json["attributeStatusInfo"], data.attributeStatusInfo, error_code, error_message);
    }

    // component
    ComponentTypeConverter component_converter;
    ret = ret && component_converter.fromJson(json["component"], data.component, error_code, error_message);

    // variable
    VariableTypeConverter variable_converter;
    ret = ret && variable_converter.fromJson(json["variable"], data.variable, error_code, error_message);

    if (!ret)
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_TYPE_CONSTRAINT_VIOLATION;
    }

    return ret;
}

/** @brief Convert a SetVariableResultType to a JSON representation */
bool SetVariableResultTypeConverter::toJson(const SetVariableResultType& data, rapidjson::Document& json)
{
    bool ret = true;

    // customData
    if (data.customData.isSet())
    {
        CustomDataTypeConverter customData_converter;
        customData_converter.setAllocator(allocator);
        rapidjson::Document customData_doc(rapidjson::kObjectType);
        ret = ret && customData_converter.toJson(data.customData, customData_doc);
        json.AddMember(rapidjson::StringRef("customData"), customData_doc.Move(), *allocator);
    }

    // attributeType
    if (data.attributeType.isSet())
    {
        fill(json, "attributeType", AttributeEnumTypeHelper.toString(data.attributeType));
    }

    // attributeStatus
    fill(json, "attributeStatus", SetVariableStatusEnumTypeHelper.toString(data.attributeStatus));

    // attributeStatusInfo
    if (data.attributeStatusInfo.isSet())
    {
        StatusInfoTypeConverter attributeStatusInfo_converter;
        attributeStatusInfo_converter.setAllocator(allocator);
        rapidjson::Document attributeStatusInfo_doc(rapidjson::kObjectType);
        ret = ret && attributeStatusInfo_converter.toJson(data.attributeStatusInfo, attributeStatusInfo_doc);
        json.AddMember(rapidjson::StringRef("attributeStatusInfo"), attributeStatusInfo_doc.Move(), *allocator);
    }

    // component
    ComponentTypeConverter component_converter;
    component_converter.setAllocator(allocator);
    rapidjson::Document component_doc(rapidjson::kObjectType);
    ret = ret && component_converter.toJson(data.component, component_doc);
    json.AddMember(rapidjson::StringRef("component"), component_doc.Move(), *allocator);

    // variable
    VariableTypeConverter variable_converter;
    variable_converter.setAllocator(allocator);
    rapidjson::Document variable_doc(rapidjson::kObjectType);
    ret = ret && variable_converter.toJson(data.variable, variable_doc);
    json.AddMember(rapidjson::StringRef("variable"), variable_doc.Move(), *allocator);

    return ret;
}

} // namespace ocpp20
} // namespace types
} // namespace ocpp