/*
Copyright (c) 2020 Cedric Jimenez
This file is part of OpenOCPP.

OpenOCPP is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 2.1 of the License, or
(at your option) any later version.

OpenOCPP is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OpenOCPP. If not, see <http://www.gnu.org/licenses/>.
*/

/*
    Generated by json2cpp from : urn:OCPP:Cp:2:2020:3:NotifyDisplayMessagesRequest
                                 OCPP 2.0.1 FINAL
*/

#include "MessageInfoType20.h"

#include "IRpc.h"

namespace ocpp
{
namespace types
{
namespace ocpp20
{

/** @brief Convert a MessageInfoType from a JSON representation */
bool MessageInfoTypeConverter::fromJson(const rapidjson::Value&       json,
                                        MessageInfoType&              data,
                                        std::string&                  error_code,
                                        [[maybe_unused]] std::string& error_message)
{
    bool ret = true;

    // customData
    if (json.HasMember("customData"))
    {
        CustomDataTypeConverter customData_converter;
        ret = ret && customData_converter.fromJson(json["customData"], data.customData, error_code, error_message);
    }

    // display
    if (json.HasMember("display"))
    {
        ComponentTypeConverter display_converter;
        ret = ret && display_converter.fromJson(json["display"], data.display, error_code, error_message);
    }

    // id
    extract(json, "id", data.id);

    // priority
    data.priority = MessagePriorityEnumTypeHelper.fromString(json["priority"].GetString());

    // state
    if (json.HasMember("state"))
    {
        data.state = MessageStateEnumTypeHelper.fromString(json["state"].GetString());
    }

    // startDateTime
    ret = ret && extract(json, "startDateTime", data.startDateTime, error_message);

    // endDateTime
    ret = ret && extract(json, "endDateTime", data.endDateTime, error_message);

    // transactionId
    extract(json, "transactionId", data.transactionId);

    // message
    MessageContentTypeConverter message_converter;
    ret = ret && message_converter.fromJson(json["message"], data.message, error_code, error_message);

    if (!ret)
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_TYPE_CONSTRAINT_VIOLATION;
    }

    return ret;
}

/** @brief Convert a MessageInfoType to a JSON representation */
bool MessageInfoTypeConverter::toJson(const MessageInfoType& data, rapidjson::Document& json)
{
    bool ret = true;

    // customData
    if (data.customData.isSet())
    {
        CustomDataTypeConverter customData_converter;
        customData_converter.setAllocator(allocator);
        rapidjson::Document customData_doc(rapidjson::kObjectType);
        ret = ret && customData_converter.toJson(data.customData, customData_doc);
        json.AddMember(rapidjson::StringRef("customData"), customData_doc.Move(), *allocator);
    }

    // display
    if (data.display.isSet())
    {
        ComponentTypeConverter display_converter;
        display_converter.setAllocator(allocator);
        rapidjson::Document display_doc(rapidjson::kObjectType);
        ret = ret && display_converter.toJson(data.display, display_doc);
        json.AddMember(rapidjson::StringRef("display"), display_doc.Move(), *allocator);
    }

    // id
    fill(json, "id", data.id);

    // priority
    fill(json, "priority", MessagePriorityEnumTypeHelper.toString(data.priority));

    // state
    if (data.state.isSet())
    {
        fill(json, "state", MessageStateEnumTypeHelper.toString(data.state));
    }

    // startDateTime
    fill(json, "startDateTime", data.startDateTime);

    // endDateTime
    fill(json, "endDateTime", data.endDateTime);

    // transactionId
    fill(json, "transactionId", data.transactionId);

    // message
    MessageContentTypeConverter message_converter;
    message_converter.setAllocator(allocator);
    rapidjson::Document message_doc(rapidjson::kObjectType);
    ret = ret && message_converter.toJson(data.message, message_doc);
    json.AddMember(rapidjson::StringRef("message"), message_doc.Move(), *allocator);

    return ret;
}

} // namespace ocpp20
} // namespace types
} // namespace ocpp