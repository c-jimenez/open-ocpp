/*
Copyright (c) 2020 Cedric Jimenez
This file is part of OpenOCPP.

OpenOCPP is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 2.1 of the License, or
(at your option) any later version.

OpenOCPP is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OpenOCPP. If not, see <http://www.gnu.org/licenses/>.
*/

/*
    Generated by json2cpp from : urn:OCPP:Cp:2:2020:3:NotifyDisplayMessagesRequest
                                 OCPP 2.0.1 FINAL
*/

#ifndef OPENOCPP_MESSAGEINFOTYPE_H
#define OPENOCPP_MESSAGEINFOTYPE_H

#include "ComponentType.h"
#include "CustomDataType.h"
#include "MessageContentType.h"
#include "MessagePriorityEnumType.h"
#include "MessageStateEnumType.h"

#include "CiStringType.h"
#include "DateTime.h"
#include "IMessageConverter.h"
#include "Optional.h"

namespace ocpp
{
namespace types
{
namespace ocpp20
{

/** @brief Message_ Info
urn:x-enexis:ecdm:uid:2:233264
Contains message details, for a message to be displayed on a Charging Station.
 */
struct MessageInfoType
{
    /** @brief  */
    ocpp::types::Optional<CustomDataType> customData;
    /** @brief  */
    ocpp::types::Optional<ComponentType> display;
    /** @brief Identified_ Object. MRID. Numeric_ Identifier
urn:x-enexis:ecdm:uid:1:569198
Master resource identifier, unique within an exchange context. It is defined within the OCPP context as a positive Integer value (greater or equal to zero). */
    int id;
    /** @brief  */
    MessagePriorityEnumType priority;
    /** @brief  */
    ocpp::types::Optional<MessageStateEnumType> state;
    /** @brief Message_ Info. Start. Date_ Time
urn:x-enexis:ecdm:uid:1:569256
From what date-time should this message be shown. If omitted: directly. */
    ocpp::types::Optional<ocpp::types::DateTime> startDateTime;
    /** @brief Message_ Info. End. Date_ Time
urn:x-enexis:ecdm:uid:1:569257
Until what date-time should this message be shown, after this date/time this message SHALL be removed. */
    ocpp::types::Optional<ocpp::types::DateTime> endDateTime;
    /** @brief During which transaction shall this message be shown.
Message SHALL be removed by the Charging Station after transaction has
ended. */
    ocpp::types::Optional<ocpp::types::CiStringType<36u>> transactionId;
    /** @brief  */
    MessageContentType message;
};

/** @brief Converter class for MessageInfoType type */
class MessageInfoTypeConverter : public ocpp::messages::IMessageConverter<MessageInfoType>
{
  public:
    /** @brief Clone the converter */
    ocpp::messages::IMessageConverter<MessageInfoType>* clone() const override { return new MessageInfoTypeConverter(); }

    /** @brief Convert a MessageInfoType from a JSON representation */
    bool fromJson(const rapidjson::Value&       json,
                  MessageInfoType&              data,
                  std::string&                  error_code,
                  [[maybe_unused]] std::string& error_message) override;

    /** @brief Convert a MessageInfoType to a JSON representation */
    bool toJson(const MessageInfoType& data, rapidjson::Document& json) override;
};

} // namespace ocpp20
} // namespace types
} // namespace ocpp

#endif // OPENOCPP_MESSAGEINFOTYPE_H