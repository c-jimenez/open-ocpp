/*
Copyright (c) 2020 Cedric Jimenez
This file is part of OpenOCPP.

OpenOCPP is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 2.1 of the License, or
(at your option) any later version.

OpenOCPP is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OpenOCPP. If not, see <http://www.gnu.org/licenses/>.
*/

/*
    Generated by json2cpp from : urn:OCPP:Cp:2:2020:3:RequestStartTransactionRequest
                                 OCPP 2.0.1 FINAL
*/

#ifndef OPENOCPP_OCPP20_SALESTARIFFENTRYTYPE_H
#define OPENOCPP_OCPP20_SALESTARIFFENTRYTYPE_H

#include "ConsumptionCostType20.h"
#include "CustomDataType20.h"
#include "RelativeTimeIntervalType20.h"

#include "IMessageConverter.h"
#include "Optional.h"
#include <vector>

namespace ocpp
{
namespace types
{
namespace ocpp20
{

/** @brief Sales_ Tariff_ Entry
urn:x-oca:ocpp:uid:2:233271
 */
struct SalesTariffEntryType
{
    /** @brief  */
    ocpp::types::Optional<CustomDataType> customData;
    /** @brief  */
    RelativeTimeIntervalType relativeTimeInterval;
    /** @brief Sales_ Tariff_ Entry. E_ Price_ Level. Unsigned_ Integer
urn:x-oca:ocpp:uid:1:569281
Defines the price level of this SalesTariffEntry (referring to NumEPriceLevels). Small values for the EPriceLevel represent a cheaper TariffEntry. Large values for the EPriceLevel represent a more expensive TariffEntry. */
    ocpp::types::Optional<int> ePriceLevel;
    /** @brief  */
    std::vector<ConsumptionCostType> consumptionCost;
};

/** @brief Converter class for SalesTariffEntryType type */
class SalesTariffEntryTypeConverter : public ocpp::messages::IMessageConverter<SalesTariffEntryType>
{
  public:
    /** @brief Clone the converter */
    ocpp::messages::IMessageConverter<SalesTariffEntryType>* clone() const override { return new SalesTariffEntryTypeConverter(); }

    /** @brief Convert a SalesTariffEntryType from a JSON representation */
    bool fromJson(const rapidjson::Value&       json,
                  SalesTariffEntryType&         data,
                  std::string&                  error_code,
                  [[maybe_unused]] std::string& error_message) override;

    /** @brief Convert a SalesTariffEntryType to a JSON representation */
    bool toJson(const SalesTariffEntryType& data, rapidjson::Document& json) override;
};

} // namespace ocpp20
} // namespace types
} // namespace ocpp

#endif // OPENOCPP_OCPP20_SALESTARIFFENTRYTYPE_H