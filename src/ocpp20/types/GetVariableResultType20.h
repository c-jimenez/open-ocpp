/*
Copyright (c) 2020 Cedric Jimenez
This file is part of OpenOCPP.

OpenOCPP is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 2.1 of the License, or
(at your option) any later version.

OpenOCPP is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OpenOCPP. If not, see <http://www.gnu.org/licenses/>.
*/

/*
    Generated by json2cpp from : urn:OCPP:Cp:2:2020:3:GetVariablesRequest
                                 OCPP 2.0.1 FINAL
*/

#ifndef OPENOCPP_GETVARIABLERESULTTYPE20_H
#define OPENOCPP_GETVARIABLERESULTTYPE20_H

#include "AttributeEnumType20.h"
#include "ComponentType20.h"
#include "CustomDataType20.h"
#include "GetVariableStatusEnumType20.h"
#include "StatusInfoType20.h"
#include "VariableType20.h"

#include "CiStringType.h"
#include "IMessageConverter.h"
#include "Optional.h"

namespace ocpp
{
namespace types
{
namespace ocpp20
{

/** @brief Class to hold results of GetVariables request.
 */
struct GetVariableResultType20
{
    /** @brief  */
    ocpp::types::Optional<CustomDataType20> customData;
    /** @brief  */
    ocpp::types::Optional<StatusInfoType20> attributeStatusInfo;
    /** @brief  */
    GetVariableStatusEnumType20 attributeStatus;
    /** @brief  */
    ocpp::types::Optional<AttributeEnumType20> attributeType;
    /** @brief Value of requested attribute type of component-variable. This field can only be empty when the given status is NOT accepted.

The Configuration Variable &lt;&lt;configkey-reporting-value-size,ReportingValueSize&gt;&gt; can be used to limit GetVariableResult.attributeValue, VariableAttribute.value and EventData.actualValue. The max size of these values will always remain equal. */
    ocpp::types::Optional<ocpp::types::CiStringType<2500u>> attributeValue;
    /** @brief  */
    ComponentType20 component;
    /** @brief  */
    VariableType20 variable;
};

/** @brief Converter class for GetVariableResultType20 type */
class GetVariableResultType20Converter : public ocpp::messages::IMessageConverter<GetVariableResultType20>
{
  public:
    /** @brief Clone the converter */
    ocpp::messages::IMessageConverter<GetVariableResultType20>* clone() const override { return new GetVariableResultType20Converter(); }

    /** @brief Convert a GetVariableResultType20 from a JSON representation */
    bool fromJson(const rapidjson::Value&       json,
                  GetVariableResultType20&      data,
                  std::string&                  error_code,
                  [[maybe_unused]] std::string& error_message) override;

    /** @brief Convert a GetVariableResultType20 to a JSON representation */
    bool toJson(const GetVariableResultType20& data, rapidjson::Document& json) override;
};

} // namespace ocpp20
} // namespace types
} // namespace ocpp

#endif // OPENOCPP_GETVARIABLERESULTTYPE20_H