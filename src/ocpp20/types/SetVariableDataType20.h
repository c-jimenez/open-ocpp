/*
Copyright (c) 2020 Cedric Jimenez
This file is part of OpenOCPP.

OpenOCPP is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 2.1 of the License, or
(at your option) any later version.

OpenOCPP is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OpenOCPP. If not, see <http://www.gnu.org/licenses/>.
*/

/*
    Generated by json2cpp from : urn:OCPP:Cp:2:2020:3:SetVariablesRequest
                                 OCPP 2.0.1 FINAL
*/

#ifndef OPENOCPP_SETVARIABLEDATATYPE20_H
#define OPENOCPP_SETVARIABLEDATATYPE20_H

#include "AttributeEnumType20.h"
#include "ComponentType20.h"
#include "CustomDataType20.h"
#include "VariableType20.h"

#include "CiStringType.h"
#include "IMessageConverter.h"
#include "Optional.h"

namespace ocpp
{
namespace types
{
namespace ocpp20
{

/** @brief  */
struct SetVariableDataType20
{
    /** @brief  */
    ocpp::types::Optional<CustomDataType20> customData;
    /** @brief  */
    ocpp::types::Optional<AttributeEnumType20> attributeType;
    /** @brief Value to be assigned to attribute of variable.

The Configuration Variable &lt;&lt;configkey-configuration-value-size,ConfigurationValueSize&gt;&gt; can be used to limit SetVariableData.attributeValue and VariableCharacteristics.valueList. The max size of these values will always remain equal. */
    ocpp::types::CiStringType<1000u> attributeValue;
    /** @brief  */
    ComponentType20 component;
    /** @brief  */
    VariableType20 variable;
};

/** @brief Converter class for SetVariableDataType20 type */
class SetVariableDataType20Converter : public ocpp::messages::IMessageConverter<SetVariableDataType20>
{
  public:
    /** @brief Clone the converter */
    ocpp::messages::IMessageConverter<SetVariableDataType20>* clone() const override { return new SetVariableDataType20Converter(); }

    /** @brief Convert a SetVariableDataType20 from a JSON representation */
    bool fromJson(const rapidjson::Value&       json,
                  SetVariableDataType20&        data,
                  std::string&                  error_code,
                  [[maybe_unused]] std::string& error_message) override;

    /** @brief Convert a SetVariableDataType20 to a JSON representation */
    bool toJson(const SetVariableDataType20& data, rapidjson::Document& json) override;
};

} // namespace ocpp20
} // namespace types
} // namespace ocpp

#endif // OPENOCPP_SETVARIABLEDATATYPE20_H