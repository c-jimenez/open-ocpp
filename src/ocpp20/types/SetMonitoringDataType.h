/*
Copyright (c) 2020 Cedric Jimenez
This file is part of OpenOCPP.

OpenOCPP is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 2.1 of the License, or
(at your option) any later version.

OpenOCPP is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OpenOCPP. If not, see <http://www.gnu.org/licenses/>.
*/

/*
    Generated by json2cpp from : urn:OCPP:Cp:2:2020:3:SetVariableMonitoringRequest
                                 OCPP 2.0.1 FINAL
*/

#ifndef OPENOCPP_SETMONITORINGDATATYPE_H
#define OPENOCPP_SETMONITORINGDATATYPE_H

#include "ComponentType.h"
#include "CustomDataType.h"
#include "MonitorEnumType.h"
#include "VariableType.h"

#include "IMessageConverter.h"
#include "Optional.h"

namespace ocpp
{
namespace types
{
namespace ocpp20
{

/** @brief Class to hold parameters of SetVariableMonitoring request.
 */
struct SetMonitoringDataType
{
    /** @brief  */
    ocpp::types::Optional<CustomDataType> customData;
    /** @brief An id SHALL only be given to replace an existing monitor. The Charging Station handles the generation of id's for new monitors. */
    ocpp::types::Optional<int> id;
    /** @brief Monitor only active when a transaction is ongoing on a component relevant to this transaction. Default = false. */
    ocpp::types::Optional<bool> transaction;
    /** @brief Value for threshold or delta monitoring.
For Periodic or PeriodicClockAligned this is the interval in seconds. */
    float value;
    /** @brief  */
    MonitorEnumType type;
    /** @brief The severity that will be assigned to an event that is triggered by this monitor. The severity range is 0-9, with 0 as the highest and 9 as the lowest severity level.

The severity levels have the following meaning: +
*0-Danger* +
Indicates lives are potentially in danger. Urgent attention is needed and action should be taken immediately. +
*1-Hardware Failure* +
Indicates that the Charging Station is unable to continue regular operations due to Hardware issues. Action is required. +
*2-System Failure* +
Indicates that the Charging Station is unable to continue regular operations due to software or minor hardware issues. Action is required. +
*3-Critical* +
Indicates a critical error. Action is required. +
*4-Error* +
Indicates a non-urgent error. Action is required. +
*5-Alert* +
Indicates an alert event. Default severity for any type of monitoring event.  +
*6-Warning* +
Indicates a warning event. Action may be required. +
*7-Notice* +
Indicates an unusual event. No immediate action is required. +
*8-Informational* +
Indicates a regular operational event. May be used for reporting, measuring throughput, etc. No action is required. +
*9-Debug* +
Indicates information useful to developers for debugging, not useful during operations. */
    int severity;
    /** @brief  */
    ComponentType component;
    /** @brief  */
    VariableType variable;
};

/** @brief Converter class for SetMonitoringDataType type */
class SetMonitoringDataTypeConverter : public ocpp::messages::IMessageConverter<SetMonitoringDataType>
{
  public:
    /** @brief Clone the converter */
    ocpp::messages::IMessageConverter<SetMonitoringDataType>* clone() const override { return new SetMonitoringDataTypeConverter(); }

    /** @brief Convert a SetMonitoringDataType from a JSON representation */
    bool fromJson(const rapidjson::Value&       json,
                  SetMonitoringDataType&        data,
                  std::string&                  error_code,
                  [[maybe_unused]] std::string& error_message) override;

    /** @brief Convert a SetMonitoringDataType to a JSON representation */
    bool toJson(const SetMonitoringDataType& data, rapidjson::Document& json) override;
};

} // namespace ocpp20
} // namespace types
} // namespace ocpp

#endif // OPENOCPP_SETMONITORINGDATATYPE_H