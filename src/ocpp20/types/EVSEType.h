/*
Copyright (c) 2020 Cedric Jimenez
This file is part of OpenOCPP.

OpenOCPP is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 2.1 of the License, or
(at your option) any later version.

OpenOCPP is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OpenOCPP. If not, see <http://www.gnu.org/licenses/>.
*/

/*
    Generated by json2cpp from : urn:OCPP:Cp:2:2020:3:TriggerMessageRequest
                                 OCPP 2.0.1 FINAL
*/

#ifndef OPENOCPP_EVSETYPE_H
#define OPENOCPP_EVSETYPE_H

#include "CustomDataType.h"

#include "Optional.h"
#include "IMessageConverter.h"

namespace ocpp
{
namespace types
{
namespace ocpp20
{

/** @brief EVSE
urn:x-oca:ocpp:uid:2:233123
Electric Vehicle Supply Equipment
 */
struct EVSEType
{
    /** @brief  */
    ocpp::types::Optional<CustomDataType> customData;
    /** @brief Identified_ Object. MRID. Numeric_ Identifier
urn:x-enexis:ecdm:uid:1:569198
EVSE Identifier. This contains a number (&gt; 0) designating an EVSE of the Charging Station. */
    int id;
    /** @brief An id to designate a specific connector (on an EVSE) by connector index number. */
    ocpp::types::Optional<int> connectorId;
};

/** @brief Converter class for EVSEType type */
class EVSETypeConverter : public ocpp::messages::IMessageConverter<EVSEType>
{
  public:
    /** @brief Clone the converter */
    ocpp::messages::IMessageConverter<EVSEType>* clone() const override { return new EVSETypeConverter(); }

    /** @brief Convert a EVSEType from a JSON representation */
    bool fromJson(const rapidjson::Value&       json,
                  EVSEType&                data,
                  std::string&                  error_code,
                  [[maybe_unused]] std::string& error_message) override;

    /** @brief Convert a EVSEType to a JSON representation */
    bool toJson(const EVSEType& data, rapidjson::Document& json) override;
};

} // namespace ocpp20
} // namespace types
} // namespace ocpp

#endif // OPENOCPP_EVSETYPE_H