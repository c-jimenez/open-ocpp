/*
Copyright (c) 2020 Cedric Jimenez
This file is part of OpenOCPP.

OpenOCPP is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 2.1 of the License, or
(at your option) any later version.

OpenOCPP is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OpenOCPP. If not, see <http://www.gnu.org/licenses/>.
*/

/*
    Generated by json2cpp from : urn:OCPP:Cp:2:2020:3:RequestStartTransactionRequest
                                 OCPP 2.0.1 FINAL
*/

#ifndef OPENOCPP_COSTTYPE20_H
#define OPENOCPP_COSTTYPE20_H

#include "CostKindEnumType20.h"
#include "CustomDataType20.h"

#include "IMessageConverter.h"
#include "Optional.h"

namespace ocpp
{
namespace types
{
namespace ocpp20
{

/** @brief Cost
urn:x-oca:ocpp:uid:2:233258
 */
struct CostType20
{
    /** @brief  */
    ocpp::types::Optional<CustomDataType20> customData;
    /** @brief  */
    CostKindEnumType20 costKind;
    /** @brief Cost. Amount. Amount
urn:x-oca:ocpp:uid:1:569244
The estimated or actual cost per kWh */
    int amount;
    /** @brief Cost. Amount_ Multiplier. Integer
urn:x-oca:ocpp:uid:1:569245
Values: -3..3, The amountMultiplier defines the exponent to base 10 (dec). The final value is determined by: amount * 10 ^ amountMultiplier */
    ocpp::types::Optional<int> amountMultiplier;
};

/** @brief Converter class for CostType20 type */
class CostType20Converter : public ocpp::messages::IMessageConverter<CostType20>
{
  public:
    /** @brief Clone the converter */
    ocpp::messages::IMessageConverter<CostType20>* clone() const override { return new CostType20Converter(); }

    /** @brief Convert a CostType20 from a JSON representation */
    bool fromJson(const rapidjson::Value&       json,
                  CostType20&                   data,
                  std::string&                  error_code,
                  [[maybe_unused]] std::string& error_message) override;

    /** @brief Convert a CostType20 to a JSON representation */
    bool toJson(const CostType20& data, rapidjson::Document& json) override;
};

} // namespace ocpp20
} // namespace types
} // namespace ocpp

#endif // OPENOCPP_COSTTYPE20_H