/*
Copyright (c) 2020 Cedric Jimenez
This file is part of OpenOCPP.

OpenOCPP is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 2.1 of the License, or
(at your option) any later version.

OpenOCPP is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OpenOCPP. If not, see <http://www.gnu.org/licenses/>.
*/

/*
    Generated by json2cpp from : urn:OCPP:Cp:2:2020:3:AuthorizeRequest
                                 OCPP 2.0.1 FINAL
*/

#include "IdTokenInfoType20.h"

#include "IRpc.h"

namespace ocpp
{
namespace types
{
namespace ocpp20
{

/** @brief Convert a IdTokenInfoType from a JSON representation */
bool IdTokenInfoTypeConverter::fromJson(const rapidjson::Value&       json,
                                        IdTokenInfoType&              data,
                                        std::string&                  error_code,
                                        [[maybe_unused]] std::string& error_message)
{
    bool ret = true;

    // customData
    if (json.HasMember("customData"))
    {
        CustomDataTypeConverter customData_converter;
        ret = ret && customData_converter.fromJson(json["customData"], data.customData, error_code, error_message);
    }

    // status
    data.status = AuthorizationStatusEnumTypeHelper.fromString(json["status"].GetString());

    // cacheExpiryDateTime
    ret = ret && extract(json, "cacheExpiryDateTime", data.cacheExpiryDateTime, error_message);

    // chargingPriority
    extract(json, "chargingPriority", data.chargingPriority);

    // language1
    extract(json, "language1", data.language1);

    // evseId
    if (json.HasMember("evseId"))
    {
        const rapidjson::Value& evseId_json = json["evseId"];
        for (auto it = evseId_json.Begin(); ret && (it != evseId_json.End()); ++it)
        {
            int& item = data.evseId.emplace_back();
            item      = it->GetInt();
        }
    }

    // groupIdToken
    if (json.HasMember("groupIdToken"))
    {
        IdTokenTypeConverter groupIdToken_converter;
        ret = ret && groupIdToken_converter.fromJson(json["groupIdToken"], data.groupIdToken, error_code, error_message);
    }

    // language2
    extract(json, "language2", data.language2);

    // personalMessage
    if (json.HasMember("personalMessage"))
    {
        MessageContentTypeConverter personalMessage_converter;
        ret = ret && personalMessage_converter.fromJson(json["personalMessage"], data.personalMessage, error_code, error_message);
    }

    if (!ret)
    {
        error_code = ocpp::rpc::IRpc::RPC_ERROR_TYPE_CONSTRAINT_VIOLATION;
    }

    return ret;
}

/** @brief Convert a IdTokenInfoType to a JSON representation */
bool IdTokenInfoTypeConverter::toJson(const IdTokenInfoType& data, rapidjson::Document& json)
{
    bool ret = true;

    // customData
    if (data.customData.isSet())
    {
        CustomDataTypeConverter customData_converter;
        customData_converter.setAllocator(allocator);
        rapidjson::Document customData_doc;
        customData_doc.Parse("{}");
        ret = ret && customData_converter.toJson(data.customData, customData_doc);
        json.AddMember(rapidjson::StringRef("customData"), customData_doc.Move(), *allocator);
    }

    // status
    fill(json, "status", AuthorizationStatusEnumTypeHelper.toString(data.status));

    // cacheExpiryDateTime
    fill(json, "cacheExpiryDateTime", data.cacheExpiryDateTime);

    // chargingPriority
    fill(json, "chargingPriority", data.chargingPriority);

    // language1
    fill(json, "language1", data.language1);

    // evseId
    if (!data.evseId.empty())
    {

        rapidjson::Value evseId_json(rapidjson::kArrayType);
        for (const int& item : data.evseId)
        {
            evseId_json.PushBack(rapidjson::Value(item), *allocator);
        }
        json.AddMember(rapidjson::StringRef("evseId"), evseId_json.Move(), *allocator);
    }

    // groupIdToken
    if (data.groupIdToken.isSet())
    {
        IdTokenTypeConverter groupIdToken_converter;
        groupIdToken_converter.setAllocator(allocator);
        rapidjson::Document groupIdToken_doc;
        groupIdToken_doc.Parse("{}");
        ret = ret && groupIdToken_converter.toJson(data.groupIdToken, groupIdToken_doc);
        json.AddMember(rapidjson::StringRef("groupIdToken"), groupIdToken_doc.Move(), *allocator);
    }

    // language2
    fill(json, "language2", data.language2);

    // personalMessage
    if (data.personalMessage.isSet())
    {
        MessageContentTypeConverter personalMessage_converter;
        personalMessage_converter.setAllocator(allocator);
        rapidjson::Document personalMessage_doc;
        personalMessage_doc.Parse("{}");
        ret = ret && personalMessage_converter.toJson(data.personalMessage, personalMessage_doc);
        json.AddMember(rapidjson::StringRef("personalMessage"), personalMessage_doc.Move(), *allocator);
    }

    return ret;
}

} // namespace ocpp20
} // namespace types
} // namespace ocpp