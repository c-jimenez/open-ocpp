/*
Copyright (c) 2020 Cedric Jimenez
This file is part of OpenOCPP.

OpenOCPP is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 2.1 of the License, or
(at your option) any later version.

OpenOCPP is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OpenOCPP. If not, see <http://www.gnu.org/licenses/>.
*/

/*
    Generated by json2cpp from : urn:OCPP:Cp:2:2020:3:BootNotificationRequest
                                 OCPP 2.0.1 FINAL
*/

#ifndef OPENOCPP_MODEMTYPE20_H
#define OPENOCPP_MODEMTYPE20_H

#include "CustomDataType20.h"

#include "CiStringType.h"
#include "IMessageConverter.h"
#include "Optional.h"

namespace ocpp
{
namespace types
{
namespace ocpp20
{

/** @brief Wireless_ Communication_ Module
urn:x-oca:ocpp:uid:2:233306
Defines parameters required for initiating and maintaining wireless communication with other devices.
 */
struct ModemType20
{
    /** @brief  */
    ocpp::types::Optional<CustomDataType20> customData;
    /** @brief Wireless_ Communication_ Module. ICCID. CI20_ Text
urn:x-oca:ocpp:uid:1:569327
This contains the ICCID of the modem’s SIM card. */
    ocpp::types::Optional<ocpp::types::CiStringType<20u>> iccid;
    /** @brief Wireless_ Communication_ Module. IMSI. CI20_ Text
urn:x-oca:ocpp:uid:1:569328
This contains the IMSI of the modem’s SIM card. */
    ocpp::types::Optional<ocpp::types::CiStringType<20u>> imsi;
};

/** @brief Converter class for ModemType20 type */
class ModemType20Converter : public ocpp::messages::IMessageConverter<ModemType20>
{
  public:
    /** @brief Clone the converter */
    ocpp::messages::IMessageConverter<ModemType20>* clone() const override { return new ModemType20Converter(); }

    /** @brief Convert a ModemType20 from a JSON representation */
    bool fromJson(const rapidjson::Value&       json,
                  ModemType20&                  data,
                  std::string&                  error_code,
                  [[maybe_unused]] std::string& error_message) override;

    /** @brief Convert a ModemType20 to a JSON representation */
    bool toJson(const ModemType20& data, rapidjson::Document& json) override;
};

} // namespace ocpp20
} // namespace types
} // namespace ocpp

#endif // OPENOCPP_MODEMTYPE20_H