/*
Copyright (c) 2020 Cedric Jimenez
This file is part of OpenOCPP.

OpenOCPP is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 2.1 of the License, or
(at your option) any later version.

OpenOCPP is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OpenOCPP. If not, see <http://www.gnu.org/licenses/>.
*/

/*
    Generated by json2cpp from : urn:OCPP:Cp:2:2020:3:NotifyDisplayMessagesRequest
                                 OCPP 2.0.1 FINAL
*/

#ifndef OPENOCPP_MESSAGECONTENTTYPE_H
#define OPENOCPP_MESSAGECONTENTTYPE_H

#include "CustomDataType.h"
#include "MessageFormatEnumType.h"

#include "CiStringType.h"
#include "IMessageConverter.h"
#include "Optional.h"

namespace ocpp
{
namespace types
{
namespace ocpp20
{

/** @brief Message_ Content
urn:x-enexis:ecdm:uid:2:234490
Contains message details, for a message to be displayed on a Charging Station.

 */
struct MessageContentType
{
    /** @brief  */
    ocpp::types::Optional<CustomDataType> customData;
    /** @brief  */
    MessageFormatEnumType format;
    /** @brief Message_ Content. Language. Language_ Code
urn:x-enexis:ecdm:uid:1:570849
Message language identifier. Contains a language code as defined in &lt;&lt;ref-RFC5646,[RFC5646]&gt;&gt;. */
    ocpp::types::Optional<ocpp::types::CiStringType<8u>> language;
    /** @brief Message_ Content. Content. Message
urn:x-enexis:ecdm:uid:1:570852
Message contents. */
    ocpp::types::CiStringType<512u> content;
};

/** @brief Converter class for MessageContentType type */
class MessageContentTypeConverter : public ocpp::messages::IMessageConverter<MessageContentType>
{
  public:
    /** @brief Clone the converter */
    ocpp::messages::IMessageConverter<MessageContentType>* clone() const override { return new MessageContentTypeConverter(); }

    /** @brief Convert a MessageContentType from a JSON representation */
    bool fromJson(const rapidjson::Value&       json,
                  MessageContentType&           data,
                  std::string&                  error_code,
                  [[maybe_unused]] std::string& error_message) override;

    /** @brief Convert a MessageContentType to a JSON representation */
    bool toJson(const MessageContentType& data, rapidjson::Document& json) override;
};

} // namespace ocpp20
} // namespace types
} // namespace ocpp

#endif // OPENOCPP_MESSAGECONTENTTYPE_H