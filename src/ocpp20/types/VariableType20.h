/*
Copyright (c) 2020 Cedric Jimenez
This file is part of OpenOCPP.

OpenOCPP is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 2.1 of the License, or
(at your option) any later version.

OpenOCPP is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OpenOCPP. If not, see <http://www.gnu.org/licenses/>.
*/

/*
    Generated by json2cpp from : urn:OCPP:Cp:2:2020:3:GetReportRequest
                                 OCPP 2.0.1 FINAL
*/

#ifndef OPENOCPP_VARIABLETYPE20_H
#define OPENOCPP_VARIABLETYPE20_H

#include "CustomDataType20.h"

#include "CiStringType.h"
#include "IMessageConverter.h"
#include "Optional.h"

namespace ocpp
{
namespace types
{
namespace ocpp20
{

/** @brief Reference key to a component-variable.
 */
struct VariableType20
{
    /** @brief  */
    ocpp::types::Optional<CustomDataType20> customData;
    /** @brief Name of the variable. Name should be taken from the list of standardized variable names whenever possible. Case Insensitive. strongly advised to use Camel Case. */
    ocpp::types::CiStringType<50u> name;
    /** @brief Name of instance in case the variable exists as multiple instances. Case Insensitive. strongly advised to use Camel Case. */
    ocpp::types::Optional<ocpp::types::CiStringType<50u>> instance;
};

/** @brief Converter class for VariableType20 type */
class VariableType20Converter : public ocpp::messages::IMessageConverter<VariableType20>
{
  public:
    /** @brief Clone the converter */
    ocpp::messages::IMessageConverter<VariableType20>* clone() const override { return new VariableType20Converter(); }

    /** @brief Convert a VariableType20 from a JSON representation */
    bool fromJson(const rapidjson::Value&       json,
                  VariableType20&               data,
                  std::string&                  error_code,
                  [[maybe_unused]] std::string& error_message) override;

    /** @brief Convert a VariableType20 to a JSON representation */
    bool toJson(const VariableType20& data, rapidjson::Document& json) override;
};

} // namespace ocpp20
} // namespace types
} // namespace ocpp

#endif // OPENOCPP_VARIABLETYPE20_H